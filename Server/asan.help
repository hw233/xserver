Available flags for AddressSanitizer:
	symbolize
		- If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
	external_symbolizer_path
		- Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
	allow_addr2line
		- If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
	strip_path_prefix
		- Strips this prefix from file paths in error reports.
	fast_unwind_on_check
		- If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
	fast_unwind_on_fatal
		- If available, use the fast frame-pointer-based unwinder on fatal errors.
	fast_unwind_on_malloc
		- If available, use the fast frame-pointer-based unwinder on malloc/free.
	handle_ioctl
		- Intercept and handle ioctl requests.
	malloc_context_size
		- Max number of stack frames kept for each allocation/deallocation.
	log_path
		- Write logs to "log_path.pid". The special values are "stdout" and "stderr". The default is "stderr".
	verbosity
		- Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
	detect_leaks
		- Enable memory leak detection.
	leak_check_at_exit
		- Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
	allocator_may_return_null
		- If false, the allocator will crash instead of returning 0 on out-of-memory.
	print_summary
		- If false, disable printing error summaries in addition to error reports.
	check_printf
		- Check printf arguments.
	handle_segv
		- If set, registers the tool's custom SEGV handler (both SIGBUS and SIGSEGV on OSX).
	allow_user_segv_handler
		- If set, allows user to register a SEGV handler even if the tool registers one.
	use_sigaltstack
		- If set, uses alternate stack for signal handling.
	detect_deadlocks
		- If set, deadlock detection is enabled.
	clear_shadow_mmap_threshold
		- Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
	color
		- Colorize reports: (always|never|auto).
	legacy_pthread_cond
		- Enables support for dynamic libraries linked with libpthread 2.2.5.
	intercept_tls_get_addr
		- Intercept __tls_get_addr.
	help
		- Print the flag descriptions.
	mmap_limit_mb
		- Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
	coverage
		- If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
	coverage_direct
		- If set, coverage information will be dumped directly to a memory mapped file. This way data is not lost even if the process is suddenly killed.
	coverage_dir
		- Target directory for coverage dumps. Defaults to the current directory.
	full_address_space
		- Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
	suppressions
		- Suppressions file name.
	print_suppressions
		- Print matched suppressions at exit.
	disable_coredump
		- Disable core dumping. By default, disable_core=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core bydefault and for sanitizers that don't reserve lots of virtual memory.
	symbolize_inline_frames
		- Print inlined frames in stacktraces. Defaults to true.
	stack_trace_format
		- Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
	quarantine_size
		- Size (in bytes) of quarantine used to detect use-after-free errors. Lower value may reduce memory usage but increase the chance of false negatives.
	redzone
		- Minimal size (in bytes) of redzones around heap objects. Requirement: redzone >= 16, is a power of two.
	max_redzone
		- Maximal size (in bytes) of redzones around heap objects.
	debug
		- If set, prints some debugging information and does additional checks.
	report_globals
		- Controls the way to handle globals (0 - don't detect buffer overflow on globals, 1 - detect buffer overflow, 2 - print data about registered globals).
	check_initialization_order
		- If set, attempts to catch initialization order issues.
	replace_str
		- If set, uses custom wrappers and replacements for libc string functions to find more errors.
	replace_intrin
		- If set, uses custom wrappers for memset/memcpy/memmove intinsics.
	mac_ignore_invalid_free
		- Ignore invalid free() calls to work around some bugs. Used on OS X only.
	detect_stack_use_after_return
		- Enables stack-use-after-return checking at run-time.
	min_uar_stack_size_log
		- Minimum fake stack size log.
	max_uar_stack_size_log
		- Maximum fake stack size log.
	uar_noreserve
		- Use mmap with 'norserve' flag to allocate fake stack.
	max_malloc_fill_size
		- ASan allocator flag. max_malloc_fill_size is the maximal amount of bytes that will be filled with malloc_fill_byte on malloc.
	malloc_fill_byte
		- Value used to fill the newly allocated memory.
	exitcode
		- Override the program exit status if the tool found an error.
	allow_user_poisoning
		- If set, user may manually mark memory regions as poisoned or unpoisoned.
	sleep_before_dying
		- Number of seconds to sleep between printing an error report and terminating the program. Useful for debugging purposes (e.g. when one needs to attach gdb).
	check_malloc_usable_size
		- Allows the users to work around the bug in Nvidia drivers prior to 295.*.
	unmap_shadow_on_exit
		- If set, explicitly unmaps the (huge) shadow at exit.
	abort_on_error
		- If set, the tool calls abort() instead of _exit() after printing the error report.
	print_stats
		- Print various statistics after printing an error message or if atexit=1.
	print_legend
		- Print the legend for the shadow bytes.
	atexit
		- If set, prints ASan exit stats even after program terminates successfully.
	allow_reexec
		- Allow the tool to re-exec the program. This may interfere badly with the debugger.
	print_full_thread_history
		- If set, prints thread creation stacks for the threads involved in the report and their ancestors up to the main thread.
	poison_heap
		- Poison (or not) the heap memory on [de]allocation. Zero value is useful for benchmarking the allocator or instrumentator.
	poison_array_cookie
		- Poison (or not) the array cookie after operator new[].
	poison_partial
		- If true, poison partially addressable 8-byte aligned words (default=true). This flag affects heap and global buffers, but not stack buffers.
	alloc_dealloc_mismatch
		- Report errors on malloc/delete, new/free, new/delete[], etc.
	new_delete_type_mismatch
		- Report errors on mismatch betwen size of new and delete.
	strict_memcmp
		- If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
	strict_init_order
		- If true, assume that dynamic initializers can never access globals from other modules, even if the latter are already initialized.
	start_deactivated
		- If true, ASan tweaks a bunch of other flags (quarantine, redzone, heap poisoning) to reduce memory consumption as much as possible, and restores them to original values when the first instrumented module is loaded into the process. This is mainly intended to be used on Android. 
	detect_invalid_pointer_pairs
		- If non-zero, try to detect operations like <, <=, >, >= and - on invalid pointer pairs (e.g. when pointers belong to different objects). The bigger the value the harder we try.
	detect_container_overflow
		- If true, honor the container overflow  annotations. See https://code.google.com/p/address-sanitizer/wiki/ContainerOverflow
	detect_odr_violation
		- If >=2, detect violation of One-Definition-Rule (ODR); If ==1, detect ODR-violation only if the two variables have different sizes
	dump_instruction_bytes
		- If true, dump 16 bytes starting at the instruction that caused SEGV

=================================================================
==21235==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 56 byte(s) in 1 object(s) allocated from:
    #0 0x7fe58012c79a in __interceptor_calloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x9879a)
    #1 0x45f99f in event_mm_calloc_ /home/jacktang/svnroot/XGame/Server/thirdlib/libevent/event.c:3459
    #2 0x4588b2 in event_config_new /home/jacktang/svnroot/XGame/Server/thirdlib/libevent/event.c:1095
    #3 0x441074 in game_event_init() /home/jacktang/svnroot/XGame/Server/comm_lib/game_event.cpp:39
    #4 0x43b2c3 in main /home/jacktang/svnroot/XGame/Server/conn_srv/conn_srv.cpp:162
    #5 0x7fe57ee1b82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)

SUMMARY: AddressSanitizer: 56 byte(s) leaked in 1 allocation(s).
