/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_horse_2eproto__INCLUDED
#define PROTOBUF_C_horse_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _OnHorseRequest OnHorseRequest;
typedef struct _HorseData HorseData;
typedef struct _HorseCommonAttr HorseCommonAttr;
typedef struct _HorseList HorseList;
typedef struct _BuyHorse BuyHorse;
typedef struct _BuyHorseAns BuyHorseAns;
typedef struct _HorseId HorseId;
typedef struct _SetCurHorseAns SetCurHorseAns;
typedef struct _HorseAttr HorseAttr;
typedef struct _HorseAttrAns HorseAttrAns;
typedef struct _HorseStepAns HorseStepAns;
typedef struct _HorseAddSoul HorseAddSoul;
typedef struct _HorseSoulAns HorseSoulAns;
typedef struct _HorseSoulLevelAns HorseSoulLevelAns;
typedef struct _OnHorse OnHorse;
typedef struct _FlyState FlyState;


/* --- enums --- */


/* --- messages --- */

struct  _OnHorseRequest
{
  ProtobufCMessage base;
  float pos_y;
};
#define ON_HORSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&on_horse_request__descriptor) \
    , 0 }


struct  _HorseData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t cd;
  protobuf_c_boolean isnew;
  protobuf_c_boolean isexpire;
  protobuf_c_boolean is_current;
};
#define HORSE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_data__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _HorseCommonAttr
{
  ProtobufCMessage base;
  uint32_t step;
  size_t n_attr;
  uint32_t *attr;
  size_t n_attr_level;
  uint32_t *attr_level;
  uint32_t soul_level;
  uint32_t cur_soul;
  uint32_t power;
  size_t n_soul_num;
  uint32_t *soul_num;
  protobuf_c_boolean soul_full;
};
#define HORSE_COMMON_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_common_attr__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0, 0, 0,NULL, 0 }


struct  _HorseList
{
  ProtobufCMessage base;
  size_t n_data;
  HorseData **data;
  HorseCommonAttr *attr;
};
#define HORSE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_list__descriptor) \
    , 0,NULL, NULL }


struct  _BuyHorse
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t shopid;
  uint32_t type;
};
#define BUY_HORSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_horse__descriptor) \
    , 0, 0, 0 }


struct  _BuyHorseAns
{
  ProtobufCMessage base;
  int32_t ret;
  HorseData *data;
};
#define BUY_HORSE_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&buy_horse_ans__descriptor) \
    , 0, NULL }


struct  _HorseId
{
  ProtobufCMessage base;
  uint32_t id;
};
#define HORSE_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_id__descriptor) \
    , 0 }


struct  _SetCurHorseAns
{
  ProtobufCMessage base;
  int32_t ret;
  uint32_t id;
  uint32_t power;
  uint64_t playerid;
  uint32_t old_id;
};
#define SET_CUR_HORSE_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_cur_horse_ans__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _HorseAttr
{
  ProtobufCMessage base;
  uint32_t arrtid;
  uint32_t type;
};
#define HORSE_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_attr__descriptor) \
    , 0, 0 }


struct  _HorseAttrAns
{
  ProtobufCMessage base;
  uint32_t arrtid;
  uint32_t num;
  int32_t ret;
  uint32_t power;
};
#define HORSE_ATTR_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_attr_ans__descriptor) \
    , 0, 0, 0, 0 }


struct  _HorseStepAns
{
  ProtobufCMessage base;
  uint32_t step;
  int32_t ret;
  uint32_t power;
};
#define HORSE_STEP_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_step_ans__descriptor) \
    , 0, 0, 0 }


struct  _HorseAddSoul
{
  ProtobufCMessage base;
  uint32_t soul;
};
#define HORSE_ADD_SOUL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_add_soul__descriptor) \
    , 0 }


struct  _HorseSoulAns
{
  ProtobufCMessage base;
  uint32_t soul;
  uint32_t power;
  uint32_t num;
  int32_t ret;
  uint32_t cur_soul;
  protobuf_c_boolean soul_full;
};
#define HORSE_SOUL_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_soul_ans__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _HorseSoulLevelAns
{
  ProtobufCMessage base;
  uint32_t level;
  uint32_t power;
  int32_t ret;
};
#define HORSE_SOUL_LEVEL_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&horse_soul_level_ans__descriptor) \
    , 0, 0, 0 }


struct  _OnHorse
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t horseid;
};
#define ON_HORSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&on_horse__descriptor) \
    , 0, 0 }


struct  _FlyState
{
  ProtobufCMessage base;
  int32_t fly;
};
#define FLY_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fly_state__descriptor) \
    , 0 }


/* OnHorseRequest methods */
void   on_horse_request__init
                     (OnHorseRequest         *message);
size_t on_horse_request__get_packed_size
                     (const OnHorseRequest   *message);
size_t on_horse_request__pack
                     (const OnHorseRequest   *message,
                      uint8_t             *out);
size_t on_horse_request__pack_to_buffer
                     (const OnHorseRequest   *message,
                      ProtobufCBuffer     *buffer);
OnHorseRequest *
       on_horse_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   on_horse_request__free_unpacked
                     (OnHorseRequest *message,
                      ProtobufCAllocator *allocator);
/* HorseData methods */
void   horse_data__init
                     (HorseData         *message);
size_t horse_data__get_packed_size
                     (const HorseData   *message);
size_t horse_data__pack
                     (const HorseData   *message,
                      uint8_t             *out);
size_t horse_data__pack_to_buffer
                     (const HorseData   *message,
                      ProtobufCBuffer     *buffer);
HorseData *
       horse_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_data__free_unpacked
                     (HorseData *message,
                      ProtobufCAllocator *allocator);
/* HorseCommonAttr methods */
void   horse_common_attr__init
                     (HorseCommonAttr         *message);
size_t horse_common_attr__get_packed_size
                     (const HorseCommonAttr   *message);
size_t horse_common_attr__pack
                     (const HorseCommonAttr   *message,
                      uint8_t             *out);
size_t horse_common_attr__pack_to_buffer
                     (const HorseCommonAttr   *message,
                      ProtobufCBuffer     *buffer);
HorseCommonAttr *
       horse_common_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_common_attr__free_unpacked
                     (HorseCommonAttr *message,
                      ProtobufCAllocator *allocator);
/* HorseList methods */
void   horse_list__init
                     (HorseList         *message);
size_t horse_list__get_packed_size
                     (const HorseList   *message);
size_t horse_list__pack
                     (const HorseList   *message,
                      uint8_t             *out);
size_t horse_list__pack_to_buffer
                     (const HorseList   *message,
                      ProtobufCBuffer     *buffer);
HorseList *
       horse_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_list__free_unpacked
                     (HorseList *message,
                      ProtobufCAllocator *allocator);
/* BuyHorse methods */
void   buy_horse__init
                     (BuyHorse         *message);
size_t buy_horse__get_packed_size
                     (const BuyHorse   *message);
size_t buy_horse__pack
                     (const BuyHorse   *message,
                      uint8_t             *out);
size_t buy_horse__pack_to_buffer
                     (const BuyHorse   *message,
                      ProtobufCBuffer     *buffer);
BuyHorse *
       buy_horse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_horse__free_unpacked
                     (BuyHorse *message,
                      ProtobufCAllocator *allocator);
/* BuyHorseAns methods */
void   buy_horse_ans__init
                     (BuyHorseAns         *message);
size_t buy_horse_ans__get_packed_size
                     (const BuyHorseAns   *message);
size_t buy_horse_ans__pack
                     (const BuyHorseAns   *message,
                      uint8_t             *out);
size_t buy_horse_ans__pack_to_buffer
                     (const BuyHorseAns   *message,
                      ProtobufCBuffer     *buffer);
BuyHorseAns *
       buy_horse_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   buy_horse_ans__free_unpacked
                     (BuyHorseAns *message,
                      ProtobufCAllocator *allocator);
/* HorseId methods */
void   horse_id__init
                     (HorseId         *message);
size_t horse_id__get_packed_size
                     (const HorseId   *message);
size_t horse_id__pack
                     (const HorseId   *message,
                      uint8_t             *out);
size_t horse_id__pack_to_buffer
                     (const HorseId   *message,
                      ProtobufCBuffer     *buffer);
HorseId *
       horse_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_id__free_unpacked
                     (HorseId *message,
                      ProtobufCAllocator *allocator);
/* SetCurHorseAns methods */
void   set_cur_horse_ans__init
                     (SetCurHorseAns         *message);
size_t set_cur_horse_ans__get_packed_size
                     (const SetCurHorseAns   *message);
size_t set_cur_horse_ans__pack
                     (const SetCurHorseAns   *message,
                      uint8_t             *out);
size_t set_cur_horse_ans__pack_to_buffer
                     (const SetCurHorseAns   *message,
                      ProtobufCBuffer     *buffer);
SetCurHorseAns *
       set_cur_horse_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_cur_horse_ans__free_unpacked
                     (SetCurHorseAns *message,
                      ProtobufCAllocator *allocator);
/* HorseAttr methods */
void   horse_attr__init
                     (HorseAttr         *message);
size_t horse_attr__get_packed_size
                     (const HorseAttr   *message);
size_t horse_attr__pack
                     (const HorseAttr   *message,
                      uint8_t             *out);
size_t horse_attr__pack_to_buffer
                     (const HorseAttr   *message,
                      ProtobufCBuffer     *buffer);
HorseAttr *
       horse_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_attr__free_unpacked
                     (HorseAttr *message,
                      ProtobufCAllocator *allocator);
/* HorseAttrAns methods */
void   horse_attr_ans__init
                     (HorseAttrAns         *message);
size_t horse_attr_ans__get_packed_size
                     (const HorseAttrAns   *message);
size_t horse_attr_ans__pack
                     (const HorseAttrAns   *message,
                      uint8_t             *out);
size_t horse_attr_ans__pack_to_buffer
                     (const HorseAttrAns   *message,
                      ProtobufCBuffer     *buffer);
HorseAttrAns *
       horse_attr_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_attr_ans__free_unpacked
                     (HorseAttrAns *message,
                      ProtobufCAllocator *allocator);
/* HorseStepAns methods */
void   horse_step_ans__init
                     (HorseStepAns         *message);
size_t horse_step_ans__get_packed_size
                     (const HorseStepAns   *message);
size_t horse_step_ans__pack
                     (const HorseStepAns   *message,
                      uint8_t             *out);
size_t horse_step_ans__pack_to_buffer
                     (const HorseStepAns   *message,
                      ProtobufCBuffer     *buffer);
HorseStepAns *
       horse_step_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_step_ans__free_unpacked
                     (HorseStepAns *message,
                      ProtobufCAllocator *allocator);
/* HorseAddSoul methods */
void   horse_add_soul__init
                     (HorseAddSoul         *message);
size_t horse_add_soul__get_packed_size
                     (const HorseAddSoul   *message);
size_t horse_add_soul__pack
                     (const HorseAddSoul   *message,
                      uint8_t             *out);
size_t horse_add_soul__pack_to_buffer
                     (const HorseAddSoul   *message,
                      ProtobufCBuffer     *buffer);
HorseAddSoul *
       horse_add_soul__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_add_soul__free_unpacked
                     (HorseAddSoul *message,
                      ProtobufCAllocator *allocator);
/* HorseSoulAns methods */
void   horse_soul_ans__init
                     (HorseSoulAns         *message);
size_t horse_soul_ans__get_packed_size
                     (const HorseSoulAns   *message);
size_t horse_soul_ans__pack
                     (const HorseSoulAns   *message,
                      uint8_t             *out);
size_t horse_soul_ans__pack_to_buffer
                     (const HorseSoulAns   *message,
                      ProtobufCBuffer     *buffer);
HorseSoulAns *
       horse_soul_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_soul_ans__free_unpacked
                     (HorseSoulAns *message,
                      ProtobufCAllocator *allocator);
/* HorseSoulLevelAns methods */
void   horse_soul_level_ans__init
                     (HorseSoulLevelAns         *message);
size_t horse_soul_level_ans__get_packed_size
                     (const HorseSoulLevelAns   *message);
size_t horse_soul_level_ans__pack
                     (const HorseSoulLevelAns   *message,
                      uint8_t             *out);
size_t horse_soul_level_ans__pack_to_buffer
                     (const HorseSoulLevelAns   *message,
                      ProtobufCBuffer     *buffer);
HorseSoulLevelAns *
       horse_soul_level_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   horse_soul_level_ans__free_unpacked
                     (HorseSoulLevelAns *message,
                      ProtobufCAllocator *allocator);
/* OnHorse methods */
void   on_horse__init
                     (OnHorse         *message);
size_t on_horse__get_packed_size
                     (const OnHorse   *message);
size_t on_horse__pack
                     (const OnHorse   *message,
                      uint8_t             *out);
size_t on_horse__pack_to_buffer
                     (const OnHorse   *message,
                      ProtobufCBuffer     *buffer);
OnHorse *
       on_horse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   on_horse__free_unpacked
                     (OnHorse *message,
                      ProtobufCAllocator *allocator);
/* FlyState methods */
void   fly_state__init
                     (FlyState         *message);
size_t fly_state__get_packed_size
                     (const FlyState   *message);
size_t fly_state__pack
                     (const FlyState   *message,
                      uint8_t             *out);
size_t fly_state__pack_to_buffer
                     (const FlyState   *message,
                      ProtobufCBuffer     *buffer);
FlyState *
       fly_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fly_state__free_unpacked
                     (FlyState *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*OnHorseRequest_Closure)
                 (const OnHorseRequest *message,
                  void *closure_data);
typedef void (*HorseData_Closure)
                 (const HorseData *message,
                  void *closure_data);
typedef void (*HorseCommonAttr_Closure)
                 (const HorseCommonAttr *message,
                  void *closure_data);
typedef void (*HorseList_Closure)
                 (const HorseList *message,
                  void *closure_data);
typedef void (*BuyHorse_Closure)
                 (const BuyHorse *message,
                  void *closure_data);
typedef void (*BuyHorseAns_Closure)
                 (const BuyHorseAns *message,
                  void *closure_data);
typedef void (*HorseId_Closure)
                 (const HorseId *message,
                  void *closure_data);
typedef void (*SetCurHorseAns_Closure)
                 (const SetCurHorseAns *message,
                  void *closure_data);
typedef void (*HorseAttr_Closure)
                 (const HorseAttr *message,
                  void *closure_data);
typedef void (*HorseAttrAns_Closure)
                 (const HorseAttrAns *message,
                  void *closure_data);
typedef void (*HorseStepAns_Closure)
                 (const HorseStepAns *message,
                  void *closure_data);
typedef void (*HorseAddSoul_Closure)
                 (const HorseAddSoul *message,
                  void *closure_data);
typedef void (*HorseSoulAns_Closure)
                 (const HorseSoulAns *message,
                  void *closure_data);
typedef void (*HorseSoulLevelAns_Closure)
                 (const HorseSoulLevelAns *message,
                  void *closure_data);
typedef void (*OnHorse_Closure)
                 (const OnHorse *message,
                  void *closure_data);
typedef void (*FlyState_Closure)
                 (const FlyState *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor on_horse_request__descriptor;
extern const ProtobufCMessageDescriptor horse_data__descriptor;
extern const ProtobufCMessageDescriptor horse_common_attr__descriptor;
extern const ProtobufCMessageDescriptor horse_list__descriptor;
extern const ProtobufCMessageDescriptor buy_horse__descriptor;
extern const ProtobufCMessageDescriptor buy_horse_ans__descriptor;
extern const ProtobufCMessageDescriptor horse_id__descriptor;
extern const ProtobufCMessageDescriptor set_cur_horse_ans__descriptor;
extern const ProtobufCMessageDescriptor horse_attr__descriptor;
extern const ProtobufCMessageDescriptor horse_attr_ans__descriptor;
extern const ProtobufCMessageDescriptor horse_step_ans__descriptor;
extern const ProtobufCMessageDescriptor horse_add_soul__descriptor;
extern const ProtobufCMessageDescriptor horse_soul_ans__descriptor;
extern const ProtobufCMessageDescriptor horse_soul_level_ans__descriptor;
extern const ProtobufCMessageDescriptor on_horse__descriptor;
extern const ProtobufCMessageDescriptor fly_state__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_horse_2eproto__INCLUDED */
