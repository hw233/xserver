/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_raid_2eproto__INCLUDED
#define PROTOBUF_C_raid_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _EnterRaidRequest EnterRaidRequest;
typedef struct _EnterRaidAnswer EnterRaidAnswer;
typedef struct _EnterRaidNotify EnterRaidNotify;
typedef struct _TeamMemberRefuseTransferNotify TeamMemberRefuseTransferNotify;
typedef struct _TransferToLeaderRequest TransferToLeaderRequest;
typedef struct _RaidFinishNotify RaidFinishNotify;
typedef struct _RaidEarningTimesChangedNotify RaidEarningTimesChangedNotify;
typedef struct _RaidHitStatisChangedNotify RaidHitStatisChangedNotify;
typedef struct _RaidPassParamChangedNotify RaidPassParamChangedNotify;
typedef struct _RaidRefreshNpcNotify RaidRefreshNpcNotify;
typedef struct _RaidRefreshTransferNotify RaidRefreshTransferNotify;
typedef struct _RaidShowHideAirWallNotify RaidShowHideAirWallNotify;
typedef struct _RaidEventNotify RaidEventNotify;
typedef struct _FbCD FbCD;
typedef struct _RaidShowCountdownNotify RaidShowCountdownNotify;
typedef struct _RaidStarChangedNotify RaidStarChangedNotify;
typedef struct _TeamRaidWaitReadyNotify TeamRaidWaitReadyNotify;
typedef struct _TeamRaidReadyNotify TeamRaidReadyNotify;
typedef struct _TeamRaidCancelNotify TeamRaidCancelNotify;
typedef struct _NpcTalkRequest NpcTalkRequest;


/* --- enums --- */


/* --- messages --- */

struct  _EnterRaidRequest
{
  ProtobufCMessage base;
  uint32_t raid_id;
};
#define ENTER_RAID_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_raid_request__descriptor) \
    , 0 }


struct  _EnterRaidAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_reson_player_id;
  uint64_t *reson_player_id;
  uint32_t item_id;
};
#define ENTER_RAID_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_raid_answer__descriptor) \
    , 0, 0,NULL, 0 }


struct  _EnterRaidNotify
{
  ProtobufCMessage base;
  uint32_t raid_id;
};
#define ENTER_RAID_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enter_raid_notify__descriptor) \
    , 0 }


struct  _TeamMemberRefuseTransferNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define TEAM_MEMBER_REFUSE_TRANSFER_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&team_member_refuse_transfer_notify__descriptor) \
    , 0 }


struct  _TransferToLeaderRequest
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t leader_id;
};
#define TRANSFER_TO_LEADER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transfer_to_leader_request__descriptor) \
    , 0, 0 }


struct  _RaidFinishNotify
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t raid_id;
  size_t n_star;
  uint32_t *star;
  size_t n_score_param;
  uint32_t *score_param;
  uint32_t gold;
  uint32_t exp;
  size_t n_item_id;
  uint32_t *item_id;
  size_t n_item_num;
  uint32_t *item_num;
};
#define RAID_FINISH_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_finish_notify__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0, 0, 0,NULL, 0,NULL }


struct  _RaidEarningTimesChangedNotify
{
  ProtobufCMessage base;
  size_t n_raid_id;
  uint32_t *raid_id;
  size_t n_earning_times;
  uint32_t *earning_times;
};
#define RAID_EARNING_TIMES_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_earning_times_changed_notify__descriptor) \
    , 0,NULL, 0,NULL }


struct  _RaidHitStatisChangedNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t damage;
  uint32_t injured;
  uint32_t cure;
};
#define RAID_HIT_STATIS_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_hit_statis_changed_notify__descriptor) \
    , 0, 0, 0, 0 }


struct  _RaidPassParamChangedNotify
{
  ProtobufCMessage base;
  uint32_t pass_index;
  uint32_t pass_value;
};
#define RAID_PASS_PARAM_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_pass_param_changed_notify__descriptor) \
    , 0, 0 }


struct  _RaidRefreshNpcNotify
{
  ProtobufCMessage base;
  size_t n_npc_id;
  uint32_t *npc_id;
};
#define RAID_REFRESH_NPC_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_refresh_npc_notify__descriptor) \
    , 0,NULL }


struct  _RaidRefreshTransferNotify
{
  ProtobufCMessage base;
  size_t n_transfer_id;
  uint32_t *transfer_id;
};
#define RAID_REFRESH_TRANSFER_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_refresh_transfer_notify__descriptor) \
    , 0,NULL }


struct  _RaidShowHideAirWallNotify
{
  ProtobufCMessage base;
  uint32_t show_hide;
  uint32_t air_wall_id;
};
#define RAID_SHOW_HIDE_AIR_WALL_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_show_hide_air_wall_notify__descriptor) \
    , 0, 0 }


struct  _RaidEventNotify
{
  ProtobufCMessage base;
  uint32_t type;
  size_t n_param1;
  double *param1;
  size_t n_param2;
  char **param2;
};
#define RAID_EVENT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_event_notify__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _FbCD
{
  ProtobufCMessage base;
  uint32_t cd;
};
#define FB_CD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fb_cd__descriptor) \
    , 0 }


struct  _RaidShowCountdownNotify
{
  ProtobufCMessage base;
  uint32_t time;
};
#define RAID_SHOW_COUNTDOWN_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_show_countdown_notify__descriptor) \
    , 0 }


struct  _RaidStarChangedNotify
{
  ProtobufCMessage base;
  size_t n_star;
  uint32_t *star;
  size_t n_param;
  uint32_t *param;
};
#define RAID_STAR_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&raid_star_changed_notify__descriptor) \
    , 0,NULL, 0,NULL }


struct  _TeamRaidWaitReadyNotify
{
  ProtobufCMessage base;
  uint32_t raid_id;
};
#define TEAM_RAID_WAIT_READY_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&team_raid_wait_ready_notify__descriptor) \
    , 0 }


struct  _TeamRaidReadyNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define TEAM_RAID_READY_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&team_raid_ready_notify__descriptor) \
    , 0 }


struct  _TeamRaidCancelNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t result;
};
#define TEAM_RAID_CANCEL_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&team_raid_cancel_notify__descriptor) \
    , 0, 0 }


struct  _NpcTalkRequest
{
  ProtobufCMessage base;
  uint32_t npc_id;
};
#define NPC_TALK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&npc_talk_request__descriptor) \
    , 0 }


/* EnterRaidRequest methods */
void   enter_raid_request__init
                     (EnterRaidRequest         *message);
size_t enter_raid_request__get_packed_size
                     (const EnterRaidRequest   *message);
size_t enter_raid_request__pack
                     (const EnterRaidRequest   *message,
                      uint8_t             *out);
size_t enter_raid_request__pack_to_buffer
                     (const EnterRaidRequest   *message,
                      ProtobufCBuffer     *buffer);
EnterRaidRequest *
       enter_raid_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_raid_request__free_unpacked
                     (EnterRaidRequest *message,
                      ProtobufCAllocator *allocator);
/* EnterRaidAnswer methods */
void   enter_raid_answer__init
                     (EnterRaidAnswer         *message);
size_t enter_raid_answer__get_packed_size
                     (const EnterRaidAnswer   *message);
size_t enter_raid_answer__pack
                     (const EnterRaidAnswer   *message,
                      uint8_t             *out);
size_t enter_raid_answer__pack_to_buffer
                     (const EnterRaidAnswer   *message,
                      ProtobufCBuffer     *buffer);
EnterRaidAnswer *
       enter_raid_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_raid_answer__free_unpacked
                     (EnterRaidAnswer *message,
                      ProtobufCAllocator *allocator);
/* EnterRaidNotify methods */
void   enter_raid_notify__init
                     (EnterRaidNotify         *message);
size_t enter_raid_notify__get_packed_size
                     (const EnterRaidNotify   *message);
size_t enter_raid_notify__pack
                     (const EnterRaidNotify   *message,
                      uint8_t             *out);
size_t enter_raid_notify__pack_to_buffer
                     (const EnterRaidNotify   *message,
                      ProtobufCBuffer     *buffer);
EnterRaidNotify *
       enter_raid_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enter_raid_notify__free_unpacked
                     (EnterRaidNotify *message,
                      ProtobufCAllocator *allocator);
/* TeamMemberRefuseTransferNotify methods */
void   team_member_refuse_transfer_notify__init
                     (TeamMemberRefuseTransferNotify         *message);
size_t team_member_refuse_transfer_notify__get_packed_size
                     (const TeamMemberRefuseTransferNotify   *message);
size_t team_member_refuse_transfer_notify__pack
                     (const TeamMemberRefuseTransferNotify   *message,
                      uint8_t             *out);
size_t team_member_refuse_transfer_notify__pack_to_buffer
                     (const TeamMemberRefuseTransferNotify   *message,
                      ProtobufCBuffer     *buffer);
TeamMemberRefuseTransferNotify *
       team_member_refuse_transfer_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   team_member_refuse_transfer_notify__free_unpacked
                     (TeamMemberRefuseTransferNotify *message,
                      ProtobufCAllocator *allocator);
/* TransferToLeaderRequest methods */
void   transfer_to_leader_request__init
                     (TransferToLeaderRequest         *message);
size_t transfer_to_leader_request__get_packed_size
                     (const TransferToLeaderRequest   *message);
size_t transfer_to_leader_request__pack
                     (const TransferToLeaderRequest   *message,
                      uint8_t             *out);
size_t transfer_to_leader_request__pack_to_buffer
                     (const TransferToLeaderRequest   *message,
                      ProtobufCBuffer     *buffer);
TransferToLeaderRequest *
       transfer_to_leader_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transfer_to_leader_request__free_unpacked
                     (TransferToLeaderRequest *message,
                      ProtobufCAllocator *allocator);
/* RaidFinishNotify methods */
void   raid_finish_notify__init
                     (RaidFinishNotify         *message);
size_t raid_finish_notify__get_packed_size
                     (const RaidFinishNotify   *message);
size_t raid_finish_notify__pack
                     (const RaidFinishNotify   *message,
                      uint8_t             *out);
size_t raid_finish_notify__pack_to_buffer
                     (const RaidFinishNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidFinishNotify *
       raid_finish_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_finish_notify__free_unpacked
                     (RaidFinishNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidEarningTimesChangedNotify methods */
void   raid_earning_times_changed_notify__init
                     (RaidEarningTimesChangedNotify         *message);
size_t raid_earning_times_changed_notify__get_packed_size
                     (const RaidEarningTimesChangedNotify   *message);
size_t raid_earning_times_changed_notify__pack
                     (const RaidEarningTimesChangedNotify   *message,
                      uint8_t             *out);
size_t raid_earning_times_changed_notify__pack_to_buffer
                     (const RaidEarningTimesChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidEarningTimesChangedNotify *
       raid_earning_times_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_earning_times_changed_notify__free_unpacked
                     (RaidEarningTimesChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidHitStatisChangedNotify methods */
void   raid_hit_statis_changed_notify__init
                     (RaidHitStatisChangedNotify         *message);
size_t raid_hit_statis_changed_notify__get_packed_size
                     (const RaidHitStatisChangedNotify   *message);
size_t raid_hit_statis_changed_notify__pack
                     (const RaidHitStatisChangedNotify   *message,
                      uint8_t             *out);
size_t raid_hit_statis_changed_notify__pack_to_buffer
                     (const RaidHitStatisChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidHitStatisChangedNotify *
       raid_hit_statis_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_hit_statis_changed_notify__free_unpacked
                     (RaidHitStatisChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidPassParamChangedNotify methods */
void   raid_pass_param_changed_notify__init
                     (RaidPassParamChangedNotify         *message);
size_t raid_pass_param_changed_notify__get_packed_size
                     (const RaidPassParamChangedNotify   *message);
size_t raid_pass_param_changed_notify__pack
                     (const RaidPassParamChangedNotify   *message,
                      uint8_t             *out);
size_t raid_pass_param_changed_notify__pack_to_buffer
                     (const RaidPassParamChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidPassParamChangedNotify *
       raid_pass_param_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_pass_param_changed_notify__free_unpacked
                     (RaidPassParamChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidRefreshNpcNotify methods */
void   raid_refresh_npc_notify__init
                     (RaidRefreshNpcNotify         *message);
size_t raid_refresh_npc_notify__get_packed_size
                     (const RaidRefreshNpcNotify   *message);
size_t raid_refresh_npc_notify__pack
                     (const RaidRefreshNpcNotify   *message,
                      uint8_t             *out);
size_t raid_refresh_npc_notify__pack_to_buffer
                     (const RaidRefreshNpcNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidRefreshNpcNotify *
       raid_refresh_npc_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_refresh_npc_notify__free_unpacked
                     (RaidRefreshNpcNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidRefreshTransferNotify methods */
void   raid_refresh_transfer_notify__init
                     (RaidRefreshTransferNotify         *message);
size_t raid_refresh_transfer_notify__get_packed_size
                     (const RaidRefreshTransferNotify   *message);
size_t raid_refresh_transfer_notify__pack
                     (const RaidRefreshTransferNotify   *message,
                      uint8_t             *out);
size_t raid_refresh_transfer_notify__pack_to_buffer
                     (const RaidRefreshTransferNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidRefreshTransferNotify *
       raid_refresh_transfer_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_refresh_transfer_notify__free_unpacked
                     (RaidRefreshTransferNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidShowHideAirWallNotify methods */
void   raid_show_hide_air_wall_notify__init
                     (RaidShowHideAirWallNotify         *message);
size_t raid_show_hide_air_wall_notify__get_packed_size
                     (const RaidShowHideAirWallNotify   *message);
size_t raid_show_hide_air_wall_notify__pack
                     (const RaidShowHideAirWallNotify   *message,
                      uint8_t             *out);
size_t raid_show_hide_air_wall_notify__pack_to_buffer
                     (const RaidShowHideAirWallNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidShowHideAirWallNotify *
       raid_show_hide_air_wall_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_show_hide_air_wall_notify__free_unpacked
                     (RaidShowHideAirWallNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidEventNotify methods */
void   raid_event_notify__init
                     (RaidEventNotify         *message);
size_t raid_event_notify__get_packed_size
                     (const RaidEventNotify   *message);
size_t raid_event_notify__pack
                     (const RaidEventNotify   *message,
                      uint8_t             *out);
size_t raid_event_notify__pack_to_buffer
                     (const RaidEventNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidEventNotify *
       raid_event_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_event_notify__free_unpacked
                     (RaidEventNotify *message,
                      ProtobufCAllocator *allocator);
/* FbCD methods */
void   fb_cd__init
                     (FbCD         *message);
size_t fb_cd__get_packed_size
                     (const FbCD   *message);
size_t fb_cd__pack
                     (const FbCD   *message,
                      uint8_t             *out);
size_t fb_cd__pack_to_buffer
                     (const FbCD   *message,
                      ProtobufCBuffer     *buffer);
FbCD *
       fb_cd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fb_cd__free_unpacked
                     (FbCD *message,
                      ProtobufCAllocator *allocator);
/* RaidShowCountdownNotify methods */
void   raid_show_countdown_notify__init
                     (RaidShowCountdownNotify         *message);
size_t raid_show_countdown_notify__get_packed_size
                     (const RaidShowCountdownNotify   *message);
size_t raid_show_countdown_notify__pack
                     (const RaidShowCountdownNotify   *message,
                      uint8_t             *out);
size_t raid_show_countdown_notify__pack_to_buffer
                     (const RaidShowCountdownNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidShowCountdownNotify *
       raid_show_countdown_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_show_countdown_notify__free_unpacked
                     (RaidShowCountdownNotify *message,
                      ProtobufCAllocator *allocator);
/* RaidStarChangedNotify methods */
void   raid_star_changed_notify__init
                     (RaidStarChangedNotify         *message);
size_t raid_star_changed_notify__get_packed_size
                     (const RaidStarChangedNotify   *message);
size_t raid_star_changed_notify__pack
                     (const RaidStarChangedNotify   *message,
                      uint8_t             *out);
size_t raid_star_changed_notify__pack_to_buffer
                     (const RaidStarChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
RaidStarChangedNotify *
       raid_star_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   raid_star_changed_notify__free_unpacked
                     (RaidStarChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* TeamRaidWaitReadyNotify methods */
void   team_raid_wait_ready_notify__init
                     (TeamRaidWaitReadyNotify         *message);
size_t team_raid_wait_ready_notify__get_packed_size
                     (const TeamRaidWaitReadyNotify   *message);
size_t team_raid_wait_ready_notify__pack
                     (const TeamRaidWaitReadyNotify   *message,
                      uint8_t             *out);
size_t team_raid_wait_ready_notify__pack_to_buffer
                     (const TeamRaidWaitReadyNotify   *message,
                      ProtobufCBuffer     *buffer);
TeamRaidWaitReadyNotify *
       team_raid_wait_ready_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   team_raid_wait_ready_notify__free_unpacked
                     (TeamRaidWaitReadyNotify *message,
                      ProtobufCAllocator *allocator);
/* TeamRaidReadyNotify methods */
void   team_raid_ready_notify__init
                     (TeamRaidReadyNotify         *message);
size_t team_raid_ready_notify__get_packed_size
                     (const TeamRaidReadyNotify   *message);
size_t team_raid_ready_notify__pack
                     (const TeamRaidReadyNotify   *message,
                      uint8_t             *out);
size_t team_raid_ready_notify__pack_to_buffer
                     (const TeamRaidReadyNotify   *message,
                      ProtobufCBuffer     *buffer);
TeamRaidReadyNotify *
       team_raid_ready_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   team_raid_ready_notify__free_unpacked
                     (TeamRaidReadyNotify *message,
                      ProtobufCAllocator *allocator);
/* TeamRaidCancelNotify methods */
void   team_raid_cancel_notify__init
                     (TeamRaidCancelNotify         *message);
size_t team_raid_cancel_notify__get_packed_size
                     (const TeamRaidCancelNotify   *message);
size_t team_raid_cancel_notify__pack
                     (const TeamRaidCancelNotify   *message,
                      uint8_t             *out);
size_t team_raid_cancel_notify__pack_to_buffer
                     (const TeamRaidCancelNotify   *message,
                      ProtobufCBuffer     *buffer);
TeamRaidCancelNotify *
       team_raid_cancel_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   team_raid_cancel_notify__free_unpacked
                     (TeamRaidCancelNotify *message,
                      ProtobufCAllocator *allocator);
/* NpcTalkRequest methods */
void   npc_talk_request__init
                     (NpcTalkRequest         *message);
size_t npc_talk_request__get_packed_size
                     (const NpcTalkRequest   *message);
size_t npc_talk_request__pack
                     (const NpcTalkRequest   *message,
                      uint8_t             *out);
size_t npc_talk_request__pack_to_buffer
                     (const NpcTalkRequest   *message,
                      ProtobufCBuffer     *buffer);
NpcTalkRequest *
       npc_talk_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   npc_talk_request__free_unpacked
                     (NpcTalkRequest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EnterRaidRequest_Closure)
                 (const EnterRaidRequest *message,
                  void *closure_data);
typedef void (*EnterRaidAnswer_Closure)
                 (const EnterRaidAnswer *message,
                  void *closure_data);
typedef void (*EnterRaidNotify_Closure)
                 (const EnterRaidNotify *message,
                  void *closure_data);
typedef void (*TeamMemberRefuseTransferNotify_Closure)
                 (const TeamMemberRefuseTransferNotify *message,
                  void *closure_data);
typedef void (*TransferToLeaderRequest_Closure)
                 (const TransferToLeaderRequest *message,
                  void *closure_data);
typedef void (*RaidFinishNotify_Closure)
                 (const RaidFinishNotify *message,
                  void *closure_data);
typedef void (*RaidEarningTimesChangedNotify_Closure)
                 (const RaidEarningTimesChangedNotify *message,
                  void *closure_data);
typedef void (*RaidHitStatisChangedNotify_Closure)
                 (const RaidHitStatisChangedNotify *message,
                  void *closure_data);
typedef void (*RaidPassParamChangedNotify_Closure)
                 (const RaidPassParamChangedNotify *message,
                  void *closure_data);
typedef void (*RaidRefreshNpcNotify_Closure)
                 (const RaidRefreshNpcNotify *message,
                  void *closure_data);
typedef void (*RaidRefreshTransferNotify_Closure)
                 (const RaidRefreshTransferNotify *message,
                  void *closure_data);
typedef void (*RaidShowHideAirWallNotify_Closure)
                 (const RaidShowHideAirWallNotify *message,
                  void *closure_data);
typedef void (*RaidEventNotify_Closure)
                 (const RaidEventNotify *message,
                  void *closure_data);
typedef void (*FbCD_Closure)
                 (const FbCD *message,
                  void *closure_data);
typedef void (*RaidShowCountdownNotify_Closure)
                 (const RaidShowCountdownNotify *message,
                  void *closure_data);
typedef void (*RaidStarChangedNotify_Closure)
                 (const RaidStarChangedNotify *message,
                  void *closure_data);
typedef void (*TeamRaidWaitReadyNotify_Closure)
                 (const TeamRaidWaitReadyNotify *message,
                  void *closure_data);
typedef void (*TeamRaidReadyNotify_Closure)
                 (const TeamRaidReadyNotify *message,
                  void *closure_data);
typedef void (*TeamRaidCancelNotify_Closure)
                 (const TeamRaidCancelNotify *message,
                  void *closure_data);
typedef void (*NpcTalkRequest_Closure)
                 (const NpcTalkRequest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor enter_raid_request__descriptor;
extern const ProtobufCMessageDescriptor enter_raid_answer__descriptor;
extern const ProtobufCMessageDescriptor enter_raid_notify__descriptor;
extern const ProtobufCMessageDescriptor team_member_refuse_transfer_notify__descriptor;
extern const ProtobufCMessageDescriptor transfer_to_leader_request__descriptor;
extern const ProtobufCMessageDescriptor raid_finish_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_earning_times_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_hit_statis_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_pass_param_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_refresh_npc_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_refresh_transfer_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_show_hide_air_wall_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_event_notify__descriptor;
extern const ProtobufCMessageDescriptor fb_cd__descriptor;
extern const ProtobufCMessageDescriptor raid_show_countdown_notify__descriptor;
extern const ProtobufCMessageDescriptor raid_star_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor team_raid_wait_ready_notify__descriptor;
extern const ProtobufCMessageDescriptor team_raid_ready_notify__descriptor;
extern const ProtobufCMessageDescriptor team_raid_cancel_notify__descriptor;
extern const ProtobufCMessageDescriptor npc_talk_request__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_raid_2eproto__INCLUDED */
