/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_task_2eproto__INCLUDED
#define PROTOBUF_C_task_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "comm_message.pb-c.h"

typedef struct _TaskCommRequest TaskCommRequest;
typedef struct _TaskCommAnswer TaskCommAnswer;
typedef struct _TaskUpdateNotify TaskUpdateNotify;
typedef struct _TaskListAnswer TaskListAnswer;
typedef struct _TaskCompleteRequest TaskCompleteRequest;
typedef struct _TaskEventRequest TaskEventRequest;
typedef struct _TaskRemoveNotify TaskRemoveNotify;
typedef struct _TaskUpdateFinishNotify TaskUpdateFinishNotify;
typedef struct _TaskUpdateChapterRewardNotify TaskUpdateChapterRewardNotify;


/* --- enums --- */


/* --- messages --- */

struct  _TaskCommRequest
{
  ProtobufCMessage base;
  uint32_t task_id;
};
#define TASK_COMM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_comm_request__descriptor) \
    , 0 }


struct  _TaskCommAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t task_id;
};
#define TASK_COMM_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_comm_answer__descriptor) \
    , 0, 0 }


struct  _TaskUpdateNotify
{
  ProtobufCMessage base;
  TaskData *data;
};
#define TASK_UPDATE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_update_notify__descriptor) \
    , NULL }


struct  _TaskListAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_ongoing_list;
  TaskData **ongoing_list;
  size_t n_finish_list;
  uint32_t *finish_list;
  uint32_t chapterid;
  uint32_t chapterstate;
};
#define TASK_LIST_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_list_answer__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0 }


struct  _TaskCompleteRequest
{
  ProtobufCMessage base;
  uint32_t task_id;
  uint32_t condition_id;
};
#define TASK_COMPLETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_complete_request__descriptor) \
    , 0, 0 }


struct  _TaskEventRequest
{
  ProtobufCMessage base;
  uint32_t task_id;
  uint32_t event_id;
};
#define TASK_EVENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_event_request__descriptor) \
    , 0, 0 }


struct  _TaskRemoveNotify
{
  ProtobufCMessage base;
  uint32_t task_id;
};
#define TASK_REMOVE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_remove_notify__descriptor) \
    , 0 }


struct  _TaskUpdateFinishNotify
{
  ProtobufCMessage base;
  size_t n_adds;
  uint32_t *adds;
  size_t n_dels;
  uint32_t *dels;
};
#define TASK_UPDATE_FINISH_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_update_finish_notify__descriptor) \
    , 0,NULL, 0,NULL }


struct  _TaskUpdateChapterRewardNotify
{
  ProtobufCMessage base;
  uint32_t chapterid;
  uint32_t chapterstate;
};
#define TASK_UPDATE_CHAPTER_REWARD_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task_update_chapter_reward_notify__descriptor) \
    , 0, 0 }


/* TaskCommRequest methods */
void   task_comm_request__init
                     (TaskCommRequest         *message);
size_t task_comm_request__get_packed_size
                     (const TaskCommRequest   *message);
size_t task_comm_request__pack
                     (const TaskCommRequest   *message,
                      uint8_t             *out);
size_t task_comm_request__pack_to_buffer
                     (const TaskCommRequest   *message,
                      ProtobufCBuffer     *buffer);
TaskCommRequest *
       task_comm_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_comm_request__free_unpacked
                     (TaskCommRequest *message,
                      ProtobufCAllocator *allocator);
/* TaskCommAnswer methods */
void   task_comm_answer__init
                     (TaskCommAnswer         *message);
size_t task_comm_answer__get_packed_size
                     (const TaskCommAnswer   *message);
size_t task_comm_answer__pack
                     (const TaskCommAnswer   *message,
                      uint8_t             *out);
size_t task_comm_answer__pack_to_buffer
                     (const TaskCommAnswer   *message,
                      ProtobufCBuffer     *buffer);
TaskCommAnswer *
       task_comm_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_comm_answer__free_unpacked
                     (TaskCommAnswer *message,
                      ProtobufCAllocator *allocator);
/* TaskUpdateNotify methods */
void   task_update_notify__init
                     (TaskUpdateNotify         *message);
size_t task_update_notify__get_packed_size
                     (const TaskUpdateNotify   *message);
size_t task_update_notify__pack
                     (const TaskUpdateNotify   *message,
                      uint8_t             *out);
size_t task_update_notify__pack_to_buffer
                     (const TaskUpdateNotify   *message,
                      ProtobufCBuffer     *buffer);
TaskUpdateNotify *
       task_update_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_update_notify__free_unpacked
                     (TaskUpdateNotify *message,
                      ProtobufCAllocator *allocator);
/* TaskListAnswer methods */
void   task_list_answer__init
                     (TaskListAnswer         *message);
size_t task_list_answer__get_packed_size
                     (const TaskListAnswer   *message);
size_t task_list_answer__pack
                     (const TaskListAnswer   *message,
                      uint8_t             *out);
size_t task_list_answer__pack_to_buffer
                     (const TaskListAnswer   *message,
                      ProtobufCBuffer     *buffer);
TaskListAnswer *
       task_list_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_list_answer__free_unpacked
                     (TaskListAnswer *message,
                      ProtobufCAllocator *allocator);
/* TaskCompleteRequest methods */
void   task_complete_request__init
                     (TaskCompleteRequest         *message);
size_t task_complete_request__get_packed_size
                     (const TaskCompleteRequest   *message);
size_t task_complete_request__pack
                     (const TaskCompleteRequest   *message,
                      uint8_t             *out);
size_t task_complete_request__pack_to_buffer
                     (const TaskCompleteRequest   *message,
                      ProtobufCBuffer     *buffer);
TaskCompleteRequest *
       task_complete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_complete_request__free_unpacked
                     (TaskCompleteRequest *message,
                      ProtobufCAllocator *allocator);
/* TaskEventRequest methods */
void   task_event_request__init
                     (TaskEventRequest         *message);
size_t task_event_request__get_packed_size
                     (const TaskEventRequest   *message);
size_t task_event_request__pack
                     (const TaskEventRequest   *message,
                      uint8_t             *out);
size_t task_event_request__pack_to_buffer
                     (const TaskEventRequest   *message,
                      ProtobufCBuffer     *buffer);
TaskEventRequest *
       task_event_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_event_request__free_unpacked
                     (TaskEventRequest *message,
                      ProtobufCAllocator *allocator);
/* TaskRemoveNotify methods */
void   task_remove_notify__init
                     (TaskRemoveNotify         *message);
size_t task_remove_notify__get_packed_size
                     (const TaskRemoveNotify   *message);
size_t task_remove_notify__pack
                     (const TaskRemoveNotify   *message,
                      uint8_t             *out);
size_t task_remove_notify__pack_to_buffer
                     (const TaskRemoveNotify   *message,
                      ProtobufCBuffer     *buffer);
TaskRemoveNotify *
       task_remove_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_remove_notify__free_unpacked
                     (TaskRemoveNotify *message,
                      ProtobufCAllocator *allocator);
/* TaskUpdateFinishNotify methods */
void   task_update_finish_notify__init
                     (TaskUpdateFinishNotify         *message);
size_t task_update_finish_notify__get_packed_size
                     (const TaskUpdateFinishNotify   *message);
size_t task_update_finish_notify__pack
                     (const TaskUpdateFinishNotify   *message,
                      uint8_t             *out);
size_t task_update_finish_notify__pack_to_buffer
                     (const TaskUpdateFinishNotify   *message,
                      ProtobufCBuffer     *buffer);
TaskUpdateFinishNotify *
       task_update_finish_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_update_finish_notify__free_unpacked
                     (TaskUpdateFinishNotify *message,
                      ProtobufCAllocator *allocator);
/* TaskUpdateChapterRewardNotify methods */
void   task_update_chapter_reward_notify__init
                     (TaskUpdateChapterRewardNotify         *message);
size_t task_update_chapter_reward_notify__get_packed_size
                     (const TaskUpdateChapterRewardNotify   *message);
size_t task_update_chapter_reward_notify__pack
                     (const TaskUpdateChapterRewardNotify   *message,
                      uint8_t             *out);
size_t task_update_chapter_reward_notify__pack_to_buffer
                     (const TaskUpdateChapterRewardNotify   *message,
                      ProtobufCBuffer     *buffer);
TaskUpdateChapterRewardNotify *
       task_update_chapter_reward_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task_update_chapter_reward_notify__free_unpacked
                     (TaskUpdateChapterRewardNotify *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TaskCommRequest_Closure)
                 (const TaskCommRequest *message,
                  void *closure_data);
typedef void (*TaskCommAnswer_Closure)
                 (const TaskCommAnswer *message,
                  void *closure_data);
typedef void (*TaskUpdateNotify_Closure)
                 (const TaskUpdateNotify *message,
                  void *closure_data);
typedef void (*TaskListAnswer_Closure)
                 (const TaskListAnswer *message,
                  void *closure_data);
typedef void (*TaskCompleteRequest_Closure)
                 (const TaskCompleteRequest *message,
                  void *closure_data);
typedef void (*TaskEventRequest_Closure)
                 (const TaskEventRequest *message,
                  void *closure_data);
typedef void (*TaskRemoveNotify_Closure)
                 (const TaskRemoveNotify *message,
                  void *closure_data);
typedef void (*TaskUpdateFinishNotify_Closure)
                 (const TaskUpdateFinishNotify *message,
                  void *closure_data);
typedef void (*TaskUpdateChapterRewardNotify_Closure)
                 (const TaskUpdateChapterRewardNotify *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor task_comm_request__descriptor;
extern const ProtobufCMessageDescriptor task_comm_answer__descriptor;
extern const ProtobufCMessageDescriptor task_update_notify__descriptor;
extern const ProtobufCMessageDescriptor task_list_answer__descriptor;
extern const ProtobufCMessageDescriptor task_complete_request__descriptor;
extern const ProtobufCMessageDescriptor task_event_request__descriptor;
extern const ProtobufCMessageDescriptor task_remove_notify__descriptor;
extern const ProtobufCMessageDescriptor task_update_finish_notify__descriptor;
extern const ProtobufCMessageDescriptor task_update_chapter_reward_notify__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_task_2eproto__INCLUDED */
