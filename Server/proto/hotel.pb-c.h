/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_hotel_2eproto__INCLUDED
#define PROTOBUF_C_hotel_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _GuoyuType GuoyuType;
typedef struct _ReqChoseGuoyuTask ReqChoseGuoyuTask;
typedef struct _UpdateGuoyuTask UpdateGuoyuTask;
typedef struct _Yaoshi Yaoshi;
typedef struct _GiveupGuoyuTask GiveupGuoyuTask;
typedef struct _ReqSetYaoshiSpecial ReqSetYaoshiSpecial;
typedef struct _AnsYaoshiSpecial AnsYaoshiSpecial;
typedef struct _YaoshiLevelExp YaoshiLevelExp;
typedef struct _YaoshiNumber YaoshiNumber;
typedef struct _GuoyuSucc GuoyuSucc;
typedef struct _GuoyuFbSucc GuoyuFbSucc;
typedef struct _BossId BossId;
typedef struct _GuoyuFb GuoyuFb;
typedef struct _ReqFindTarget ReqFindTarget;
typedef struct _AnsFindTarget AnsFindTarget;
typedef struct _ChengjieType ChengjieType;
typedef struct _ReqAddChengjieTask ReqAddChengjieTask;
typedef struct _AnsAddChengjieTask AnsAddChengjieTask;
typedef struct _ReqAcceptChengjieTask ReqAcceptChengjieTask;
typedef struct _AnsAcceptChengjieTask AnsAcceptChengjieTask;
typedef struct _ChengjieTaskSucc ChengjieTaskSucc;
typedef struct _ChengjieTask ChengjieTask;
typedef struct _ChengjieRefreshType ChengjieRefreshType;
typedef struct _ChengjieList ChengjieList;
typedef struct _ChengjieKiller ChengjieKiller;
typedef struct _ShangjinTaskAward ShangjinTaskAward;
typedef struct _ShangjinTaskType ShangjinTaskType;
typedef struct _ShangjinType ShangjinType;
typedef struct _ShangjinTaskId ShangjinTaskId;
typedef struct _ShangjinList ShangjinList;
typedef struct _AllYaoshiNum AllYaoshiNum;
typedef struct _ChengjieMoney ChengjieMoney;
typedef struct _ChengjieTaskComplete ChengjieTaskComplete;


/* --- enums --- */

typedef enum _MAJORTYPE {
  MAJOR__TYPE__NONE = 0,
  MAJOR__TYPE__SHUANGJIN = 1,
  MAJOR__TYPE__CHENGJIE = 2,
  MAJOR__TYPE__GUOYU = 3
} MAJORTYPE;
typedef enum _GUOYUTASKTYPE {
  GUOYU__TASK__TYPE__PRIMATY = 1,
  GUOYU__TASK__TYPE__MIDDLE = 2,
  GUOYU__TASK__TYPE__HIGH = 3,
  GUOYU__TASK__TYPE__CRITICAL = 4
} GUOYUTASKTYPE;

/* --- messages --- */

struct  _GuoyuType
{
  ProtobufCMessage base;
  int32_t guoyu_level;
  int32_t cur_exp;
  int32_t cur_task;
  int32_t task_cd;
  int32_t critical_cd;
  int32_t critical_num;
  int32_t guoyu_num;
  int32_t map;
  int32_t type;
  protobuf_c_boolean award;
};
#define GUOYU_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guoyu_type__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ReqChoseGuoyuTask
{
  ProtobufCMessage base;
  int32_t type;
  protobuf_c_boolean refresh;
};
#define REQ_CHOSE_GUOYU_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_chose_guoyu_task__descriptor) \
    , 0, 0 }


struct  _UpdateGuoyuTask
{
  ProtobufCMessage base;
  int32_t id;
  int32_t cd;
  int32_t ret;
  int32_t map;
  int32_t type;
  size_t n_pid;
  uint64_t *pid;
  protobuf_c_boolean refresh;
  protobuf_c_boolean award;
};
#define UPDATE_GUOYU_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_guoyu_task__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _Yaoshi
{
  ProtobufCMessage base;
  int32_t cur_major;
  GuoyuType *guoyu;
  ChengjieType *chengjie;
  ShangjinType *shangjin;
  uint32_t change_num;
};
#define YAOSHI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&yaoshi__descriptor) \
    , 0, NULL, NULL, NULL, 0 }


struct  _GiveupGuoyuTask
{
  ProtobufCMessage base;
  int32_t ret;
};
#define GIVEUP_GUOYU_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&giveup_guoyu_task__descriptor) \
    , 0 }


struct  _ReqSetYaoshiSpecial
{
  ProtobufCMessage base;
  int32_t type;
};
#define REQ_SET_YAOSHI_SPECIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_set_yaoshi_special__descriptor) \
    , 0 }


struct  _AnsYaoshiSpecial
{
  ProtobufCMessage base;
  int32_t type;
  int32_t ret;
};
#define ANS_YAOSHI_SPECIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ans_yaoshi_special__descriptor) \
    , 0, 0 }


struct  _YaoshiLevelExp
{
  ProtobufCMessage base;
  int32_t type;
  uint32_t level;
  uint32_t exp;
};
#define YAOSHI_LEVEL_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&yaoshi_level_exp__descriptor) \
    , 0, 0, 0 }


struct  _YaoshiNumber
{
  ProtobufCMessage base;
  int32_t critical_num;
  int32_t guoyu_num;
};
#define YAOSHI_NUMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&yaoshi_number__descriptor) \
    , 0, 0 }


struct  _GuoyuSucc
{
  ProtobufCMessage base;
  protobuf_c_boolean succ;
};
#define GUOYU_SUCC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guoyu_succ__descriptor) \
    , 0 }


struct  _GuoyuFbSucc
{
  ProtobufCMessage base;
  int32_t succ;
};
#define GUOYU_FB_SUCC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guoyu_fb_succ__descriptor) \
    , 0 }


struct  _BossId
{
  ProtobufCMessage base;
  uint32_t id;
};
#define BOSS_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&boss_id__descriptor) \
    , 0 }


struct  _GuoyuFb
{
  ProtobufCMessage base;
  uint32_t cd;
};
#define GUOYU_FB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guoyu_fb__descriptor) \
    , 0 }


struct  _ReqFindTarget
{
  ProtobufCMessage base;
  uint64_t pid;
  char *name;
};
#define REQ_FIND_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_find_target__descriptor) \
    , 0, NULL }


struct  _AnsFindTarget
{
  ProtobufCMessage base;
  int32_t ret;
  char *name;
  uint64_t pid;
  uint32_t lv;
};
#define ANS_FIND_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ans_find_target__descriptor) \
    , 0, NULL, 0, 0 }


struct  _ChengjieType
{
  ProtobufCMessage base;
  int32_t level;
  int32_t cur_exp;
  int32_t num;
};
#define CHENGJIE_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_type__descriptor) \
    , 0, 0, 0 }


struct  _ReqAddChengjieTask
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t shangjin;
  protobuf_c_boolean anonymous;
  char *declaration;
  char *name;
  uint32_t step;
};
#define REQ_ADD_CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_add_chengjie_task__descriptor) \
    , 0, 0, 0, NULL, NULL, 0 }


struct  _AnsAddChengjieTask
{
  ProtobufCMessage base;
  int32_t ret;
};
#define ANS_ADD_CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ans_add_chengjie_task__descriptor) \
    , 0 }


struct  _ReqAcceptChengjieTask
{
  ProtobufCMessage base;
  uint32_t taskid;
};
#define REQ_ACCEPT_CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_accept_chengjie_task__descriptor) \
    , 0 }


struct  _AnsAcceptChengjieTask
{
  ProtobufCMessage base;
  int32_t ret;
  uint32_t taskid;
};
#define ANS_ACCEPT_CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ans_accept_chengjie_task__descriptor) \
    , 0, 0 }


struct  _ChengjieTaskSucc
{
  ProtobufCMessage base;
  protobuf_c_boolean succ;
  uint32_t taskid;
};
#define CHENGJIE_TASK_SUCC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_task_succ__descriptor) \
    , 0, 0 }


struct  _ChengjieTask
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t icon;
  char *name;
  uint32_t lv;
  uint32_t job;
  protobuf_c_boolean online;
  uint32_t fight;
  uint32_t fail;
  uint32_t shuangjin;
  uint32_t exp;
  uint32_t courage;
  uint32_t taskid;
  uint32_t cd;
  uint32_t complete_cd;
  protobuf_c_boolean complete;
  uint32_t accept_cd;
  uint64_t investor;
  uint32_t zhenying;
};
#define CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_task__descriptor) \
    , 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ChengjieRefreshType
{
  ProtobufCMessage base;
  int32_t type;
};
#define CHENGJIE_REFRESH_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_refresh_type__descriptor) \
    , 0 }


struct  _ChengjieList
{
  ProtobufCMessage base;
  size_t n_task;
  ChengjieTask **task;
  int32_t type;
  size_t n_task_myself;
  ChengjieTask **task_myself;
};
#define CHENGJIE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_list__descriptor) \
    , 0,NULL, 0, 0,NULL }


struct  _ChengjieKiller
{
  ProtobufCMessage base;
  uint64_t playerid;
};
#define CHENGJIE_KILLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_killer__descriptor) \
    , 0 }


struct  _ShangjinTaskAward
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t num;
};
#define SHANGJIN_TASK_AWARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_task_award__descriptor) \
    , 0, 0 }


struct  _ShangjinTaskType
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t quality;
  size_t n_award;
  ShangjinTaskAward **award;
  uint32_t reduce;
};
#define SHANGJIN_TASK_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_task_type__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _ShangjinType
{
  ProtobufCMessage base;
  int32_t level;
  int32_t cur_exp;
  uint32_t num;
  uint32_t cur_task;
  size_t n_task_type;
  ShangjinTaskType **task_type;
  protobuf_c_boolean accept;
  uint32_t free_refresh;
};
#define SHANGJIN_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_type__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _ShangjinTaskId
{
  ProtobufCMessage base;
  uint32_t taskid;
};
#define SHANGJIN_TASK_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_task_id__descriptor) \
    , 0 }


struct  _ShangjinList
{
  ProtobufCMessage base;
  uint32_t ret;
  uint32_t cur_task;
  size_t n_task_list;
  ShangjinTaskType **task_list;
  protobuf_c_boolean accept;
  protobuf_c_boolean refresh;
};
#define SHANGJIN_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_list__descriptor) \
    , 0, 0, 0,NULL, 0, 0 }


struct  _AllYaoshiNum
{
  ProtobufCMessage base;
  int32_t critical_num;
  int32_t guoyu_num;
  int32_t shangjin_num;
  int32_t chengjie_num;
  int32_t shangjin_free;
};
#define ALL_YAOSHI_NUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&all_yaoshi_num__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _ChengjieMoney
{
  ProtobufCMessage base;
  uint64_t pid;
  uint64_t target;
  uint64_t cd;
  uint32_t money;
};
#define CHENGJIE_MONEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_money__descriptor) \
    , 0, 0, 0, 0 }


struct  _ChengjieTaskComplete
{
  ProtobufCMessage base;
  uint64_t investor;
  uint64_t target;
  uint64_t acceptor;
  protobuf_c_boolean anonymous;
  char *declaration;
  char *scene;
  uint32_t step;
};
#define CHENGJIE_TASK_COMPLETE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_task_complete__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, 0 }


/* GuoyuType methods */
void   guoyu_type__init
                     (GuoyuType         *message);
size_t guoyu_type__get_packed_size
                     (const GuoyuType   *message);
size_t guoyu_type__pack
                     (const GuoyuType   *message,
                      uint8_t             *out);
size_t guoyu_type__pack_to_buffer
                     (const GuoyuType   *message,
                      ProtobufCBuffer     *buffer);
GuoyuType *
       guoyu_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guoyu_type__free_unpacked
                     (GuoyuType *message,
                      ProtobufCAllocator *allocator);
/* ReqChoseGuoyuTask methods */
void   req_chose_guoyu_task__init
                     (ReqChoseGuoyuTask         *message);
size_t req_chose_guoyu_task__get_packed_size
                     (const ReqChoseGuoyuTask   *message);
size_t req_chose_guoyu_task__pack
                     (const ReqChoseGuoyuTask   *message,
                      uint8_t             *out);
size_t req_chose_guoyu_task__pack_to_buffer
                     (const ReqChoseGuoyuTask   *message,
                      ProtobufCBuffer     *buffer);
ReqChoseGuoyuTask *
       req_chose_guoyu_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_chose_guoyu_task__free_unpacked
                     (ReqChoseGuoyuTask *message,
                      ProtobufCAllocator *allocator);
/* UpdateGuoyuTask methods */
void   update_guoyu_task__init
                     (UpdateGuoyuTask         *message);
size_t update_guoyu_task__get_packed_size
                     (const UpdateGuoyuTask   *message);
size_t update_guoyu_task__pack
                     (const UpdateGuoyuTask   *message,
                      uint8_t             *out);
size_t update_guoyu_task__pack_to_buffer
                     (const UpdateGuoyuTask   *message,
                      ProtobufCBuffer     *buffer);
UpdateGuoyuTask *
       update_guoyu_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_guoyu_task__free_unpacked
                     (UpdateGuoyuTask *message,
                      ProtobufCAllocator *allocator);
/* Yaoshi methods */
void   yaoshi__init
                     (Yaoshi         *message);
size_t yaoshi__get_packed_size
                     (const Yaoshi   *message);
size_t yaoshi__pack
                     (const Yaoshi   *message,
                      uint8_t             *out);
size_t yaoshi__pack_to_buffer
                     (const Yaoshi   *message,
                      ProtobufCBuffer     *buffer);
Yaoshi *
       yaoshi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   yaoshi__free_unpacked
                     (Yaoshi *message,
                      ProtobufCAllocator *allocator);
/* GiveupGuoyuTask methods */
void   giveup_guoyu_task__init
                     (GiveupGuoyuTask         *message);
size_t giveup_guoyu_task__get_packed_size
                     (const GiveupGuoyuTask   *message);
size_t giveup_guoyu_task__pack
                     (const GiveupGuoyuTask   *message,
                      uint8_t             *out);
size_t giveup_guoyu_task__pack_to_buffer
                     (const GiveupGuoyuTask   *message,
                      ProtobufCBuffer     *buffer);
GiveupGuoyuTask *
       giveup_guoyu_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   giveup_guoyu_task__free_unpacked
                     (GiveupGuoyuTask *message,
                      ProtobufCAllocator *allocator);
/* ReqSetYaoshiSpecial methods */
void   req_set_yaoshi_special__init
                     (ReqSetYaoshiSpecial         *message);
size_t req_set_yaoshi_special__get_packed_size
                     (const ReqSetYaoshiSpecial   *message);
size_t req_set_yaoshi_special__pack
                     (const ReqSetYaoshiSpecial   *message,
                      uint8_t             *out);
size_t req_set_yaoshi_special__pack_to_buffer
                     (const ReqSetYaoshiSpecial   *message,
                      ProtobufCBuffer     *buffer);
ReqSetYaoshiSpecial *
       req_set_yaoshi_special__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_set_yaoshi_special__free_unpacked
                     (ReqSetYaoshiSpecial *message,
                      ProtobufCAllocator *allocator);
/* AnsYaoshiSpecial methods */
void   ans_yaoshi_special__init
                     (AnsYaoshiSpecial         *message);
size_t ans_yaoshi_special__get_packed_size
                     (const AnsYaoshiSpecial   *message);
size_t ans_yaoshi_special__pack
                     (const AnsYaoshiSpecial   *message,
                      uint8_t             *out);
size_t ans_yaoshi_special__pack_to_buffer
                     (const AnsYaoshiSpecial   *message,
                      ProtobufCBuffer     *buffer);
AnsYaoshiSpecial *
       ans_yaoshi_special__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ans_yaoshi_special__free_unpacked
                     (AnsYaoshiSpecial *message,
                      ProtobufCAllocator *allocator);
/* YaoshiLevelExp methods */
void   yaoshi_level_exp__init
                     (YaoshiLevelExp         *message);
size_t yaoshi_level_exp__get_packed_size
                     (const YaoshiLevelExp   *message);
size_t yaoshi_level_exp__pack
                     (const YaoshiLevelExp   *message,
                      uint8_t             *out);
size_t yaoshi_level_exp__pack_to_buffer
                     (const YaoshiLevelExp   *message,
                      ProtobufCBuffer     *buffer);
YaoshiLevelExp *
       yaoshi_level_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   yaoshi_level_exp__free_unpacked
                     (YaoshiLevelExp *message,
                      ProtobufCAllocator *allocator);
/* YaoshiNumber methods */
void   yaoshi_number__init
                     (YaoshiNumber         *message);
size_t yaoshi_number__get_packed_size
                     (const YaoshiNumber   *message);
size_t yaoshi_number__pack
                     (const YaoshiNumber   *message,
                      uint8_t             *out);
size_t yaoshi_number__pack_to_buffer
                     (const YaoshiNumber   *message,
                      ProtobufCBuffer     *buffer);
YaoshiNumber *
       yaoshi_number__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   yaoshi_number__free_unpacked
                     (YaoshiNumber *message,
                      ProtobufCAllocator *allocator);
/* GuoyuSucc methods */
void   guoyu_succ__init
                     (GuoyuSucc         *message);
size_t guoyu_succ__get_packed_size
                     (const GuoyuSucc   *message);
size_t guoyu_succ__pack
                     (const GuoyuSucc   *message,
                      uint8_t             *out);
size_t guoyu_succ__pack_to_buffer
                     (const GuoyuSucc   *message,
                      ProtobufCBuffer     *buffer);
GuoyuSucc *
       guoyu_succ__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guoyu_succ__free_unpacked
                     (GuoyuSucc *message,
                      ProtobufCAllocator *allocator);
/* GuoyuFbSucc methods */
void   guoyu_fb_succ__init
                     (GuoyuFbSucc         *message);
size_t guoyu_fb_succ__get_packed_size
                     (const GuoyuFbSucc   *message);
size_t guoyu_fb_succ__pack
                     (const GuoyuFbSucc   *message,
                      uint8_t             *out);
size_t guoyu_fb_succ__pack_to_buffer
                     (const GuoyuFbSucc   *message,
                      ProtobufCBuffer     *buffer);
GuoyuFbSucc *
       guoyu_fb_succ__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guoyu_fb_succ__free_unpacked
                     (GuoyuFbSucc *message,
                      ProtobufCAllocator *allocator);
/* BossId methods */
void   boss_id__init
                     (BossId         *message);
size_t boss_id__get_packed_size
                     (const BossId   *message);
size_t boss_id__pack
                     (const BossId   *message,
                      uint8_t             *out);
size_t boss_id__pack_to_buffer
                     (const BossId   *message,
                      ProtobufCBuffer     *buffer);
BossId *
       boss_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   boss_id__free_unpacked
                     (BossId *message,
                      ProtobufCAllocator *allocator);
/* GuoyuFb methods */
void   guoyu_fb__init
                     (GuoyuFb         *message);
size_t guoyu_fb__get_packed_size
                     (const GuoyuFb   *message);
size_t guoyu_fb__pack
                     (const GuoyuFb   *message,
                      uint8_t             *out);
size_t guoyu_fb__pack_to_buffer
                     (const GuoyuFb   *message,
                      ProtobufCBuffer     *buffer);
GuoyuFb *
       guoyu_fb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guoyu_fb__free_unpacked
                     (GuoyuFb *message,
                      ProtobufCAllocator *allocator);
/* ReqFindTarget methods */
void   req_find_target__init
                     (ReqFindTarget         *message);
size_t req_find_target__get_packed_size
                     (const ReqFindTarget   *message);
size_t req_find_target__pack
                     (const ReqFindTarget   *message,
                      uint8_t             *out);
size_t req_find_target__pack_to_buffer
                     (const ReqFindTarget   *message,
                      ProtobufCBuffer     *buffer);
ReqFindTarget *
       req_find_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_find_target__free_unpacked
                     (ReqFindTarget *message,
                      ProtobufCAllocator *allocator);
/* AnsFindTarget methods */
void   ans_find_target__init
                     (AnsFindTarget         *message);
size_t ans_find_target__get_packed_size
                     (const AnsFindTarget   *message);
size_t ans_find_target__pack
                     (const AnsFindTarget   *message,
                      uint8_t             *out);
size_t ans_find_target__pack_to_buffer
                     (const AnsFindTarget   *message,
                      ProtobufCBuffer     *buffer);
AnsFindTarget *
       ans_find_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ans_find_target__free_unpacked
                     (AnsFindTarget *message,
                      ProtobufCAllocator *allocator);
/* ChengjieType methods */
void   chengjie_type__init
                     (ChengjieType         *message);
size_t chengjie_type__get_packed_size
                     (const ChengjieType   *message);
size_t chengjie_type__pack
                     (const ChengjieType   *message,
                      uint8_t             *out);
size_t chengjie_type__pack_to_buffer
                     (const ChengjieType   *message,
                      ProtobufCBuffer     *buffer);
ChengjieType *
       chengjie_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_type__free_unpacked
                     (ChengjieType *message,
                      ProtobufCAllocator *allocator);
/* ReqAddChengjieTask methods */
void   req_add_chengjie_task__init
                     (ReqAddChengjieTask         *message);
size_t req_add_chengjie_task__get_packed_size
                     (const ReqAddChengjieTask   *message);
size_t req_add_chengjie_task__pack
                     (const ReqAddChengjieTask   *message,
                      uint8_t             *out);
size_t req_add_chengjie_task__pack_to_buffer
                     (const ReqAddChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
ReqAddChengjieTask *
       req_add_chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_add_chengjie_task__free_unpacked
                     (ReqAddChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* AnsAddChengjieTask methods */
void   ans_add_chengjie_task__init
                     (AnsAddChengjieTask         *message);
size_t ans_add_chengjie_task__get_packed_size
                     (const AnsAddChengjieTask   *message);
size_t ans_add_chengjie_task__pack
                     (const AnsAddChengjieTask   *message,
                      uint8_t             *out);
size_t ans_add_chengjie_task__pack_to_buffer
                     (const AnsAddChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
AnsAddChengjieTask *
       ans_add_chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ans_add_chengjie_task__free_unpacked
                     (AnsAddChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* ReqAcceptChengjieTask methods */
void   req_accept_chengjie_task__init
                     (ReqAcceptChengjieTask         *message);
size_t req_accept_chengjie_task__get_packed_size
                     (const ReqAcceptChengjieTask   *message);
size_t req_accept_chengjie_task__pack
                     (const ReqAcceptChengjieTask   *message,
                      uint8_t             *out);
size_t req_accept_chengjie_task__pack_to_buffer
                     (const ReqAcceptChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
ReqAcceptChengjieTask *
       req_accept_chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_accept_chengjie_task__free_unpacked
                     (ReqAcceptChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* AnsAcceptChengjieTask methods */
void   ans_accept_chengjie_task__init
                     (AnsAcceptChengjieTask         *message);
size_t ans_accept_chengjie_task__get_packed_size
                     (const AnsAcceptChengjieTask   *message);
size_t ans_accept_chengjie_task__pack
                     (const AnsAcceptChengjieTask   *message,
                      uint8_t             *out);
size_t ans_accept_chengjie_task__pack_to_buffer
                     (const AnsAcceptChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
AnsAcceptChengjieTask *
       ans_accept_chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ans_accept_chengjie_task__free_unpacked
                     (AnsAcceptChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* ChengjieTaskSucc methods */
void   chengjie_task_succ__init
                     (ChengjieTaskSucc         *message);
size_t chengjie_task_succ__get_packed_size
                     (const ChengjieTaskSucc   *message);
size_t chengjie_task_succ__pack
                     (const ChengjieTaskSucc   *message,
                      uint8_t             *out);
size_t chengjie_task_succ__pack_to_buffer
                     (const ChengjieTaskSucc   *message,
                      ProtobufCBuffer     *buffer);
ChengjieTaskSucc *
       chengjie_task_succ__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_task_succ__free_unpacked
                     (ChengjieTaskSucc *message,
                      ProtobufCAllocator *allocator);
/* ChengjieTask methods */
void   chengjie_task__init
                     (ChengjieTask         *message);
size_t chengjie_task__get_packed_size
                     (const ChengjieTask   *message);
size_t chengjie_task__pack
                     (const ChengjieTask   *message,
                      uint8_t             *out);
size_t chengjie_task__pack_to_buffer
                     (const ChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
ChengjieTask *
       chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_task__free_unpacked
                     (ChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* ChengjieRefreshType methods */
void   chengjie_refresh_type__init
                     (ChengjieRefreshType         *message);
size_t chengjie_refresh_type__get_packed_size
                     (const ChengjieRefreshType   *message);
size_t chengjie_refresh_type__pack
                     (const ChengjieRefreshType   *message,
                      uint8_t             *out);
size_t chengjie_refresh_type__pack_to_buffer
                     (const ChengjieRefreshType   *message,
                      ProtobufCBuffer     *buffer);
ChengjieRefreshType *
       chengjie_refresh_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_refresh_type__free_unpacked
                     (ChengjieRefreshType *message,
                      ProtobufCAllocator *allocator);
/* ChengjieList methods */
void   chengjie_list__init
                     (ChengjieList         *message);
size_t chengjie_list__get_packed_size
                     (const ChengjieList   *message);
size_t chengjie_list__pack
                     (const ChengjieList   *message,
                      uint8_t             *out);
size_t chengjie_list__pack_to_buffer
                     (const ChengjieList   *message,
                      ProtobufCBuffer     *buffer);
ChengjieList *
       chengjie_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_list__free_unpacked
                     (ChengjieList *message,
                      ProtobufCAllocator *allocator);
/* ChengjieKiller methods */
void   chengjie_killer__init
                     (ChengjieKiller         *message);
size_t chengjie_killer__get_packed_size
                     (const ChengjieKiller   *message);
size_t chengjie_killer__pack
                     (const ChengjieKiller   *message,
                      uint8_t             *out);
size_t chengjie_killer__pack_to_buffer
                     (const ChengjieKiller   *message,
                      ProtobufCBuffer     *buffer);
ChengjieKiller *
       chengjie_killer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_killer__free_unpacked
                     (ChengjieKiller *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTaskAward methods */
void   shangjin_task_award__init
                     (ShangjinTaskAward         *message);
size_t shangjin_task_award__get_packed_size
                     (const ShangjinTaskAward   *message);
size_t shangjin_task_award__pack
                     (const ShangjinTaskAward   *message,
                      uint8_t             *out);
size_t shangjin_task_award__pack_to_buffer
                     (const ShangjinTaskAward   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTaskAward *
       shangjin_task_award__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_task_award__free_unpacked
                     (ShangjinTaskAward *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTaskType methods */
void   shangjin_task_type__init
                     (ShangjinTaskType         *message);
size_t shangjin_task_type__get_packed_size
                     (const ShangjinTaskType   *message);
size_t shangjin_task_type__pack
                     (const ShangjinTaskType   *message,
                      uint8_t             *out);
size_t shangjin_task_type__pack_to_buffer
                     (const ShangjinTaskType   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTaskType *
       shangjin_task_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_task_type__free_unpacked
                     (ShangjinTaskType *message,
                      ProtobufCAllocator *allocator);
/* ShangjinType methods */
void   shangjin_type__init
                     (ShangjinType         *message);
size_t shangjin_type__get_packed_size
                     (const ShangjinType   *message);
size_t shangjin_type__pack
                     (const ShangjinType   *message,
                      uint8_t             *out);
size_t shangjin_type__pack_to_buffer
                     (const ShangjinType   *message,
                      ProtobufCBuffer     *buffer);
ShangjinType *
       shangjin_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_type__free_unpacked
                     (ShangjinType *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTaskId methods */
void   shangjin_task_id__init
                     (ShangjinTaskId         *message);
size_t shangjin_task_id__get_packed_size
                     (const ShangjinTaskId   *message);
size_t shangjin_task_id__pack
                     (const ShangjinTaskId   *message,
                      uint8_t             *out);
size_t shangjin_task_id__pack_to_buffer
                     (const ShangjinTaskId   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTaskId *
       shangjin_task_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_task_id__free_unpacked
                     (ShangjinTaskId *message,
                      ProtobufCAllocator *allocator);
/* ShangjinList methods */
void   shangjin_list__init
                     (ShangjinList         *message);
size_t shangjin_list__get_packed_size
                     (const ShangjinList   *message);
size_t shangjin_list__pack
                     (const ShangjinList   *message,
                      uint8_t             *out);
size_t shangjin_list__pack_to_buffer
                     (const ShangjinList   *message,
                      ProtobufCBuffer     *buffer);
ShangjinList *
       shangjin_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_list__free_unpacked
                     (ShangjinList *message,
                      ProtobufCAllocator *allocator);
/* AllYaoshiNum methods */
void   all_yaoshi_num__init
                     (AllYaoshiNum         *message);
size_t all_yaoshi_num__get_packed_size
                     (const AllYaoshiNum   *message);
size_t all_yaoshi_num__pack
                     (const AllYaoshiNum   *message,
                      uint8_t             *out);
size_t all_yaoshi_num__pack_to_buffer
                     (const AllYaoshiNum   *message,
                      ProtobufCBuffer     *buffer);
AllYaoshiNum *
       all_yaoshi_num__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   all_yaoshi_num__free_unpacked
                     (AllYaoshiNum *message,
                      ProtobufCAllocator *allocator);
/* ChengjieMoney methods */
void   chengjie_money__init
                     (ChengjieMoney         *message);
size_t chengjie_money__get_packed_size
                     (const ChengjieMoney   *message);
size_t chengjie_money__pack
                     (const ChengjieMoney   *message,
                      uint8_t             *out);
size_t chengjie_money__pack_to_buffer
                     (const ChengjieMoney   *message,
                      ProtobufCBuffer     *buffer);
ChengjieMoney *
       chengjie_money__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_money__free_unpacked
                     (ChengjieMoney *message,
                      ProtobufCAllocator *allocator);
/* ChengjieTaskComplete methods */
void   chengjie_task_complete__init
                     (ChengjieTaskComplete         *message);
size_t chengjie_task_complete__get_packed_size
                     (const ChengjieTaskComplete   *message);
size_t chengjie_task_complete__pack
                     (const ChengjieTaskComplete   *message,
                      uint8_t             *out);
size_t chengjie_task_complete__pack_to_buffer
                     (const ChengjieTaskComplete   *message,
                      ProtobufCBuffer     *buffer);
ChengjieTaskComplete *
       chengjie_task_complete__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_task_complete__free_unpacked
                     (ChengjieTaskComplete *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GuoyuType_Closure)
                 (const GuoyuType *message,
                  void *closure_data);
typedef void (*ReqChoseGuoyuTask_Closure)
                 (const ReqChoseGuoyuTask *message,
                  void *closure_data);
typedef void (*UpdateGuoyuTask_Closure)
                 (const UpdateGuoyuTask *message,
                  void *closure_data);
typedef void (*Yaoshi_Closure)
                 (const Yaoshi *message,
                  void *closure_data);
typedef void (*GiveupGuoyuTask_Closure)
                 (const GiveupGuoyuTask *message,
                  void *closure_data);
typedef void (*ReqSetYaoshiSpecial_Closure)
                 (const ReqSetYaoshiSpecial *message,
                  void *closure_data);
typedef void (*AnsYaoshiSpecial_Closure)
                 (const AnsYaoshiSpecial *message,
                  void *closure_data);
typedef void (*YaoshiLevelExp_Closure)
                 (const YaoshiLevelExp *message,
                  void *closure_data);
typedef void (*YaoshiNumber_Closure)
                 (const YaoshiNumber *message,
                  void *closure_data);
typedef void (*GuoyuSucc_Closure)
                 (const GuoyuSucc *message,
                  void *closure_data);
typedef void (*GuoyuFbSucc_Closure)
                 (const GuoyuFbSucc *message,
                  void *closure_data);
typedef void (*BossId_Closure)
                 (const BossId *message,
                  void *closure_data);
typedef void (*GuoyuFb_Closure)
                 (const GuoyuFb *message,
                  void *closure_data);
typedef void (*ReqFindTarget_Closure)
                 (const ReqFindTarget *message,
                  void *closure_data);
typedef void (*AnsFindTarget_Closure)
                 (const AnsFindTarget *message,
                  void *closure_data);
typedef void (*ChengjieType_Closure)
                 (const ChengjieType *message,
                  void *closure_data);
typedef void (*ReqAddChengjieTask_Closure)
                 (const ReqAddChengjieTask *message,
                  void *closure_data);
typedef void (*AnsAddChengjieTask_Closure)
                 (const AnsAddChengjieTask *message,
                  void *closure_data);
typedef void (*ReqAcceptChengjieTask_Closure)
                 (const ReqAcceptChengjieTask *message,
                  void *closure_data);
typedef void (*AnsAcceptChengjieTask_Closure)
                 (const AnsAcceptChengjieTask *message,
                  void *closure_data);
typedef void (*ChengjieTaskSucc_Closure)
                 (const ChengjieTaskSucc *message,
                  void *closure_data);
typedef void (*ChengjieTask_Closure)
                 (const ChengjieTask *message,
                  void *closure_data);
typedef void (*ChengjieRefreshType_Closure)
                 (const ChengjieRefreshType *message,
                  void *closure_data);
typedef void (*ChengjieList_Closure)
                 (const ChengjieList *message,
                  void *closure_data);
typedef void (*ChengjieKiller_Closure)
                 (const ChengjieKiller *message,
                  void *closure_data);
typedef void (*ShangjinTaskAward_Closure)
                 (const ShangjinTaskAward *message,
                  void *closure_data);
typedef void (*ShangjinTaskType_Closure)
                 (const ShangjinTaskType *message,
                  void *closure_data);
typedef void (*ShangjinType_Closure)
                 (const ShangjinType *message,
                  void *closure_data);
typedef void (*ShangjinTaskId_Closure)
                 (const ShangjinTaskId *message,
                  void *closure_data);
typedef void (*ShangjinList_Closure)
                 (const ShangjinList *message,
                  void *closure_data);
typedef void (*AllYaoshiNum_Closure)
                 (const AllYaoshiNum *message,
                  void *closure_data);
typedef void (*ChengjieMoney_Closure)
                 (const ChengjieMoney *message,
                  void *closure_data);
typedef void (*ChengjieTaskComplete_Closure)
                 (const ChengjieTaskComplete *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    major__type__descriptor;
extern const ProtobufCEnumDescriptor    guoyu__task__type__descriptor;
extern const ProtobufCMessageDescriptor guoyu_type__descriptor;
extern const ProtobufCMessageDescriptor req_chose_guoyu_task__descriptor;
extern const ProtobufCMessageDescriptor update_guoyu_task__descriptor;
extern const ProtobufCMessageDescriptor yaoshi__descriptor;
extern const ProtobufCMessageDescriptor giveup_guoyu_task__descriptor;
extern const ProtobufCMessageDescriptor req_set_yaoshi_special__descriptor;
extern const ProtobufCMessageDescriptor ans_yaoshi_special__descriptor;
extern const ProtobufCMessageDescriptor yaoshi_level_exp__descriptor;
extern const ProtobufCMessageDescriptor yaoshi_number__descriptor;
extern const ProtobufCMessageDescriptor guoyu_succ__descriptor;
extern const ProtobufCMessageDescriptor guoyu_fb_succ__descriptor;
extern const ProtobufCMessageDescriptor boss_id__descriptor;
extern const ProtobufCMessageDescriptor guoyu_fb__descriptor;
extern const ProtobufCMessageDescriptor req_find_target__descriptor;
extern const ProtobufCMessageDescriptor ans_find_target__descriptor;
extern const ProtobufCMessageDescriptor chengjie_type__descriptor;
extern const ProtobufCMessageDescriptor req_add_chengjie_task__descriptor;
extern const ProtobufCMessageDescriptor ans_add_chengjie_task__descriptor;
extern const ProtobufCMessageDescriptor req_accept_chengjie_task__descriptor;
extern const ProtobufCMessageDescriptor ans_accept_chengjie_task__descriptor;
extern const ProtobufCMessageDescriptor chengjie_task_succ__descriptor;
extern const ProtobufCMessageDescriptor chengjie_task__descriptor;
extern const ProtobufCMessageDescriptor chengjie_refresh_type__descriptor;
extern const ProtobufCMessageDescriptor chengjie_list__descriptor;
extern const ProtobufCMessageDescriptor chengjie_killer__descriptor;
extern const ProtobufCMessageDescriptor shangjin_task_award__descriptor;
extern const ProtobufCMessageDescriptor shangjin_task_type__descriptor;
extern const ProtobufCMessageDescriptor shangjin_type__descriptor;
extern const ProtobufCMessageDescriptor shangjin_task_id__descriptor;
extern const ProtobufCMessageDescriptor shangjin_list__descriptor;
extern const ProtobufCMessageDescriptor all_yaoshi_num__descriptor;
extern const ProtobufCMessageDescriptor chengjie_money__descriptor;
extern const ProtobufCMessageDescriptor chengjie_task_complete__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_hotel_2eproto__INCLUDED */
