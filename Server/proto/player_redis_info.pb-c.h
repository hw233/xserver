/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_player_5fredis_5finfo_2eproto__INCLUDED
#define PROTOBUF_C_player_5fredis_5finfo_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _CacheSubExp CacheSubExp;
typedef struct _CachePvpRaidLose CachePvpRaidLose;
typedef struct _CachePvpRaidWin CachePvpRaidWin;
typedef struct _PlayerOfflineCache PlayerOfflineCache;
typedef struct _PlayerRedisInfo PlayerRedisInfo;
typedef struct _ZhenyingRedis ZhenyingRedis;
typedef struct _AddZhenyingPlayer AddZhenyingPlayer;
typedef struct _RedisFriendGroup RedisFriendGroup;
typedef struct _RedisFriendUnit RedisFriendUnit;
typedef struct _RedisFriendPlayer RedisFriendPlayer;


/* --- enums --- */


/* --- messages --- */

struct  _CacheSubExp
{
  ProtobufCMessage base;
  uint32_t val;
  uint32_t statis_id;
};
#define CACHE_SUB_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cache_sub_exp__descriptor) \
    , 0, 0 }


struct  _CachePvpRaidLose
{
  ProtobufCMessage base;
  uint32_t time;
  uint32_t type;
  uint32_t score;
};
#define CACHE_PVP_RAID_LOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cache_pvp_raid_lose__descriptor) \
    , 0, 0, 0 }


struct  _CachePvpRaidWin
{
  ProtobufCMessage base;
  uint32_t time;
  uint32_t type;
  uint32_t score;
};
#define CACHE_PVP_RAID_WIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cache_pvp_raid_win__descriptor) \
    , 0, 0, 0 }


struct  _PlayerOfflineCache
{
  ProtobufCMessage base;
  size_t n_sub_exps;
  CacheSubExp **sub_exps;
  size_t n_pvp_lose;
  CachePvpRaidLose **pvp_lose;
  size_t n_pvp_win;
  CachePvpRaidWin **pvp_win;
};
#define PLAYER_OFFLINE_CACHE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_offline_cache__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _PlayerRedisInfo
{
  ProtobufCMessage base;
  char *name;
  uint32_t lv;
  uint32_t job;
  uint32_t head_icon;
  uint32_t scene_id;
  uint32_t status;
  uint32_t hp;
  uint32_t max_hp;
  uint32_t clothes;
  uint32_t clothes_color_up;
  uint32_t clothes_color_down;
  uint32_t hat;
  uint32_t hat_color;
  uint32_t fighting_capacity;
  uint32_t weapon;
  uint32_t zhenying;
  uint32_t guild_id;
  char *guild_name;
  size_t n_tags;
  uint32_t *tags;
  char *textintro;
  uint32_t coin;
  uint32_t gold;
  uint32_t bind_gold;
  uint32_t equip_fc;
  uint32_t bagua_fc;
  uint32_t weapon_color;
};
#define PLAYER_REDIS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_redis_info__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0,NULL, NULL, 0, 0, 0, 0, 0, 0 }


struct  _ZhenyingRedis
{
  ProtobufCMessage base;
  uint32_t power_fulongguo;
  uint32_t power_wanyaogu;
  uint32_t man_fulongguo;
  uint32_t man_wanyaogu;
  uint64_t power_man_fulongguo;
  char *power_name_fulongguo;
  char *power_guild_fulongguo;
  uint64_t power_man_wanyaogu;
  char *power_name_wanyaogu;
  char *power_guild_wanyaogu;
  uint64_t power_man_kill_fulongguo;
  uint64_t power_man_kill_wanyaogu;
};
#define ZHENYING_REDIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_redis__descriptor) \
    , 0, 0, 0, 0, 0, NULL, NULL, 0, NULL, NULL, 0, 0 }


struct  _AddZhenyingPlayer
{
  ProtobufCMessage base;
  char *name;
  uint32_t zhenying;
  uint32_t zhenying_old;
  uint32_t fighting_capacity;
  uint32_t kill;
  uint32_t ret;
  uint32_t gold;
  uint32_t free;
};
#define ADD_ZHENYING_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_zhenying_player__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0 }


struct  _RedisFriendGroup
{
  ProtobufCMessage base;
  uint32_t group_id;
  uint32_t create_time;
  char *group_name;
};
#define REDIS_FRIEND_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&redis_friend_group__descriptor) \
    , 0, 0, NULL }


struct  _RedisFriendUnit
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t closeness;
  uint32_t gift_num;
  uint32_t group_id;
};
#define REDIS_FRIEND_UNIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&redis_friend_unit__descriptor) \
    , 0, 0, 0, 0 }


struct  _RedisFriendPlayer
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t apply_switch;
  uint32_t contact_extend;
  size_t n_recents;
  uint64_t *recents;
  size_t n_contacts;
  RedisFriendUnit **contacts;
  size_t n_blocks;
  RedisFriendUnit **blocks;
  size_t n_enemies;
  uint64_t *enemies;
  size_t n_applys;
  uint64_t *applys;
  size_t n_groups;
  RedisFriendGroup **groups;
  uint32_t gift_accept;
  uint32_t reset_time;
};
#define REDIS_FRIEND_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&redis_friend_player__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


/* CacheSubExp methods */
void   cache_sub_exp__init
                     (CacheSubExp         *message);
size_t cache_sub_exp__get_packed_size
                     (const CacheSubExp   *message);
size_t cache_sub_exp__pack
                     (const CacheSubExp   *message,
                      uint8_t             *out);
size_t cache_sub_exp__pack_to_buffer
                     (const CacheSubExp   *message,
                      ProtobufCBuffer     *buffer);
CacheSubExp *
       cache_sub_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cache_sub_exp__free_unpacked
                     (CacheSubExp *message,
                      ProtobufCAllocator *allocator);
/* CachePvpRaidLose methods */
void   cache_pvp_raid_lose__init
                     (CachePvpRaidLose         *message);
size_t cache_pvp_raid_lose__get_packed_size
                     (const CachePvpRaidLose   *message);
size_t cache_pvp_raid_lose__pack
                     (const CachePvpRaidLose   *message,
                      uint8_t             *out);
size_t cache_pvp_raid_lose__pack_to_buffer
                     (const CachePvpRaidLose   *message,
                      ProtobufCBuffer     *buffer);
CachePvpRaidLose *
       cache_pvp_raid_lose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cache_pvp_raid_lose__free_unpacked
                     (CachePvpRaidLose *message,
                      ProtobufCAllocator *allocator);
/* CachePvpRaidWin methods */
void   cache_pvp_raid_win__init
                     (CachePvpRaidWin         *message);
size_t cache_pvp_raid_win__get_packed_size
                     (const CachePvpRaidWin   *message);
size_t cache_pvp_raid_win__pack
                     (const CachePvpRaidWin   *message,
                      uint8_t             *out);
size_t cache_pvp_raid_win__pack_to_buffer
                     (const CachePvpRaidWin   *message,
                      ProtobufCBuffer     *buffer);
CachePvpRaidWin *
       cache_pvp_raid_win__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cache_pvp_raid_win__free_unpacked
                     (CachePvpRaidWin *message,
                      ProtobufCAllocator *allocator);
/* PlayerOfflineCache methods */
void   player_offline_cache__init
                     (PlayerOfflineCache         *message);
size_t player_offline_cache__get_packed_size
                     (const PlayerOfflineCache   *message);
size_t player_offline_cache__pack
                     (const PlayerOfflineCache   *message,
                      uint8_t             *out);
size_t player_offline_cache__pack_to_buffer
                     (const PlayerOfflineCache   *message,
                      ProtobufCBuffer     *buffer);
PlayerOfflineCache *
       player_offline_cache__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_offline_cache__free_unpacked
                     (PlayerOfflineCache *message,
                      ProtobufCAllocator *allocator);
/* PlayerRedisInfo methods */
void   player_redis_info__init
                     (PlayerRedisInfo         *message);
size_t player_redis_info__get_packed_size
                     (const PlayerRedisInfo   *message);
size_t player_redis_info__pack
                     (const PlayerRedisInfo   *message,
                      uint8_t             *out);
size_t player_redis_info__pack_to_buffer
                     (const PlayerRedisInfo   *message,
                      ProtobufCBuffer     *buffer);
PlayerRedisInfo *
       player_redis_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_redis_info__free_unpacked
                     (PlayerRedisInfo *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingRedis methods */
void   zhenying_redis__init
                     (ZhenyingRedis         *message);
size_t zhenying_redis__get_packed_size
                     (const ZhenyingRedis   *message);
size_t zhenying_redis__pack
                     (const ZhenyingRedis   *message,
                      uint8_t             *out);
size_t zhenying_redis__pack_to_buffer
                     (const ZhenyingRedis   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingRedis *
       zhenying_redis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_redis__free_unpacked
                     (ZhenyingRedis *message,
                      ProtobufCAllocator *allocator);
/* AddZhenyingPlayer methods */
void   add_zhenying_player__init
                     (AddZhenyingPlayer         *message);
size_t add_zhenying_player__get_packed_size
                     (const AddZhenyingPlayer   *message);
size_t add_zhenying_player__pack
                     (const AddZhenyingPlayer   *message,
                      uint8_t             *out);
size_t add_zhenying_player__pack_to_buffer
                     (const AddZhenyingPlayer   *message,
                      ProtobufCBuffer     *buffer);
AddZhenyingPlayer *
       add_zhenying_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_zhenying_player__free_unpacked
                     (AddZhenyingPlayer *message,
                      ProtobufCAllocator *allocator);
/* RedisFriendGroup methods */
void   redis_friend_group__init
                     (RedisFriendGroup         *message);
size_t redis_friend_group__get_packed_size
                     (const RedisFriendGroup   *message);
size_t redis_friend_group__pack
                     (const RedisFriendGroup   *message,
                      uint8_t             *out);
size_t redis_friend_group__pack_to_buffer
                     (const RedisFriendGroup   *message,
                      ProtobufCBuffer     *buffer);
RedisFriendGroup *
       redis_friend_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   redis_friend_group__free_unpacked
                     (RedisFriendGroup *message,
                      ProtobufCAllocator *allocator);
/* RedisFriendUnit methods */
void   redis_friend_unit__init
                     (RedisFriendUnit         *message);
size_t redis_friend_unit__get_packed_size
                     (const RedisFriendUnit   *message);
size_t redis_friend_unit__pack
                     (const RedisFriendUnit   *message,
                      uint8_t             *out);
size_t redis_friend_unit__pack_to_buffer
                     (const RedisFriendUnit   *message,
                      ProtobufCBuffer     *buffer);
RedisFriendUnit *
       redis_friend_unit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   redis_friend_unit__free_unpacked
                     (RedisFriendUnit *message,
                      ProtobufCAllocator *allocator);
/* RedisFriendPlayer methods */
void   redis_friend_player__init
                     (RedisFriendPlayer         *message);
size_t redis_friend_player__get_packed_size
                     (const RedisFriendPlayer   *message);
size_t redis_friend_player__pack
                     (const RedisFriendPlayer   *message,
                      uint8_t             *out);
size_t redis_friend_player__pack_to_buffer
                     (const RedisFriendPlayer   *message,
                      ProtobufCBuffer     *buffer);
RedisFriendPlayer *
       redis_friend_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   redis_friend_player__free_unpacked
                     (RedisFriendPlayer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CacheSubExp_Closure)
                 (const CacheSubExp *message,
                  void *closure_data);
typedef void (*CachePvpRaidLose_Closure)
                 (const CachePvpRaidLose *message,
                  void *closure_data);
typedef void (*CachePvpRaidWin_Closure)
                 (const CachePvpRaidWin *message,
                  void *closure_data);
typedef void (*PlayerOfflineCache_Closure)
                 (const PlayerOfflineCache *message,
                  void *closure_data);
typedef void (*PlayerRedisInfo_Closure)
                 (const PlayerRedisInfo *message,
                  void *closure_data);
typedef void (*ZhenyingRedis_Closure)
                 (const ZhenyingRedis *message,
                  void *closure_data);
typedef void (*AddZhenyingPlayer_Closure)
                 (const AddZhenyingPlayer *message,
                  void *closure_data);
typedef void (*RedisFriendGroup_Closure)
                 (const RedisFriendGroup *message,
                  void *closure_data);
typedef void (*RedisFriendUnit_Closure)
                 (const RedisFriendUnit *message,
                  void *closure_data);
typedef void (*RedisFriendPlayer_Closure)
                 (const RedisFriendPlayer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cache_sub_exp__descriptor;
extern const ProtobufCMessageDescriptor cache_pvp_raid_lose__descriptor;
extern const ProtobufCMessageDescriptor cache_pvp_raid_win__descriptor;
extern const ProtobufCMessageDescriptor player_offline_cache__descriptor;
extern const ProtobufCMessageDescriptor player_redis_info__descriptor;
extern const ProtobufCMessageDescriptor zhenying_redis__descriptor;
extern const ProtobufCMessageDescriptor add_zhenying_player__descriptor;
extern const ProtobufCMessageDescriptor redis_friend_group__descriptor;
extern const ProtobufCMessageDescriptor redis_friend_unit__descriptor;
extern const ProtobufCMessageDescriptor redis_friend_player__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_player_5fredis_5finfo_2eproto__INCLUDED */
