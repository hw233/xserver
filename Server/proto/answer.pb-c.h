/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_answer_2eproto__INCLUDED
#define PROTOBUF_C_answer_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _ReqAnswer ReqAnswer;
typedef struct _CommonQuestion CommonQuestion;
typedef struct _AwardAnswer AwardAnswer;
typedef struct _AwardQuestion AwardQuestion;
typedef struct _FactionQuestion FactionQuestion;
typedef struct _FactionQuestionResult FactionQuestionResult;
typedef struct _OneFactionQuestionEnd OneFactionQuestionEnd;
typedef struct _FactionQuestionRest FactionQuestionRest;


/* --- enums --- */


/* --- messages --- */

struct  _ReqAnswer
{
  ProtobufCMessage base;
  uint32_t id;
  protobuf_c_boolean timeout;
};
#define REQ_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_answer__descriptor) \
    , 0, 0 }


struct  _CommonQuestion
{
  ProtobufCMessage base;
  uint32_t question;
  uint32_t contin;
  uint32_t right;
  uint32_t money;
  uint32_t exp;
  uint32_t tip;
  uint32_t help;
  protobuf_c_boolean btip;
  protobuf_c_boolean bhelp;
  uint32_t number;
  uint32_t cd;
  size_t n_answer;
  uint32_t *answer;
  size_t n_anstip;
  uint32_t *anstip;
};
#define COMMON_QUESTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common_question__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _AwardAnswer
{
  ProtobufCMessage base;
  uint32_t trun;
  uint32_t npc;
};
#define AWARD_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&award_answer__descriptor) \
    , 0, 0 }


struct  _AwardQuestion
{
  ProtobufCMessage base;
  uint32_t trun;
  uint32_t npc;
  uint32_t right;
  uint32_t contin;
  uint32_t money;
  uint32_t exp;
  uint32_t timer;
  uint32_t question;
  uint32_t number;
  uint32_t cd;
};
#define AWARD_QUESTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&award_question__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _FactionQuestion
{
  ProtobufCMessage base;
  uint32_t qid;
  uint32_t cd;
};
#define FACTION_QUESTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&faction_question__descriptor) \
    , 0, 0 }


struct  _FactionQuestionResult
{
  ProtobufCMessage base;
  protobuf_c_boolean result;
  protobuf_c_boolean add;
};
#define FACTION_QUESTION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&faction_question_result__descriptor) \
    , 0, 0 }


struct  _OneFactionQuestionEnd
{
  ProtobufCMessage base;
  size_t n_name;
  char **name;
  uint32_t qid;
};
#define ONE_FACTION_QUESTION_END__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&one_faction_question_end__descriptor) \
    , 0,NULL, 0 }


struct  _FactionQuestionRest
{
  ProtobufCMessage base;
  uint32_t num;
  uint32_t cd;
};
#define FACTION_QUESTION_REST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&faction_question_rest__descriptor) \
    , 0, 0 }


/* ReqAnswer methods */
void   req_answer__init
                     (ReqAnswer         *message);
size_t req_answer__get_packed_size
                     (const ReqAnswer   *message);
size_t req_answer__pack
                     (const ReqAnswer   *message,
                      uint8_t             *out);
size_t req_answer__pack_to_buffer
                     (const ReqAnswer   *message,
                      ProtobufCBuffer     *buffer);
ReqAnswer *
       req_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_answer__free_unpacked
                     (ReqAnswer *message,
                      ProtobufCAllocator *allocator);
/* CommonQuestion methods */
void   common_question__init
                     (CommonQuestion         *message);
size_t common_question__get_packed_size
                     (const CommonQuestion   *message);
size_t common_question__pack
                     (const CommonQuestion   *message,
                      uint8_t             *out);
size_t common_question__pack_to_buffer
                     (const CommonQuestion   *message,
                      ProtobufCBuffer     *buffer);
CommonQuestion *
       common_question__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common_question__free_unpacked
                     (CommonQuestion *message,
                      ProtobufCAllocator *allocator);
/* AwardAnswer methods */
void   award_answer__init
                     (AwardAnswer         *message);
size_t award_answer__get_packed_size
                     (const AwardAnswer   *message);
size_t award_answer__pack
                     (const AwardAnswer   *message,
                      uint8_t             *out);
size_t award_answer__pack_to_buffer
                     (const AwardAnswer   *message,
                      ProtobufCBuffer     *buffer);
AwardAnswer *
       award_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   award_answer__free_unpacked
                     (AwardAnswer *message,
                      ProtobufCAllocator *allocator);
/* AwardQuestion methods */
void   award_question__init
                     (AwardQuestion         *message);
size_t award_question__get_packed_size
                     (const AwardQuestion   *message);
size_t award_question__pack
                     (const AwardQuestion   *message,
                      uint8_t             *out);
size_t award_question__pack_to_buffer
                     (const AwardQuestion   *message,
                      ProtobufCBuffer     *buffer);
AwardQuestion *
       award_question__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   award_question__free_unpacked
                     (AwardQuestion *message,
                      ProtobufCAllocator *allocator);
/* FactionQuestion methods */
void   faction_question__init
                     (FactionQuestion         *message);
size_t faction_question__get_packed_size
                     (const FactionQuestion   *message);
size_t faction_question__pack
                     (const FactionQuestion   *message,
                      uint8_t             *out);
size_t faction_question__pack_to_buffer
                     (const FactionQuestion   *message,
                      ProtobufCBuffer     *buffer);
FactionQuestion *
       faction_question__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   faction_question__free_unpacked
                     (FactionQuestion *message,
                      ProtobufCAllocator *allocator);
/* FactionQuestionResult methods */
void   faction_question_result__init
                     (FactionQuestionResult         *message);
size_t faction_question_result__get_packed_size
                     (const FactionQuestionResult   *message);
size_t faction_question_result__pack
                     (const FactionQuestionResult   *message,
                      uint8_t             *out);
size_t faction_question_result__pack_to_buffer
                     (const FactionQuestionResult   *message,
                      ProtobufCBuffer     *buffer);
FactionQuestionResult *
       faction_question_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   faction_question_result__free_unpacked
                     (FactionQuestionResult *message,
                      ProtobufCAllocator *allocator);
/* OneFactionQuestionEnd methods */
void   one_faction_question_end__init
                     (OneFactionQuestionEnd         *message);
size_t one_faction_question_end__get_packed_size
                     (const OneFactionQuestionEnd   *message);
size_t one_faction_question_end__pack
                     (const OneFactionQuestionEnd   *message,
                      uint8_t             *out);
size_t one_faction_question_end__pack_to_buffer
                     (const OneFactionQuestionEnd   *message,
                      ProtobufCBuffer     *buffer);
OneFactionQuestionEnd *
       one_faction_question_end__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   one_faction_question_end__free_unpacked
                     (OneFactionQuestionEnd *message,
                      ProtobufCAllocator *allocator);
/* FactionQuestionRest methods */
void   faction_question_rest__init
                     (FactionQuestionRest         *message);
size_t faction_question_rest__get_packed_size
                     (const FactionQuestionRest   *message);
size_t faction_question_rest__pack
                     (const FactionQuestionRest   *message,
                      uint8_t             *out);
size_t faction_question_rest__pack_to_buffer
                     (const FactionQuestionRest   *message,
                      ProtobufCBuffer     *buffer);
FactionQuestionRest *
       faction_question_rest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   faction_question_rest__free_unpacked
                     (FactionQuestionRest *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ReqAnswer_Closure)
                 (const ReqAnswer *message,
                  void *closure_data);
typedef void (*CommonQuestion_Closure)
                 (const CommonQuestion *message,
                  void *closure_data);
typedef void (*AwardAnswer_Closure)
                 (const AwardAnswer *message,
                  void *closure_data);
typedef void (*AwardQuestion_Closure)
                 (const AwardQuestion *message,
                  void *closure_data);
typedef void (*FactionQuestion_Closure)
                 (const FactionQuestion *message,
                  void *closure_data);
typedef void (*FactionQuestionResult_Closure)
                 (const FactionQuestionResult *message,
                  void *closure_data);
typedef void (*OneFactionQuestionEnd_Closure)
                 (const OneFactionQuestionEnd *message,
                  void *closure_data);
typedef void (*FactionQuestionRest_Closure)
                 (const FactionQuestionRest *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor req_answer__descriptor;
extern const ProtobufCMessageDescriptor common_question__descriptor;
extern const ProtobufCMessageDescriptor award_answer__descriptor;
extern const ProtobufCMessageDescriptor award_question__descriptor;
extern const ProtobufCMessageDescriptor faction_question__descriptor;
extern const ProtobufCMessageDescriptor faction_question_result__descriptor;
extern const ProtobufCMessageDescriptor one_faction_question_end__descriptor;
extern const ProtobufCMessageDescriptor faction_question_rest__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_answer_2eproto__INCLUDED */
