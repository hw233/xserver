/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_player_5fdb_2eproto__INCLUDED
#define PROTOBUF_C_player_5fdb_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _DBAttr DBAttr;
typedef struct _DBItemBagua DBItemBagua;
typedef struct _DBBagGrid DBBagGrid;
typedef struct _DBHeadIcon DBHeadIcon;
typedef struct _DBTaskCount DBTaskCount;
typedef struct _DBTask DBTask;
typedef struct _ItemBuff ItemBuff;
typedef struct _DBEquipEnchant DBEquipEnchant;
typedef struct _DBEquip DBEquip;
typedef struct _SkillDbData SkillDbData;
typedef struct _FashionDbData FashionDbData;
typedef struct _DBGoods DBGoods;
typedef struct _DbHorseData DbHorseData;
typedef struct _DbHorseCommonAttr DbHorseCommonAttr;
typedef struct _DBYuqidaoMai DBYuqidaoMai;
typedef struct _DBYuqidaoBreak DBYuqidaoBreak;
typedef struct _DBBaguapaiCard DBBaguapaiCard;
typedef struct _DBBaguapaiDress DBBaguapaiDress;
typedef struct _GuoyuTypeDb GuoyuTypeDb;
typedef struct _ChengjieTypeDb ChengjieTypeDb;
typedef struct _ShangjinTaskAwardDb ShangjinTaskAwardDb;
typedef struct _ShangjinTaskTypeDb ShangjinTaskTypeDb;
typedef struct _ShangjinTypeDb ShangjinTypeDb;
typedef struct _YaoshiDb YaoshiDb;
typedef struct _PvpRaidDb PvpRaidDb;
typedef struct _DBDailyActivity DBDailyActivity;
typedef struct _DBChivalryActivity DBChivalryActivity;
typedef struct _DBAwardQuestion DBAwardQuestion;
typedef struct _DBCommonQuestion DBCommonQuestion;
typedef struct _DBPersonality DBPersonality;
typedef struct _DBLiveSkill DBLiveSkill;
typedef struct _DBPartnerSkill DBPartnerSkill;
typedef struct _DBPartnerAttr DBPartnerAttr;
typedef struct _DBPartner DBPartner;
typedef struct _DBTruck DBTruck;
typedef struct _PlayerDBInfo PlayerDBInfo;
typedef struct _DBAutoAddHp DBAutoAddHp;
typedef struct _ChengjieTaskDb ChengjieTaskDb;
typedef struct _LoadChengjieTask LoadChengjieTask;


/* --- enums --- */


/* --- messages --- */

struct  _DBAttr
{
  ProtobufCMessage base;
  uint32_t id;
  double val;
};
#define DBATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbattr__descriptor) \
    , 0, 0 }


struct  _DBItemBagua
{
  ProtobufCMessage base;
  uint32_t star;
  double main_attr_val;
  size_t n_minor_attrs;
  DBAttr **minor_attrs;
};
#define DBITEM_BAGUA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbitem_bagua__descriptor) \
    , 0, 0, 0,NULL }


struct  _DBBagGrid
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t num;
  uint32_t used_count;
  uint32_t expire_time;
  DBItemBagua *bagua;
};
#define DBBAG_GRID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbbag_grid__descriptor) \
    , 0, 0, 0, 0, NULL }


struct  _DBHeadIcon
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t status;
};
#define DBHEAD_ICON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbhead_icon__descriptor) \
    , 0, 0 }


struct  _DBTaskCount
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t num;
};
#define DBTASK_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbtask_count__descriptor) \
    , 0, 0 }


struct  _DBTask
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t status;
  uint32_t accept_ts;
  uint32_t accu_time;
  size_t n_progress;
  DBTaskCount **progress;
};
#define DBTASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbtask__descriptor) \
    , 0, 0, 0, 0, 0,NULL }


struct  _ItemBuff
{
  ProtobufCMessage base;
  uint32_t id;
  uint64_t end_time;
  uint64_t buff_state;
};
#define ITEM_BUFF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&item_buff__descriptor) \
    , 0, 0, 0 }


struct  _DBEquipEnchant
{
  ProtobufCMessage base;
  DBAttr *cur_attr;
  size_t n_rand_attr;
  DBAttr **rand_attr;
};
#define DBEQUIP_ENCHANT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbequip_enchant__descriptor) \
    , NULL, 0,NULL }


struct  _DBEquip
{
  ProtobufCMessage base;
  uint32_t stair;
  uint32_t star_lv;
  uint32_t star_exp;
  size_t n_enchant;
  DBEquipEnchant **enchant;
  size_t n_inlay;
  int32_t *inlay;
};
#define DBEQUIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbequip__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL }


struct  _SkillDbData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t lv;
  size_t n_fuwen;
  uint32_t *fuwen;
  uint32_t cur_fuwen;
};
#define SKILL_DB_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&skill_db_data__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _FashionDbData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t color;
  uint32_t cd;
  protobuf_c_boolean isnew;
};
#define FASHION_DB_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fashion_db_data__descriptor) \
    , 0, 0, 0, 0 }


struct  _DBGoods
{
  ProtobufCMessage base;
  uint32_t goods_id;
  uint32_t bought_num;
};
#define DBGOODS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbgoods__descriptor) \
    , 0, 0 }


struct  _DbHorseData
{
  ProtobufCMessage base;
  uint32_t id;
  uint64_t cd;
  protobuf_c_boolean isnew;
};
#define DB_HORSE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_horse_data__descriptor) \
    , 0, 0, 0 }


struct  _DbHorseCommonAttr
{
  ProtobufCMessage base;
  uint32_t step;
  size_t n_attr;
  uint32_t *attr;
  size_t n_attr_level;
  uint32_t *attr_level;
  uint32_t soul_level;
  uint32_t cur_soul;
  uint32_t power;
  size_t n_soul_num;
  uint32_t *soul_num;
  protobuf_c_boolean soul_full;
  int32_t fly;
};
#define DB_HORSE_COMMON_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&db_horse_common_attr__descriptor) \
    , 0, 0,NULL, 0,NULL, 0, 0, 0, 0,NULL, 0, 0 }


struct  _DBYuqidaoMai
{
  ProtobufCMessage base;
  uint32_t mai_id;
  uint32_t acupoint_id;
  uint32_t fill_lv;
};
#define DBYUQIDAO_MAI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbyuqidao_mai__descriptor) \
    , 0, 0, 0 }


struct  _DBYuqidaoBreak
{
  ProtobufCMessage base;
  uint32_t id;
  size_t n_cur_val;
  uint32_t *cur_val;
  size_t n_new_val;
  uint32_t *new_val;
  size_t n_new_addn;
  uint32_t *new_addn;
  uint32_t count;
};
#define DBYUQIDAO_BREAK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbyuqidao_break__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  _DBBaguapaiCard
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t star;
  double main_attr_val;
  double main_attr_val_new;
  size_t n_minor_attrs;
  DBAttr **minor_attrs;
  size_t n_minor_attrs_new;
  DBAttr **minor_attrs_new;
};
#define DBBAGUAPAI_CARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbbaguapai_card__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  _DBBaguapaiDress
{
  ProtobufCMessage base;
  size_t n_cards;
  DBBaguapaiCard **cards;
};
#define DBBAGUAPAI_DRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbbaguapai_dress__descriptor) \
    , 0,NULL }


struct  _GuoyuTypeDb
{
  ProtobufCMessage base;
  int32_t guoyu_level;
  int32_t cur_exp;
  int32_t cur_task;
  int32_t task_cd;
  int32_t critical_num;
  int32_t guoyu_num;
  int32_t map;
  int32_t type;
  uint32_t rand_map;
  protobuf_c_boolean has_critical_cd;
  uint64_t critical_cd;
  protobuf_c_boolean has_critical_cd_refresh;
  uint64_t critical_cd_refresh;
};
#define GUOYU_TYPE_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&guoyu_type_db__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0,0 }


struct  _ChengjieTypeDb
{
  ProtobufCMessage base;
  int32_t level;
  int32_t cur_exp;
  int32_t num;
  uint64_t target;
  uint32_t task;
  protobuf_c_boolean first_hit;
};
#define CHENGJIE_TYPE_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_type_db__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _ShangjinTaskAwardDb
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t num;
};
#define SHANGJIN_TASK_AWARD_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_task_award_db__descriptor) \
    , 0, 0 }


struct  _ShangjinTaskTypeDb
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t quality;
  size_t n_award;
  ShangjinTaskAwardDb **award;
  uint32_t reduce;
};
#define SHANGJIN_TASK_TYPE_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_task_type_db__descriptor) \
    , 0, 0, 0,NULL, 0 }


struct  _ShangjinTypeDb
{
  ProtobufCMessage base;
  int32_t level;
  uint32_t cur_exp;
  uint32_t num;
  uint32_t cur_task;
  size_t n_task;
  ShangjinTaskTypeDb **task;
  protobuf_c_boolean accept;
  uint32_t free_refresh;
};
#define SHANGJIN_TYPE_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&shangjin_type_db__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0 }


struct  _YaoshiDb
{
  ProtobufCMessage base;
  int32_t cur_major;
  GuoyuTypeDb *guoyu;
  ChengjieTypeDb *chengjie;
  ShangjinTypeDb *shangjin;
  uint32_t change_num;
};
#define YAOSHI_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&yaoshi_db__descriptor) \
    , 0, NULL, NULL, NULL, 0 }


struct  _PvpRaidDb
{
  ProtobufCMessage base;
  uint32_t oneday_win_num;
  uint32_t cur_level_id;
  uint32_t max_level_id;
  uint32_t max_score;
  uint32_t score;
  uint32_t avaliable_reward_level;
  size_t n_avaliable_box;
  uint32_t *avaliable_box;
};
#define PVP_RAID_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_db__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _DBDailyActivity
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t count;
};
#define DBDAILY_ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbdaily_activity__descriptor) \
    , 0, 0 }


struct  _DBChivalryActivity
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t val;
};
#define DBCHIVALRY_ACTIVITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbchivalry_activity__descriptor) \
    , 0, 0 }


struct  _DBAwardQuestion
{
  ProtobufCMessage base;
  uint32_t trun;
  uint64_t next_open;
  uint32_t right;
  uint32_t contin;
  uint32_t money;
  uint32_t exp;
  uint32_t timer;
  uint32_t question;
  uint32_t number;
};
#define DBAWARD_QUESTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbaward_question__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _DBCommonQuestion
{
  ProtobufCMessage base;
  uint32_t question;
  uint32_t contin;
  uint32_t right;
  uint32_t money;
  uint32_t exp;
  uint32_t tip;
  uint32_t help;
  protobuf_c_boolean btip;
  protobuf_c_boolean bhelp;
  uint32_t number;
  uint32_t cd;
  size_t n_answer;
  uint32_t *answer;
  size_t n_anstip;
  uint32_t *anstip;
  uint64_t next_open;
};
#define DBCOMMON_QUESTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbcommon_question__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _DBPersonality
{
  ProtobufCMessage base;
  uint32_t sex;
  uint32_t birthday;
  char *location;
  size_t n_tags;
  uint32_t *tags;
  char *text_intro;
  char *voice_intro;
};
#define DBPERSONALITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbpersonality__descriptor) \
    , 0, 0, NULL, 0,NULL, NULL, NULL }


struct  _DBLiveSkill
{
  ProtobufCMessage base;
  size_t n_level;
  uint32_t *level;
  size_t n_exp;
  uint32_t *exp;
  size_t n_broken;
  uint32_t *broken;
  size_t n_book;
  uint32_t *book;
};
#define DBLIVE_SKILL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dblive_skill__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _DBPartnerSkill
{
  ProtobufCMessage base;
  uint32_t skill_id;
  uint32_t lv;
};
#define DBPARTNER_SKILL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbpartner_skill__descriptor) \
    , 0, 0 }


struct  _DBPartnerAttr
{
  ProtobufCMessage base;
  size_t n_skills;
  DBPartnerSkill **skills;
  size_t n_base_attr_id;
  uint32_t *base_attr_id;
  size_t n_base_attr_cur;
  uint32_t *base_attr_cur;
  size_t n_base_attr_up;
  uint32_t *base_attr_up;
  size_t n_detail_attr_id;
  uint32_t *detail_attr_id;
  size_t n_detail_attr_cur;
  uint32_t *detail_attr_cur;
  uint32_t type;
  uint32_t power_refresh;
};
#define DBPARTNER_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbpartner_attr__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  _DBPartner
{
  ProtobufCMessage base;
  uint64_t uuid;
  uint32_t partner_id;
  size_t n_attrs;
  DBAttr **attrs;
  uint32_t bind;
  DBPartnerAttr *attr_cur;
  DBPartnerAttr *attr_flash;
  uint32_t relive_time;
};
#define DBPARTNER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbpartner__descriptor) \
    , 0, 0, 0,NULL, 0, NULL, NULL, 0 }


struct  _DBTruck
{
  ProtobufCMessage base;
  uint64_t truck_id;
  uint32_t active_id;
  uint32_t num_coin;
  uint32_t num_gold;
  float pos_x;
  float pos_z;
  uint32_t hp;
  uint32_t scene_id;
};
#define DBTRUCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbtruck__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _PlayerDBInfo
{
  ProtobufCMessage base;
  uint64_t exp;
  uint32_t scene_id;
  float pos_x;
  float pos_z;
  float pos_y;
  size_t n_bag;
  DBBagGrid **bag;
  uint32_t bag_grid_num;
  uint32_t bag_unlock_num;
  uint32_t gold;
  uint32_t bind_gold;
  uint32_t coin;
  uint32_t head_icon;
  size_t n_head_icon_list;
  DBHeadIcon **head_icon_list;
  size_t n_attr_id;
  uint32_t *attr_id;
  size_t n_attr;
  uint32_t *attr;
  size_t n_task_list;
  DBTask **task_list;
  size_t n_task_finish;
  uint32_t *task_finish;
  uint32_t next_time_refresh_oneday_job;
  size_t n_item_buffs;
  ItemBuff **item_buffs;
  uint32_t cur_hp;
  uint64_t teamid;
  size_t n_raid_reward_id;
  uint32_t *raid_reward_id;
  size_t n_raid_reward_num;
  uint32_t *raid_reward_num;
  size_t n_equip_list;
  DBEquip **equip_list;
  size_t n_skill;
  SkillDbData **skill;
  size_t n_fashion;
  FashionDbData **fashion;
  size_t n_color;
  uint32_t *color;
  size_t n_color_isnew;
  int32_t *color_isnew;
  size_t n_shop_goods;
  DBGoods **shop_goods;
  size_t n_horse_data;
  DbHorseData **horse_data;
  DbHorseCommonAttr *horse_attr;
  size_t n_yuqidao_mais;
  DBYuqidaoMai **yuqidao_mais;
  size_t n_yuqidao_breaks;
  DBYuqidaoBreak **yuqidao_breaks;
  uint32_t pk_type;
  uint32_t murder_num;
  size_t n_baguapai_dress;
  DBBaguapaiDress **baguapai_dress;
  uint32_t baguapai_style;
  YaoshiDb *yaoshi;
  uint32_t qiecuo_invite_switch;
  uint32_t team_invite_switch;
  uint32_t out_stuck_time;
  PvpRaidDb *pvp_3;
  PvpRaidDb *pvp_5;
  size_t n_active_reward;
  uint32_t *active_reward;
  size_t n_daily_activity;
  DBDailyActivity **daily_activity;
  size_t n_chivalry_activity;
  DBChivalryActivity **chivalry_activity;
  DBAwardQuestion *award_question;
  DBCommonQuestion *common_question;
  uint32_t last_scene_id;
  DBAutoAddHp *auto_add_hp;
  DBPersonality *personality;
  DBLiveSkill *live_skill;
  uint32_t leaveraid_sceneid;
  double exitpointx;
  double exitpointy;
  double exitpointz;
  double facey;
  uint32_t noviceraid;
  size_t n_partner_list;
  DBPartner **partner_list;
  size_t n_partner_dictionary;
  uint32_t *partner_dictionary;
  size_t n_partner_formation;
  uint64_t *partner_formation;
  size_t n_partner_battle;
  uint64_t *partner_battle;
  uint32_t partner_recruit_junior_time;
  uint32_t partner_recruit_junior_count;
  uint32_t partner_recruit_senior_time;
  uint32_t partner_recruit_senior_count;
  uint64_t receivegift;
  float angle;
  DBTruck *truck;
  uint32_t charm_level;
  uint32_t charm_total;
  size_t n_weapon_color;
  uint32_t *weapon_color;
  size_t n_weapon_color_isnew;
  int32_t *weapon_color_isnew;
  uint32_t task_chapter_reward;
};
#define PLAYER_DBINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&player_dbinfo__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0,NULL, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL, 0, 0, 0,NULL, 0, NULL, 0, 0, 0, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0,NULL, 0,NULL, 0 }


struct  _DBAutoAddHp
{
  ProtobufCMessage base;
  uint32_t open_auto_add_hp;
  uint32_t auto_add_hp_item_id;
  uint32_t auto_add_hp_percent;
  uint32_t hp_pool_num;
};
#define DBAUTO_ADD_HP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbauto_add_hp__descriptor) \
    , 0, 0, 0, 0 }


struct  _ChengjieTaskDb
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint64_t investor;
  uint32_t fail;
  uint32_t shuangjin;
  uint32_t exp;
  uint32_t courage;
  uint32_t taskid;
  uint64_t cd;
  uint64_t complete_cd;
  protobuf_c_boolean complete;
  uint64_t accept_cd;
  uint64_t accepter;
  protobuf_c_boolean anonymous;
  char *declaration;
  uint32_t step;
};
#define CHENGJIE_TASK_DB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chengjie_task_db__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0 }


struct  _LoadChengjieTask
{
  ProtobufCMessage base;
  size_t n_data;
  ChengjieTaskDb **data;
};
#define LOAD_CHENGJIE_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&load_chengjie_task__descriptor) \
    , 0,NULL }


/* DBAttr methods */
void   dbattr__init
                     (DBAttr         *message);
size_t dbattr__get_packed_size
                     (const DBAttr   *message);
size_t dbattr__pack
                     (const DBAttr   *message,
                      uint8_t             *out);
size_t dbattr__pack_to_buffer
                     (const DBAttr   *message,
                      ProtobufCBuffer     *buffer);
DBAttr *
       dbattr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbattr__free_unpacked
                     (DBAttr *message,
                      ProtobufCAllocator *allocator);
/* DBItemBagua methods */
void   dbitem_bagua__init
                     (DBItemBagua         *message);
size_t dbitem_bagua__get_packed_size
                     (const DBItemBagua   *message);
size_t dbitem_bagua__pack
                     (const DBItemBagua   *message,
                      uint8_t             *out);
size_t dbitem_bagua__pack_to_buffer
                     (const DBItemBagua   *message,
                      ProtobufCBuffer     *buffer);
DBItemBagua *
       dbitem_bagua__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbitem_bagua__free_unpacked
                     (DBItemBagua *message,
                      ProtobufCAllocator *allocator);
/* DBBagGrid methods */
void   dbbag_grid__init
                     (DBBagGrid         *message);
size_t dbbag_grid__get_packed_size
                     (const DBBagGrid   *message);
size_t dbbag_grid__pack
                     (const DBBagGrid   *message,
                      uint8_t             *out);
size_t dbbag_grid__pack_to_buffer
                     (const DBBagGrid   *message,
                      ProtobufCBuffer     *buffer);
DBBagGrid *
       dbbag_grid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbbag_grid__free_unpacked
                     (DBBagGrid *message,
                      ProtobufCAllocator *allocator);
/* DBHeadIcon methods */
void   dbhead_icon__init
                     (DBHeadIcon         *message);
size_t dbhead_icon__get_packed_size
                     (const DBHeadIcon   *message);
size_t dbhead_icon__pack
                     (const DBHeadIcon   *message,
                      uint8_t             *out);
size_t dbhead_icon__pack_to_buffer
                     (const DBHeadIcon   *message,
                      ProtobufCBuffer     *buffer);
DBHeadIcon *
       dbhead_icon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbhead_icon__free_unpacked
                     (DBHeadIcon *message,
                      ProtobufCAllocator *allocator);
/* DBTaskCount methods */
void   dbtask_count__init
                     (DBTaskCount         *message);
size_t dbtask_count__get_packed_size
                     (const DBTaskCount   *message);
size_t dbtask_count__pack
                     (const DBTaskCount   *message,
                      uint8_t             *out);
size_t dbtask_count__pack_to_buffer
                     (const DBTaskCount   *message,
                      ProtobufCBuffer     *buffer);
DBTaskCount *
       dbtask_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbtask_count__free_unpacked
                     (DBTaskCount *message,
                      ProtobufCAllocator *allocator);
/* DBTask methods */
void   dbtask__init
                     (DBTask         *message);
size_t dbtask__get_packed_size
                     (const DBTask   *message);
size_t dbtask__pack
                     (const DBTask   *message,
                      uint8_t             *out);
size_t dbtask__pack_to_buffer
                     (const DBTask   *message,
                      ProtobufCBuffer     *buffer);
DBTask *
       dbtask__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbtask__free_unpacked
                     (DBTask *message,
                      ProtobufCAllocator *allocator);
/* ItemBuff methods */
void   item_buff__init
                     (ItemBuff         *message);
size_t item_buff__get_packed_size
                     (const ItemBuff   *message);
size_t item_buff__pack
                     (const ItemBuff   *message,
                      uint8_t             *out);
size_t item_buff__pack_to_buffer
                     (const ItemBuff   *message,
                      ProtobufCBuffer     *buffer);
ItemBuff *
       item_buff__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   item_buff__free_unpacked
                     (ItemBuff *message,
                      ProtobufCAllocator *allocator);
/* DBEquipEnchant methods */
void   dbequip_enchant__init
                     (DBEquipEnchant         *message);
size_t dbequip_enchant__get_packed_size
                     (const DBEquipEnchant   *message);
size_t dbequip_enchant__pack
                     (const DBEquipEnchant   *message,
                      uint8_t             *out);
size_t dbequip_enchant__pack_to_buffer
                     (const DBEquipEnchant   *message,
                      ProtobufCBuffer     *buffer);
DBEquipEnchant *
       dbequip_enchant__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbequip_enchant__free_unpacked
                     (DBEquipEnchant *message,
                      ProtobufCAllocator *allocator);
/* DBEquip methods */
void   dbequip__init
                     (DBEquip         *message);
size_t dbequip__get_packed_size
                     (const DBEquip   *message);
size_t dbequip__pack
                     (const DBEquip   *message,
                      uint8_t             *out);
size_t dbequip__pack_to_buffer
                     (const DBEquip   *message,
                      ProtobufCBuffer     *buffer);
DBEquip *
       dbequip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbequip__free_unpacked
                     (DBEquip *message,
                      ProtobufCAllocator *allocator);
/* SkillDbData methods */
void   skill_db_data__init
                     (SkillDbData         *message);
size_t skill_db_data__get_packed_size
                     (const SkillDbData   *message);
size_t skill_db_data__pack
                     (const SkillDbData   *message,
                      uint8_t             *out);
size_t skill_db_data__pack_to_buffer
                     (const SkillDbData   *message,
                      ProtobufCBuffer     *buffer);
SkillDbData *
       skill_db_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   skill_db_data__free_unpacked
                     (SkillDbData *message,
                      ProtobufCAllocator *allocator);
/* FashionDbData methods */
void   fashion_db_data__init
                     (FashionDbData         *message);
size_t fashion_db_data__get_packed_size
                     (const FashionDbData   *message);
size_t fashion_db_data__pack
                     (const FashionDbData   *message,
                      uint8_t             *out);
size_t fashion_db_data__pack_to_buffer
                     (const FashionDbData   *message,
                      ProtobufCBuffer     *buffer);
FashionDbData *
       fashion_db_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fashion_db_data__free_unpacked
                     (FashionDbData *message,
                      ProtobufCAllocator *allocator);
/* DBGoods methods */
void   dbgoods__init
                     (DBGoods         *message);
size_t dbgoods__get_packed_size
                     (const DBGoods   *message);
size_t dbgoods__pack
                     (const DBGoods   *message,
                      uint8_t             *out);
size_t dbgoods__pack_to_buffer
                     (const DBGoods   *message,
                      ProtobufCBuffer     *buffer);
DBGoods *
       dbgoods__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbgoods__free_unpacked
                     (DBGoods *message,
                      ProtobufCAllocator *allocator);
/* DbHorseData methods */
void   db_horse_data__init
                     (DbHorseData         *message);
size_t db_horse_data__get_packed_size
                     (const DbHorseData   *message);
size_t db_horse_data__pack
                     (const DbHorseData   *message,
                      uint8_t             *out);
size_t db_horse_data__pack_to_buffer
                     (const DbHorseData   *message,
                      ProtobufCBuffer     *buffer);
DbHorseData *
       db_horse_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_horse_data__free_unpacked
                     (DbHorseData *message,
                      ProtobufCAllocator *allocator);
/* DbHorseCommonAttr methods */
void   db_horse_common_attr__init
                     (DbHorseCommonAttr         *message);
size_t db_horse_common_attr__get_packed_size
                     (const DbHorseCommonAttr   *message);
size_t db_horse_common_attr__pack
                     (const DbHorseCommonAttr   *message,
                      uint8_t             *out);
size_t db_horse_common_attr__pack_to_buffer
                     (const DbHorseCommonAttr   *message,
                      ProtobufCBuffer     *buffer);
DbHorseCommonAttr *
       db_horse_common_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   db_horse_common_attr__free_unpacked
                     (DbHorseCommonAttr *message,
                      ProtobufCAllocator *allocator);
/* DBYuqidaoMai methods */
void   dbyuqidao_mai__init
                     (DBYuqidaoMai         *message);
size_t dbyuqidao_mai__get_packed_size
                     (const DBYuqidaoMai   *message);
size_t dbyuqidao_mai__pack
                     (const DBYuqidaoMai   *message,
                      uint8_t             *out);
size_t dbyuqidao_mai__pack_to_buffer
                     (const DBYuqidaoMai   *message,
                      ProtobufCBuffer     *buffer);
DBYuqidaoMai *
       dbyuqidao_mai__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbyuqidao_mai__free_unpacked
                     (DBYuqidaoMai *message,
                      ProtobufCAllocator *allocator);
/* DBYuqidaoBreak methods */
void   dbyuqidao_break__init
                     (DBYuqidaoBreak         *message);
size_t dbyuqidao_break__get_packed_size
                     (const DBYuqidaoBreak   *message);
size_t dbyuqidao_break__pack
                     (const DBYuqidaoBreak   *message,
                      uint8_t             *out);
size_t dbyuqidao_break__pack_to_buffer
                     (const DBYuqidaoBreak   *message,
                      ProtobufCBuffer     *buffer);
DBYuqidaoBreak *
       dbyuqidao_break__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbyuqidao_break__free_unpacked
                     (DBYuqidaoBreak *message,
                      ProtobufCAllocator *allocator);
/* DBBaguapaiCard methods */
void   dbbaguapai_card__init
                     (DBBaguapaiCard         *message);
size_t dbbaguapai_card__get_packed_size
                     (const DBBaguapaiCard   *message);
size_t dbbaguapai_card__pack
                     (const DBBaguapaiCard   *message,
                      uint8_t             *out);
size_t dbbaguapai_card__pack_to_buffer
                     (const DBBaguapaiCard   *message,
                      ProtobufCBuffer     *buffer);
DBBaguapaiCard *
       dbbaguapai_card__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbbaguapai_card__free_unpacked
                     (DBBaguapaiCard *message,
                      ProtobufCAllocator *allocator);
/* DBBaguapaiDress methods */
void   dbbaguapai_dress__init
                     (DBBaguapaiDress         *message);
size_t dbbaguapai_dress__get_packed_size
                     (const DBBaguapaiDress   *message);
size_t dbbaguapai_dress__pack
                     (const DBBaguapaiDress   *message,
                      uint8_t             *out);
size_t dbbaguapai_dress__pack_to_buffer
                     (const DBBaguapaiDress   *message,
                      ProtobufCBuffer     *buffer);
DBBaguapaiDress *
       dbbaguapai_dress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbbaguapai_dress__free_unpacked
                     (DBBaguapaiDress *message,
                      ProtobufCAllocator *allocator);
/* GuoyuTypeDb methods */
void   guoyu_type_db__init
                     (GuoyuTypeDb         *message);
size_t guoyu_type_db__get_packed_size
                     (const GuoyuTypeDb   *message);
size_t guoyu_type_db__pack
                     (const GuoyuTypeDb   *message,
                      uint8_t             *out);
size_t guoyu_type_db__pack_to_buffer
                     (const GuoyuTypeDb   *message,
                      ProtobufCBuffer     *buffer);
GuoyuTypeDb *
       guoyu_type_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   guoyu_type_db__free_unpacked
                     (GuoyuTypeDb *message,
                      ProtobufCAllocator *allocator);
/* ChengjieTypeDb methods */
void   chengjie_type_db__init
                     (ChengjieTypeDb         *message);
size_t chengjie_type_db__get_packed_size
                     (const ChengjieTypeDb   *message);
size_t chengjie_type_db__pack
                     (const ChengjieTypeDb   *message,
                      uint8_t             *out);
size_t chengjie_type_db__pack_to_buffer
                     (const ChengjieTypeDb   *message,
                      ProtobufCBuffer     *buffer);
ChengjieTypeDb *
       chengjie_type_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_type_db__free_unpacked
                     (ChengjieTypeDb *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTaskAwardDb methods */
void   shangjin_task_award_db__init
                     (ShangjinTaskAwardDb         *message);
size_t shangjin_task_award_db__get_packed_size
                     (const ShangjinTaskAwardDb   *message);
size_t shangjin_task_award_db__pack
                     (const ShangjinTaskAwardDb   *message,
                      uint8_t             *out);
size_t shangjin_task_award_db__pack_to_buffer
                     (const ShangjinTaskAwardDb   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTaskAwardDb *
       shangjin_task_award_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_task_award_db__free_unpacked
                     (ShangjinTaskAwardDb *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTaskTypeDb methods */
void   shangjin_task_type_db__init
                     (ShangjinTaskTypeDb         *message);
size_t shangjin_task_type_db__get_packed_size
                     (const ShangjinTaskTypeDb   *message);
size_t shangjin_task_type_db__pack
                     (const ShangjinTaskTypeDb   *message,
                      uint8_t             *out);
size_t shangjin_task_type_db__pack_to_buffer
                     (const ShangjinTaskTypeDb   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTaskTypeDb *
       shangjin_task_type_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_task_type_db__free_unpacked
                     (ShangjinTaskTypeDb *message,
                      ProtobufCAllocator *allocator);
/* ShangjinTypeDb methods */
void   shangjin_type_db__init
                     (ShangjinTypeDb         *message);
size_t shangjin_type_db__get_packed_size
                     (const ShangjinTypeDb   *message);
size_t shangjin_type_db__pack
                     (const ShangjinTypeDb   *message,
                      uint8_t             *out);
size_t shangjin_type_db__pack_to_buffer
                     (const ShangjinTypeDb   *message,
                      ProtobufCBuffer     *buffer);
ShangjinTypeDb *
       shangjin_type_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   shangjin_type_db__free_unpacked
                     (ShangjinTypeDb *message,
                      ProtobufCAllocator *allocator);
/* YaoshiDb methods */
void   yaoshi_db__init
                     (YaoshiDb         *message);
size_t yaoshi_db__get_packed_size
                     (const YaoshiDb   *message);
size_t yaoshi_db__pack
                     (const YaoshiDb   *message,
                      uint8_t             *out);
size_t yaoshi_db__pack_to_buffer
                     (const YaoshiDb   *message,
                      ProtobufCBuffer     *buffer);
YaoshiDb *
       yaoshi_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   yaoshi_db__free_unpacked
                     (YaoshiDb *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidDb methods */
void   pvp_raid_db__init
                     (PvpRaidDb         *message);
size_t pvp_raid_db__get_packed_size
                     (const PvpRaidDb   *message);
size_t pvp_raid_db__pack
                     (const PvpRaidDb   *message,
                      uint8_t             *out);
size_t pvp_raid_db__pack_to_buffer
                     (const PvpRaidDb   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidDb *
       pvp_raid_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_db__free_unpacked
                     (PvpRaidDb *message,
                      ProtobufCAllocator *allocator);
/* DBDailyActivity methods */
void   dbdaily_activity__init
                     (DBDailyActivity         *message);
size_t dbdaily_activity__get_packed_size
                     (const DBDailyActivity   *message);
size_t dbdaily_activity__pack
                     (const DBDailyActivity   *message,
                      uint8_t             *out);
size_t dbdaily_activity__pack_to_buffer
                     (const DBDailyActivity   *message,
                      ProtobufCBuffer     *buffer);
DBDailyActivity *
       dbdaily_activity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbdaily_activity__free_unpacked
                     (DBDailyActivity *message,
                      ProtobufCAllocator *allocator);
/* DBChivalryActivity methods */
void   dbchivalry_activity__init
                     (DBChivalryActivity         *message);
size_t dbchivalry_activity__get_packed_size
                     (const DBChivalryActivity   *message);
size_t dbchivalry_activity__pack
                     (const DBChivalryActivity   *message,
                      uint8_t             *out);
size_t dbchivalry_activity__pack_to_buffer
                     (const DBChivalryActivity   *message,
                      ProtobufCBuffer     *buffer);
DBChivalryActivity *
       dbchivalry_activity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbchivalry_activity__free_unpacked
                     (DBChivalryActivity *message,
                      ProtobufCAllocator *allocator);
/* DBAwardQuestion methods */
void   dbaward_question__init
                     (DBAwardQuestion         *message);
size_t dbaward_question__get_packed_size
                     (const DBAwardQuestion   *message);
size_t dbaward_question__pack
                     (const DBAwardQuestion   *message,
                      uint8_t             *out);
size_t dbaward_question__pack_to_buffer
                     (const DBAwardQuestion   *message,
                      ProtobufCBuffer     *buffer);
DBAwardQuestion *
       dbaward_question__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbaward_question__free_unpacked
                     (DBAwardQuestion *message,
                      ProtobufCAllocator *allocator);
/* DBCommonQuestion methods */
void   dbcommon_question__init
                     (DBCommonQuestion         *message);
size_t dbcommon_question__get_packed_size
                     (const DBCommonQuestion   *message);
size_t dbcommon_question__pack
                     (const DBCommonQuestion   *message,
                      uint8_t             *out);
size_t dbcommon_question__pack_to_buffer
                     (const DBCommonQuestion   *message,
                      ProtobufCBuffer     *buffer);
DBCommonQuestion *
       dbcommon_question__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbcommon_question__free_unpacked
                     (DBCommonQuestion *message,
                      ProtobufCAllocator *allocator);
/* DBPersonality methods */
void   dbpersonality__init
                     (DBPersonality         *message);
size_t dbpersonality__get_packed_size
                     (const DBPersonality   *message);
size_t dbpersonality__pack
                     (const DBPersonality   *message,
                      uint8_t             *out);
size_t dbpersonality__pack_to_buffer
                     (const DBPersonality   *message,
                      ProtobufCBuffer     *buffer);
DBPersonality *
       dbpersonality__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbpersonality__free_unpacked
                     (DBPersonality *message,
                      ProtobufCAllocator *allocator);
/* DBLiveSkill methods */
void   dblive_skill__init
                     (DBLiveSkill         *message);
size_t dblive_skill__get_packed_size
                     (const DBLiveSkill   *message);
size_t dblive_skill__pack
                     (const DBLiveSkill   *message,
                      uint8_t             *out);
size_t dblive_skill__pack_to_buffer
                     (const DBLiveSkill   *message,
                      ProtobufCBuffer     *buffer);
DBLiveSkill *
       dblive_skill__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dblive_skill__free_unpacked
                     (DBLiveSkill *message,
                      ProtobufCAllocator *allocator);
/* DBPartnerSkill methods */
void   dbpartner_skill__init
                     (DBPartnerSkill         *message);
size_t dbpartner_skill__get_packed_size
                     (const DBPartnerSkill   *message);
size_t dbpartner_skill__pack
                     (const DBPartnerSkill   *message,
                      uint8_t             *out);
size_t dbpartner_skill__pack_to_buffer
                     (const DBPartnerSkill   *message,
                      ProtobufCBuffer     *buffer);
DBPartnerSkill *
       dbpartner_skill__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbpartner_skill__free_unpacked
                     (DBPartnerSkill *message,
                      ProtobufCAllocator *allocator);
/* DBPartnerAttr methods */
void   dbpartner_attr__init
                     (DBPartnerAttr         *message);
size_t dbpartner_attr__get_packed_size
                     (const DBPartnerAttr   *message);
size_t dbpartner_attr__pack
                     (const DBPartnerAttr   *message,
                      uint8_t             *out);
size_t dbpartner_attr__pack_to_buffer
                     (const DBPartnerAttr   *message,
                      ProtobufCBuffer     *buffer);
DBPartnerAttr *
       dbpartner_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbpartner_attr__free_unpacked
                     (DBPartnerAttr *message,
                      ProtobufCAllocator *allocator);
/* DBPartner methods */
void   dbpartner__init
                     (DBPartner         *message);
size_t dbpartner__get_packed_size
                     (const DBPartner   *message);
size_t dbpartner__pack
                     (const DBPartner   *message,
                      uint8_t             *out);
size_t dbpartner__pack_to_buffer
                     (const DBPartner   *message,
                      ProtobufCBuffer     *buffer);
DBPartner *
       dbpartner__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbpartner__free_unpacked
                     (DBPartner *message,
                      ProtobufCAllocator *allocator);
/* DBTruck methods */
void   dbtruck__init
                     (DBTruck         *message);
size_t dbtruck__get_packed_size
                     (const DBTruck   *message);
size_t dbtruck__pack
                     (const DBTruck   *message,
                      uint8_t             *out);
size_t dbtruck__pack_to_buffer
                     (const DBTruck   *message,
                      ProtobufCBuffer     *buffer);
DBTruck *
       dbtruck__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbtruck__free_unpacked
                     (DBTruck *message,
                      ProtobufCAllocator *allocator);
/* PlayerDBInfo methods */
void   player_dbinfo__init
                     (PlayerDBInfo         *message);
size_t player_dbinfo__get_packed_size
                     (const PlayerDBInfo   *message);
size_t player_dbinfo__pack
                     (const PlayerDBInfo   *message,
                      uint8_t             *out);
size_t player_dbinfo__pack_to_buffer
                     (const PlayerDBInfo   *message,
                      ProtobufCBuffer     *buffer);
PlayerDBInfo *
       player_dbinfo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   player_dbinfo__free_unpacked
                     (PlayerDBInfo *message,
                      ProtobufCAllocator *allocator);
/* DBAutoAddHp methods */
void   dbauto_add_hp__init
                     (DBAutoAddHp         *message);
size_t dbauto_add_hp__get_packed_size
                     (const DBAutoAddHp   *message);
size_t dbauto_add_hp__pack
                     (const DBAutoAddHp   *message,
                      uint8_t             *out);
size_t dbauto_add_hp__pack_to_buffer
                     (const DBAutoAddHp   *message,
                      ProtobufCBuffer     *buffer);
DBAutoAddHp *
       dbauto_add_hp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbauto_add_hp__free_unpacked
                     (DBAutoAddHp *message,
                      ProtobufCAllocator *allocator);
/* ChengjieTaskDb methods */
void   chengjie_task_db__init
                     (ChengjieTaskDb         *message);
size_t chengjie_task_db__get_packed_size
                     (const ChengjieTaskDb   *message);
size_t chengjie_task_db__pack
                     (const ChengjieTaskDb   *message,
                      uint8_t             *out);
size_t chengjie_task_db__pack_to_buffer
                     (const ChengjieTaskDb   *message,
                      ProtobufCBuffer     *buffer);
ChengjieTaskDb *
       chengjie_task_db__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chengjie_task_db__free_unpacked
                     (ChengjieTaskDb *message,
                      ProtobufCAllocator *allocator);
/* LoadChengjieTask methods */
void   load_chengjie_task__init
                     (LoadChengjieTask         *message);
size_t load_chengjie_task__get_packed_size
                     (const LoadChengjieTask   *message);
size_t load_chengjie_task__pack
                     (const LoadChengjieTask   *message,
                      uint8_t             *out);
size_t load_chengjie_task__pack_to_buffer
                     (const LoadChengjieTask   *message,
                      ProtobufCBuffer     *buffer);
LoadChengjieTask *
       load_chengjie_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   load_chengjie_task__free_unpacked
                     (LoadChengjieTask *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DBAttr_Closure)
                 (const DBAttr *message,
                  void *closure_data);
typedef void (*DBItemBagua_Closure)
                 (const DBItemBagua *message,
                  void *closure_data);
typedef void (*DBBagGrid_Closure)
                 (const DBBagGrid *message,
                  void *closure_data);
typedef void (*DBHeadIcon_Closure)
                 (const DBHeadIcon *message,
                  void *closure_data);
typedef void (*DBTaskCount_Closure)
                 (const DBTaskCount *message,
                  void *closure_data);
typedef void (*DBTask_Closure)
                 (const DBTask *message,
                  void *closure_data);
typedef void (*ItemBuff_Closure)
                 (const ItemBuff *message,
                  void *closure_data);
typedef void (*DBEquipEnchant_Closure)
                 (const DBEquipEnchant *message,
                  void *closure_data);
typedef void (*DBEquip_Closure)
                 (const DBEquip *message,
                  void *closure_data);
typedef void (*SkillDbData_Closure)
                 (const SkillDbData *message,
                  void *closure_data);
typedef void (*FashionDbData_Closure)
                 (const FashionDbData *message,
                  void *closure_data);
typedef void (*DBGoods_Closure)
                 (const DBGoods *message,
                  void *closure_data);
typedef void (*DbHorseData_Closure)
                 (const DbHorseData *message,
                  void *closure_data);
typedef void (*DbHorseCommonAttr_Closure)
                 (const DbHorseCommonAttr *message,
                  void *closure_data);
typedef void (*DBYuqidaoMai_Closure)
                 (const DBYuqidaoMai *message,
                  void *closure_data);
typedef void (*DBYuqidaoBreak_Closure)
                 (const DBYuqidaoBreak *message,
                  void *closure_data);
typedef void (*DBBaguapaiCard_Closure)
                 (const DBBaguapaiCard *message,
                  void *closure_data);
typedef void (*DBBaguapaiDress_Closure)
                 (const DBBaguapaiDress *message,
                  void *closure_data);
typedef void (*GuoyuTypeDb_Closure)
                 (const GuoyuTypeDb *message,
                  void *closure_data);
typedef void (*ChengjieTypeDb_Closure)
                 (const ChengjieTypeDb *message,
                  void *closure_data);
typedef void (*ShangjinTaskAwardDb_Closure)
                 (const ShangjinTaskAwardDb *message,
                  void *closure_data);
typedef void (*ShangjinTaskTypeDb_Closure)
                 (const ShangjinTaskTypeDb *message,
                  void *closure_data);
typedef void (*ShangjinTypeDb_Closure)
                 (const ShangjinTypeDb *message,
                  void *closure_data);
typedef void (*YaoshiDb_Closure)
                 (const YaoshiDb *message,
                  void *closure_data);
typedef void (*PvpRaidDb_Closure)
                 (const PvpRaidDb *message,
                  void *closure_data);
typedef void (*DBDailyActivity_Closure)
                 (const DBDailyActivity *message,
                  void *closure_data);
typedef void (*DBChivalryActivity_Closure)
                 (const DBChivalryActivity *message,
                  void *closure_data);
typedef void (*DBAwardQuestion_Closure)
                 (const DBAwardQuestion *message,
                  void *closure_data);
typedef void (*DBCommonQuestion_Closure)
                 (const DBCommonQuestion *message,
                  void *closure_data);
typedef void (*DBPersonality_Closure)
                 (const DBPersonality *message,
                  void *closure_data);
typedef void (*DBLiveSkill_Closure)
                 (const DBLiveSkill *message,
                  void *closure_data);
typedef void (*DBPartnerSkill_Closure)
                 (const DBPartnerSkill *message,
                  void *closure_data);
typedef void (*DBPartnerAttr_Closure)
                 (const DBPartnerAttr *message,
                  void *closure_data);
typedef void (*DBPartner_Closure)
                 (const DBPartner *message,
                  void *closure_data);
typedef void (*DBTruck_Closure)
                 (const DBTruck *message,
                  void *closure_data);
typedef void (*PlayerDBInfo_Closure)
                 (const PlayerDBInfo *message,
                  void *closure_data);
typedef void (*DBAutoAddHp_Closure)
                 (const DBAutoAddHp *message,
                  void *closure_data);
typedef void (*ChengjieTaskDb_Closure)
                 (const ChengjieTaskDb *message,
                  void *closure_data);
typedef void (*LoadChengjieTask_Closure)
                 (const LoadChengjieTask *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dbattr__descriptor;
extern const ProtobufCMessageDescriptor dbitem_bagua__descriptor;
extern const ProtobufCMessageDescriptor dbbag_grid__descriptor;
extern const ProtobufCMessageDescriptor dbhead_icon__descriptor;
extern const ProtobufCMessageDescriptor dbtask_count__descriptor;
extern const ProtobufCMessageDescriptor dbtask__descriptor;
extern const ProtobufCMessageDescriptor item_buff__descriptor;
extern const ProtobufCMessageDescriptor dbequip_enchant__descriptor;
extern const ProtobufCMessageDescriptor dbequip__descriptor;
extern const ProtobufCMessageDescriptor skill_db_data__descriptor;
extern const ProtobufCMessageDescriptor fashion_db_data__descriptor;
extern const ProtobufCMessageDescriptor dbgoods__descriptor;
extern const ProtobufCMessageDescriptor db_horse_data__descriptor;
extern const ProtobufCMessageDescriptor db_horse_common_attr__descriptor;
extern const ProtobufCMessageDescriptor dbyuqidao_mai__descriptor;
extern const ProtobufCMessageDescriptor dbyuqidao_break__descriptor;
extern const ProtobufCMessageDescriptor dbbaguapai_card__descriptor;
extern const ProtobufCMessageDescriptor dbbaguapai_dress__descriptor;
extern const ProtobufCMessageDescriptor guoyu_type_db__descriptor;
extern const ProtobufCMessageDescriptor chengjie_type_db__descriptor;
extern const ProtobufCMessageDescriptor shangjin_task_award_db__descriptor;
extern const ProtobufCMessageDescriptor shangjin_task_type_db__descriptor;
extern const ProtobufCMessageDescriptor shangjin_type_db__descriptor;
extern const ProtobufCMessageDescriptor yaoshi_db__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_db__descriptor;
extern const ProtobufCMessageDescriptor dbdaily_activity__descriptor;
extern const ProtobufCMessageDescriptor dbchivalry_activity__descriptor;
extern const ProtobufCMessageDescriptor dbaward_question__descriptor;
extern const ProtobufCMessageDescriptor dbcommon_question__descriptor;
extern const ProtobufCMessageDescriptor dbpersonality__descriptor;
extern const ProtobufCMessageDescriptor dblive_skill__descriptor;
extern const ProtobufCMessageDescriptor dbpartner_skill__descriptor;
extern const ProtobufCMessageDescriptor dbpartner_attr__descriptor;
extern const ProtobufCMessageDescriptor dbpartner__descriptor;
extern const ProtobufCMessageDescriptor dbtruck__descriptor;
extern const ProtobufCMessageDescriptor player_dbinfo__descriptor;
extern const ProtobufCMessageDescriptor dbauto_add_hp__descriptor;
extern const ProtobufCMessageDescriptor chengjie_task_db__descriptor;
extern const ProtobufCMessageDescriptor load_chengjie_task__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_player_5fdb_2eproto__INCLUDED */
