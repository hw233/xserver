/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_partner_2eproto__INCLUDED
#define PROTOBUF_C_partner_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "comm_message.pb-c.h"

typedef struct _PartnerSkillData PartnerSkillData;
typedef struct _PartnerAttr PartnerAttr;
typedef struct _PartnerData PartnerData;
typedef struct _PartnerInfoAnswer PartnerInfoAnswer;
typedef struct _PartnerTurnSwitchRequest PartnerTurnSwitchRequest;
typedef struct _PartnerFormationRequest PartnerFormationRequest;
typedef struct _PartnerFormationAnswer PartnerFormationAnswer;
typedef struct _PartnerLearnSkillRequest PartnerLearnSkillRequest;
typedef struct _PartnerLearnSkillAnswer PartnerLearnSkillAnswer;
typedef struct _PartnerUseExpItemRequest PartnerUseExpItemRequest;
typedef struct _PartnerAddBaseAttr PartnerAddBaseAttr;
typedef struct _PartnerDismissRequest PartnerDismissRequest;
typedef struct _PartnerUuid PartnerUuid;
typedef struct _ResResetAttr ResResetAttr;
typedef struct _StrongPartner StrongPartner;
typedef struct _ResStrongPartner ResStrongPartner;
typedef struct _PartnerDismissAnswer PartnerDismissAnswer;
typedef struct _PartnerDictionaryAddNotify PartnerDictionaryAddNotify;
typedef struct _PartnerExchangeRequest PartnerExchangeRequest;
typedef struct _PartnerExchangeAnswer PartnerExchangeAnswer;
typedef struct _PartnerRecruitRequest PartnerRecruitRequest;
typedef struct _PartnerRecruitResultData PartnerRecruitResultData;
typedef struct _PartnerRecruitAnswer PartnerRecruitAnswer;


/* --- enums --- */


/* --- messages --- */

struct  _PartnerSkillData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t lv;
};
#define PARTNER_SKILL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_skill_data__descriptor) \
    , 0, 0 }


struct  _PartnerAttr
{
  ProtobufCMessage base;
  size_t n_skills;
  PartnerSkillData **skills;
  size_t n_base_attr_id;
  uint32_t *base_attr_id;
  size_t n_base_attr_cur;
  uint32_t *base_attr_cur;
  size_t n_base_attr_up;
  uint32_t *base_attr_up;
  size_t n_detail_attr_id;
  uint32_t *detail_attr_id;
  size_t n_detail_attr_cur;
  uint32_t *detail_attr_cur;
  uint32_t type;
};
#define PARTNER_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_attr__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  _PartnerData
{
  ProtobufCMessage base;
  uint64_t uuid;
  uint32_t partnerid;
  size_t n_attrs;
  AttrData **attrs;
  PartnerAttr *cur_attr;
  PartnerAttr *flash_attr;
  size_t n_god_id;
  uint32_t *god_id;
  size_t n_god_level;
  uint32_t *god_level;
  uint64_t power;
};
#define PARTNER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_data__descriptor) \
    , 0, 0, 0,NULL, NULL, NULL, 0,NULL, 0,NULL, 0 }


struct  _PartnerInfoAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_partners;
  PartnerData **partners;
  size_t n_formation;
  uint64_t *formation;
  size_t n_dictionary;
  uint32_t *dictionary;
  uint32_t recruitjuniortime;
  uint32_t recruitjuniorcount;
  uint32_t recruitseniortime;
  uint32_t recruitseniorcount;
};
#define PARTNER_INFO_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_info_answer__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0 }


struct  _PartnerTurnSwitchRequest
{
  ProtobufCMessage base;
  uint32_t type;
};
#define PARTNER_TURN_SWITCH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_turn_switch_request__descriptor) \
    , 0 }


struct  _PartnerFormationRequest
{
  ProtobufCMessage base;
  uint64_t uuid;
  uint32_t position;
};
#define PARTNER_FORMATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_formation_request__descriptor) \
    , 0, 0 }


struct  _PartnerFormationAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_uuids;
  uint64_t *uuids;
};
#define PARTNER_FORMATION_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_formation_answer__descriptor) \
    , 0, 0,NULL }


struct  _PartnerLearnSkillRequest
{
  ProtobufCMessage base;
  uint64_t uuid;
  uint32_t index;
  uint32_t bookid;
};
#define PARTNER_LEARN_SKILL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_learn_skill_request__descriptor) \
    , 0, 0, 0 }


struct  _PartnerLearnSkillAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t uuid;
  uint32_t index;
  PartnerSkillData *skill;
};
#define PARTNER_LEARN_SKILL_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_learn_skill_answer__descriptor) \
    , 0, 0, 0, NULL }


struct  _PartnerUseExpItemRequest
{
  ProtobufCMessage base;
  uint64_t uuid;
  uint32_t itemid;
};
#define PARTNER_USE_EXP_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_use_exp_item_request__descriptor) \
    , 0, 0 }


struct  _PartnerAddBaseAttr
{
  ProtobufCMessage base;
  uint64_t uuid;
  size_t n_attr;
  uint32_t *attr;
  uint32_t power;
};
#define PARTNER_ADD_BASE_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_add_base_attr__descriptor) \
    , 0, 0,NULL, 0 }


struct  _PartnerDismissRequest
{
  ProtobufCMessage base;
  size_t n_uuids;
  uint64_t *uuids;
};
#define PARTNER_DISMISS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_dismiss_request__descriptor) \
    , 0,NULL }


struct  _PartnerUuid
{
  ProtobufCMessage base;
  uint64_t uuids;
};
#define PARTNER_UUID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_uuid__descriptor) \
    , 0 }


struct  _ResResetAttr
{
  ProtobufCMessage base;
  uint32_t ret;
  PartnerAttr *flash_attr;
  uint64_t power;
};
#define RES_RESET_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_reset_attr__descriptor) \
    , 0, NULL, 0 }


struct  _StrongPartner
{
  ProtobufCMessage base;
  uint64_t uuids;
  uint32_t attr_id;
  uint32_t count;
};
#define STRONG_PARTNER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&strong_partner__descriptor) \
    , 0, 0, 0 }


struct  _ResStrongPartner
{
  ProtobufCMessage base;
  uint64_t uuids;
  uint32_t attr_id;
  uint32_t attr_cur;
  uint32_t ret;
};
#define RES_STRONG_PARTNER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_strong_partner__descriptor) \
    , 0, 0, 0, 0 }


struct  _PartnerDismissAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_uuids;
  uint64_t *uuids;
};
#define PARTNER_DISMISS_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_dismiss_answer__descriptor) \
    , 0, 0,NULL }


struct  _PartnerDictionaryAddNotify
{
  ProtobufCMessage base;
  uint32_t partnerid;
};
#define PARTNER_DICTIONARY_ADD_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_dictionary_add_notify__descriptor) \
    , 0 }


struct  _PartnerExchangeRequest
{
  ProtobufCMessage base;
  uint32_t partnerid;
};
#define PARTNER_EXCHANGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_exchange_request__descriptor) \
    , 0 }


struct  _PartnerExchangeAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t uuid;
};
#define PARTNER_EXCHANGE_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_exchange_answer__descriptor) \
    , 0, 0 }


struct  _PartnerRecruitRequest
{
  ProtobufCMessage base;
  uint32_t type;
};
#define PARTNER_RECRUIT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_recruit_request__descriptor) \
    , 0 }


struct  _PartnerRecruitResultData
{
  ProtobufCMessage base;
  uint32_t type;
  ItemData *item;
  protobuf_c_boolean has_uuid;
  uint64_t uuid;
};
#define PARTNER_RECRUIT_RESULT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_recruit_result_data__descriptor) \
    , 0, NULL, 0,0 }


struct  _PartnerRecruitAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_recruits;
  PartnerRecruitResultData **recruits;
  uint32_t recruitjuniortime;
  uint32_t recruitjuniorcount;
  uint32_t recruitseniortime;
  uint32_t recruitseniorcount;
};
#define PARTNER_RECRUIT_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&partner_recruit_answer__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0 }


/* PartnerSkillData methods */
void   partner_skill_data__init
                     (PartnerSkillData         *message);
size_t partner_skill_data__get_packed_size
                     (const PartnerSkillData   *message);
size_t partner_skill_data__pack
                     (const PartnerSkillData   *message,
                      uint8_t             *out);
size_t partner_skill_data__pack_to_buffer
                     (const PartnerSkillData   *message,
                      ProtobufCBuffer     *buffer);
PartnerSkillData *
       partner_skill_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_skill_data__free_unpacked
                     (PartnerSkillData *message,
                      ProtobufCAllocator *allocator);
/* PartnerAttr methods */
void   partner_attr__init
                     (PartnerAttr         *message);
size_t partner_attr__get_packed_size
                     (const PartnerAttr   *message);
size_t partner_attr__pack
                     (const PartnerAttr   *message,
                      uint8_t             *out);
size_t partner_attr__pack_to_buffer
                     (const PartnerAttr   *message,
                      ProtobufCBuffer     *buffer);
PartnerAttr *
       partner_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_attr__free_unpacked
                     (PartnerAttr *message,
                      ProtobufCAllocator *allocator);
/* PartnerData methods */
void   partner_data__init
                     (PartnerData         *message);
size_t partner_data__get_packed_size
                     (const PartnerData   *message);
size_t partner_data__pack
                     (const PartnerData   *message,
                      uint8_t             *out);
size_t partner_data__pack_to_buffer
                     (const PartnerData   *message,
                      ProtobufCBuffer     *buffer);
PartnerData *
       partner_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_data__free_unpacked
                     (PartnerData *message,
                      ProtobufCAllocator *allocator);
/* PartnerInfoAnswer methods */
void   partner_info_answer__init
                     (PartnerInfoAnswer         *message);
size_t partner_info_answer__get_packed_size
                     (const PartnerInfoAnswer   *message);
size_t partner_info_answer__pack
                     (const PartnerInfoAnswer   *message,
                      uint8_t             *out);
size_t partner_info_answer__pack_to_buffer
                     (const PartnerInfoAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerInfoAnswer *
       partner_info_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_info_answer__free_unpacked
                     (PartnerInfoAnswer *message,
                      ProtobufCAllocator *allocator);
/* PartnerTurnSwitchRequest methods */
void   partner_turn_switch_request__init
                     (PartnerTurnSwitchRequest         *message);
size_t partner_turn_switch_request__get_packed_size
                     (const PartnerTurnSwitchRequest   *message);
size_t partner_turn_switch_request__pack
                     (const PartnerTurnSwitchRequest   *message,
                      uint8_t             *out);
size_t partner_turn_switch_request__pack_to_buffer
                     (const PartnerTurnSwitchRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerTurnSwitchRequest *
       partner_turn_switch_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_turn_switch_request__free_unpacked
                     (PartnerTurnSwitchRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerFormationRequest methods */
void   partner_formation_request__init
                     (PartnerFormationRequest         *message);
size_t partner_formation_request__get_packed_size
                     (const PartnerFormationRequest   *message);
size_t partner_formation_request__pack
                     (const PartnerFormationRequest   *message,
                      uint8_t             *out);
size_t partner_formation_request__pack_to_buffer
                     (const PartnerFormationRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerFormationRequest *
       partner_formation_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_formation_request__free_unpacked
                     (PartnerFormationRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerFormationAnswer methods */
void   partner_formation_answer__init
                     (PartnerFormationAnswer         *message);
size_t partner_formation_answer__get_packed_size
                     (const PartnerFormationAnswer   *message);
size_t partner_formation_answer__pack
                     (const PartnerFormationAnswer   *message,
                      uint8_t             *out);
size_t partner_formation_answer__pack_to_buffer
                     (const PartnerFormationAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerFormationAnswer *
       partner_formation_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_formation_answer__free_unpacked
                     (PartnerFormationAnswer *message,
                      ProtobufCAllocator *allocator);
/* PartnerLearnSkillRequest methods */
void   partner_learn_skill_request__init
                     (PartnerLearnSkillRequest         *message);
size_t partner_learn_skill_request__get_packed_size
                     (const PartnerLearnSkillRequest   *message);
size_t partner_learn_skill_request__pack
                     (const PartnerLearnSkillRequest   *message,
                      uint8_t             *out);
size_t partner_learn_skill_request__pack_to_buffer
                     (const PartnerLearnSkillRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerLearnSkillRequest *
       partner_learn_skill_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_learn_skill_request__free_unpacked
                     (PartnerLearnSkillRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerLearnSkillAnswer methods */
void   partner_learn_skill_answer__init
                     (PartnerLearnSkillAnswer         *message);
size_t partner_learn_skill_answer__get_packed_size
                     (const PartnerLearnSkillAnswer   *message);
size_t partner_learn_skill_answer__pack
                     (const PartnerLearnSkillAnswer   *message,
                      uint8_t             *out);
size_t partner_learn_skill_answer__pack_to_buffer
                     (const PartnerLearnSkillAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerLearnSkillAnswer *
       partner_learn_skill_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_learn_skill_answer__free_unpacked
                     (PartnerLearnSkillAnswer *message,
                      ProtobufCAllocator *allocator);
/* PartnerUseExpItemRequest methods */
void   partner_use_exp_item_request__init
                     (PartnerUseExpItemRequest         *message);
size_t partner_use_exp_item_request__get_packed_size
                     (const PartnerUseExpItemRequest   *message);
size_t partner_use_exp_item_request__pack
                     (const PartnerUseExpItemRequest   *message,
                      uint8_t             *out);
size_t partner_use_exp_item_request__pack_to_buffer
                     (const PartnerUseExpItemRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerUseExpItemRequest *
       partner_use_exp_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_use_exp_item_request__free_unpacked
                     (PartnerUseExpItemRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerAddBaseAttr methods */
void   partner_add_base_attr__init
                     (PartnerAddBaseAttr         *message);
size_t partner_add_base_attr__get_packed_size
                     (const PartnerAddBaseAttr   *message);
size_t partner_add_base_attr__pack
                     (const PartnerAddBaseAttr   *message,
                      uint8_t             *out);
size_t partner_add_base_attr__pack_to_buffer
                     (const PartnerAddBaseAttr   *message,
                      ProtobufCBuffer     *buffer);
PartnerAddBaseAttr *
       partner_add_base_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_add_base_attr__free_unpacked
                     (PartnerAddBaseAttr *message,
                      ProtobufCAllocator *allocator);
/* PartnerDismissRequest methods */
void   partner_dismiss_request__init
                     (PartnerDismissRequest         *message);
size_t partner_dismiss_request__get_packed_size
                     (const PartnerDismissRequest   *message);
size_t partner_dismiss_request__pack
                     (const PartnerDismissRequest   *message,
                      uint8_t             *out);
size_t partner_dismiss_request__pack_to_buffer
                     (const PartnerDismissRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerDismissRequest *
       partner_dismiss_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_dismiss_request__free_unpacked
                     (PartnerDismissRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerUuid methods */
void   partner_uuid__init
                     (PartnerUuid         *message);
size_t partner_uuid__get_packed_size
                     (const PartnerUuid   *message);
size_t partner_uuid__pack
                     (const PartnerUuid   *message,
                      uint8_t             *out);
size_t partner_uuid__pack_to_buffer
                     (const PartnerUuid   *message,
                      ProtobufCBuffer     *buffer);
PartnerUuid *
       partner_uuid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_uuid__free_unpacked
                     (PartnerUuid *message,
                      ProtobufCAllocator *allocator);
/* ResResetAttr methods */
void   res_reset_attr__init
                     (ResResetAttr         *message);
size_t res_reset_attr__get_packed_size
                     (const ResResetAttr   *message);
size_t res_reset_attr__pack
                     (const ResResetAttr   *message,
                      uint8_t             *out);
size_t res_reset_attr__pack_to_buffer
                     (const ResResetAttr   *message,
                      ProtobufCBuffer     *buffer);
ResResetAttr *
       res_reset_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_reset_attr__free_unpacked
                     (ResResetAttr *message,
                      ProtobufCAllocator *allocator);
/* StrongPartner methods */
void   strong_partner__init
                     (StrongPartner         *message);
size_t strong_partner__get_packed_size
                     (const StrongPartner   *message);
size_t strong_partner__pack
                     (const StrongPartner   *message,
                      uint8_t             *out);
size_t strong_partner__pack_to_buffer
                     (const StrongPartner   *message,
                      ProtobufCBuffer     *buffer);
StrongPartner *
       strong_partner__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   strong_partner__free_unpacked
                     (StrongPartner *message,
                      ProtobufCAllocator *allocator);
/* ResStrongPartner methods */
void   res_strong_partner__init
                     (ResStrongPartner         *message);
size_t res_strong_partner__get_packed_size
                     (const ResStrongPartner   *message);
size_t res_strong_partner__pack
                     (const ResStrongPartner   *message,
                      uint8_t             *out);
size_t res_strong_partner__pack_to_buffer
                     (const ResStrongPartner   *message,
                      ProtobufCBuffer     *buffer);
ResStrongPartner *
       res_strong_partner__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_strong_partner__free_unpacked
                     (ResStrongPartner *message,
                      ProtobufCAllocator *allocator);
/* PartnerDismissAnswer methods */
void   partner_dismiss_answer__init
                     (PartnerDismissAnswer         *message);
size_t partner_dismiss_answer__get_packed_size
                     (const PartnerDismissAnswer   *message);
size_t partner_dismiss_answer__pack
                     (const PartnerDismissAnswer   *message,
                      uint8_t             *out);
size_t partner_dismiss_answer__pack_to_buffer
                     (const PartnerDismissAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerDismissAnswer *
       partner_dismiss_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_dismiss_answer__free_unpacked
                     (PartnerDismissAnswer *message,
                      ProtobufCAllocator *allocator);
/* PartnerDictionaryAddNotify methods */
void   partner_dictionary_add_notify__init
                     (PartnerDictionaryAddNotify         *message);
size_t partner_dictionary_add_notify__get_packed_size
                     (const PartnerDictionaryAddNotify   *message);
size_t partner_dictionary_add_notify__pack
                     (const PartnerDictionaryAddNotify   *message,
                      uint8_t             *out);
size_t partner_dictionary_add_notify__pack_to_buffer
                     (const PartnerDictionaryAddNotify   *message,
                      ProtobufCBuffer     *buffer);
PartnerDictionaryAddNotify *
       partner_dictionary_add_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_dictionary_add_notify__free_unpacked
                     (PartnerDictionaryAddNotify *message,
                      ProtobufCAllocator *allocator);
/* PartnerExchangeRequest methods */
void   partner_exchange_request__init
                     (PartnerExchangeRequest         *message);
size_t partner_exchange_request__get_packed_size
                     (const PartnerExchangeRequest   *message);
size_t partner_exchange_request__pack
                     (const PartnerExchangeRequest   *message,
                      uint8_t             *out);
size_t partner_exchange_request__pack_to_buffer
                     (const PartnerExchangeRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerExchangeRequest *
       partner_exchange_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_exchange_request__free_unpacked
                     (PartnerExchangeRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerExchangeAnswer methods */
void   partner_exchange_answer__init
                     (PartnerExchangeAnswer         *message);
size_t partner_exchange_answer__get_packed_size
                     (const PartnerExchangeAnswer   *message);
size_t partner_exchange_answer__pack
                     (const PartnerExchangeAnswer   *message,
                      uint8_t             *out);
size_t partner_exchange_answer__pack_to_buffer
                     (const PartnerExchangeAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerExchangeAnswer *
       partner_exchange_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_exchange_answer__free_unpacked
                     (PartnerExchangeAnswer *message,
                      ProtobufCAllocator *allocator);
/* PartnerRecruitRequest methods */
void   partner_recruit_request__init
                     (PartnerRecruitRequest         *message);
size_t partner_recruit_request__get_packed_size
                     (const PartnerRecruitRequest   *message);
size_t partner_recruit_request__pack
                     (const PartnerRecruitRequest   *message,
                      uint8_t             *out);
size_t partner_recruit_request__pack_to_buffer
                     (const PartnerRecruitRequest   *message,
                      ProtobufCBuffer     *buffer);
PartnerRecruitRequest *
       partner_recruit_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_recruit_request__free_unpacked
                     (PartnerRecruitRequest *message,
                      ProtobufCAllocator *allocator);
/* PartnerRecruitResultData methods */
void   partner_recruit_result_data__init
                     (PartnerRecruitResultData         *message);
size_t partner_recruit_result_data__get_packed_size
                     (const PartnerRecruitResultData   *message);
size_t partner_recruit_result_data__pack
                     (const PartnerRecruitResultData   *message,
                      uint8_t             *out);
size_t partner_recruit_result_data__pack_to_buffer
                     (const PartnerRecruitResultData   *message,
                      ProtobufCBuffer     *buffer);
PartnerRecruitResultData *
       partner_recruit_result_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_recruit_result_data__free_unpacked
                     (PartnerRecruitResultData *message,
                      ProtobufCAllocator *allocator);
/* PartnerRecruitAnswer methods */
void   partner_recruit_answer__init
                     (PartnerRecruitAnswer         *message);
size_t partner_recruit_answer__get_packed_size
                     (const PartnerRecruitAnswer   *message);
size_t partner_recruit_answer__pack
                     (const PartnerRecruitAnswer   *message,
                      uint8_t             *out);
size_t partner_recruit_answer__pack_to_buffer
                     (const PartnerRecruitAnswer   *message,
                      ProtobufCBuffer     *buffer);
PartnerRecruitAnswer *
       partner_recruit_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   partner_recruit_answer__free_unpacked
                     (PartnerRecruitAnswer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PartnerSkillData_Closure)
                 (const PartnerSkillData *message,
                  void *closure_data);
typedef void (*PartnerAttr_Closure)
                 (const PartnerAttr *message,
                  void *closure_data);
typedef void (*PartnerData_Closure)
                 (const PartnerData *message,
                  void *closure_data);
typedef void (*PartnerInfoAnswer_Closure)
                 (const PartnerInfoAnswer *message,
                  void *closure_data);
typedef void (*PartnerTurnSwitchRequest_Closure)
                 (const PartnerTurnSwitchRequest *message,
                  void *closure_data);
typedef void (*PartnerFormationRequest_Closure)
                 (const PartnerFormationRequest *message,
                  void *closure_data);
typedef void (*PartnerFormationAnswer_Closure)
                 (const PartnerFormationAnswer *message,
                  void *closure_data);
typedef void (*PartnerLearnSkillRequest_Closure)
                 (const PartnerLearnSkillRequest *message,
                  void *closure_data);
typedef void (*PartnerLearnSkillAnswer_Closure)
                 (const PartnerLearnSkillAnswer *message,
                  void *closure_data);
typedef void (*PartnerUseExpItemRequest_Closure)
                 (const PartnerUseExpItemRequest *message,
                  void *closure_data);
typedef void (*PartnerAddBaseAttr_Closure)
                 (const PartnerAddBaseAttr *message,
                  void *closure_data);
typedef void (*PartnerDismissRequest_Closure)
                 (const PartnerDismissRequest *message,
                  void *closure_data);
typedef void (*PartnerUuid_Closure)
                 (const PartnerUuid *message,
                  void *closure_data);
typedef void (*ResResetAttr_Closure)
                 (const ResResetAttr *message,
                  void *closure_data);
typedef void (*StrongPartner_Closure)
                 (const StrongPartner *message,
                  void *closure_data);
typedef void (*ResStrongPartner_Closure)
                 (const ResStrongPartner *message,
                  void *closure_data);
typedef void (*PartnerDismissAnswer_Closure)
                 (const PartnerDismissAnswer *message,
                  void *closure_data);
typedef void (*PartnerDictionaryAddNotify_Closure)
                 (const PartnerDictionaryAddNotify *message,
                  void *closure_data);
typedef void (*PartnerExchangeRequest_Closure)
                 (const PartnerExchangeRequest *message,
                  void *closure_data);
typedef void (*PartnerExchangeAnswer_Closure)
                 (const PartnerExchangeAnswer *message,
                  void *closure_data);
typedef void (*PartnerRecruitRequest_Closure)
                 (const PartnerRecruitRequest *message,
                  void *closure_data);
typedef void (*PartnerRecruitResultData_Closure)
                 (const PartnerRecruitResultData *message,
                  void *closure_data);
typedef void (*PartnerRecruitAnswer_Closure)
                 (const PartnerRecruitAnswer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor partner_skill_data__descriptor;
extern const ProtobufCMessageDescriptor partner_attr__descriptor;
extern const ProtobufCMessageDescriptor partner_data__descriptor;
extern const ProtobufCMessageDescriptor partner_info_answer__descriptor;
extern const ProtobufCMessageDescriptor partner_turn_switch_request__descriptor;
extern const ProtobufCMessageDescriptor partner_formation_request__descriptor;
extern const ProtobufCMessageDescriptor partner_formation_answer__descriptor;
extern const ProtobufCMessageDescriptor partner_learn_skill_request__descriptor;
extern const ProtobufCMessageDescriptor partner_learn_skill_answer__descriptor;
extern const ProtobufCMessageDescriptor partner_use_exp_item_request__descriptor;
extern const ProtobufCMessageDescriptor partner_add_base_attr__descriptor;
extern const ProtobufCMessageDescriptor partner_dismiss_request__descriptor;
extern const ProtobufCMessageDescriptor partner_uuid__descriptor;
extern const ProtobufCMessageDescriptor res_reset_attr__descriptor;
extern const ProtobufCMessageDescriptor strong_partner__descriptor;
extern const ProtobufCMessageDescriptor res_strong_partner__descriptor;
extern const ProtobufCMessageDescriptor partner_dismiss_answer__descriptor;
extern const ProtobufCMessageDescriptor partner_dictionary_add_notify__descriptor;
extern const ProtobufCMessageDescriptor partner_exchange_request__descriptor;
extern const ProtobufCMessageDescriptor partner_exchange_answer__descriptor;
extern const ProtobufCMessageDescriptor partner_recruit_request__descriptor;
extern const ProtobufCMessageDescriptor partner_recruit_result_data__descriptor;
extern const ProtobufCMessageDescriptor partner_recruit_answer__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_partner_2eproto__INCLUDED */
