/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_pk_2eproto__INCLUDED
#define PROTOBUF_C_pk_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _SetPkTypeRequest SetPkTypeRequest;
typedef struct _SetPkTypeAnswer SetPkTypeAnswer;
typedef struct _QiecuoRequest QiecuoRequest;
typedef struct _QiecuoNotify QiecuoNotify;
typedef struct _QiecuoStartRequest QiecuoStartRequest;
typedef struct _QiecuoStartNotify QiecuoStartNotify;
typedef struct _QiecuoFinishNotify QiecuoFinishNotify;
typedef struct _QiecuoRefuseRequest QiecuoRefuseRequest;
typedef struct _QiecuoRefuseNotify QiecuoRefuseNotify;


/* --- enums --- */


/* --- messages --- */

struct  _SetPkTypeRequest
{
  ProtobufCMessage base;
  uint32_t pk_type;
};
#define SET_PK_TYPE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_pk_type_request__descriptor) \
    , 0 }


struct  _SetPkTypeAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t pk_type;
};
#define SET_PK_TYPE_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_pk_type_answer__descriptor) \
    , 0, 0 }


struct  _QiecuoRequest
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define QIECUO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_request__descriptor) \
    , 0 }


struct  _QiecuoNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  char *name;
};
#define QIECUO_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_notify__descriptor) \
    , 0, NULL }


struct  _QiecuoStartRequest
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define QIECUO_START_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_start_request__descriptor) \
    , 0 }


struct  _QiecuoStartNotify
{
  ProtobufCMessage base;
  uint32_t pos_x;
  uint32_t pos_z;
  uint64_t player_id;
  char *name;
};
#define QIECUO_START_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_start_notify__descriptor) \
    , 0, 0, 0, NULL }


struct  _QiecuoFinishNotify
{
  ProtobufCMessage base;
  uint32_t result;
};
#define QIECUO_FINISH_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_finish_notify__descriptor) \
    , 0 }


struct  _QiecuoRefuseRequest
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define QIECUO_REFUSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_refuse_request__descriptor) \
    , 0 }


struct  _QiecuoRefuseNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  char *name;
};
#define QIECUO_REFUSE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qiecuo_refuse_notify__descriptor) \
    , 0, NULL }


/* SetPkTypeRequest methods */
void   set_pk_type_request__init
                     (SetPkTypeRequest         *message);
size_t set_pk_type_request__get_packed_size
                     (const SetPkTypeRequest   *message);
size_t set_pk_type_request__pack
                     (const SetPkTypeRequest   *message,
                      uint8_t             *out);
size_t set_pk_type_request__pack_to_buffer
                     (const SetPkTypeRequest   *message,
                      ProtobufCBuffer     *buffer);
SetPkTypeRequest *
       set_pk_type_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_pk_type_request__free_unpacked
                     (SetPkTypeRequest *message,
                      ProtobufCAllocator *allocator);
/* SetPkTypeAnswer methods */
void   set_pk_type_answer__init
                     (SetPkTypeAnswer         *message);
size_t set_pk_type_answer__get_packed_size
                     (const SetPkTypeAnswer   *message);
size_t set_pk_type_answer__pack
                     (const SetPkTypeAnswer   *message,
                      uint8_t             *out);
size_t set_pk_type_answer__pack_to_buffer
                     (const SetPkTypeAnswer   *message,
                      ProtobufCBuffer     *buffer);
SetPkTypeAnswer *
       set_pk_type_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_pk_type_answer__free_unpacked
                     (SetPkTypeAnswer *message,
                      ProtobufCAllocator *allocator);
/* QiecuoRequest methods */
void   qiecuo_request__init
                     (QiecuoRequest         *message);
size_t qiecuo_request__get_packed_size
                     (const QiecuoRequest   *message);
size_t qiecuo_request__pack
                     (const QiecuoRequest   *message,
                      uint8_t             *out);
size_t qiecuo_request__pack_to_buffer
                     (const QiecuoRequest   *message,
                      ProtobufCBuffer     *buffer);
QiecuoRequest *
       qiecuo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_request__free_unpacked
                     (QiecuoRequest *message,
                      ProtobufCAllocator *allocator);
/* QiecuoNotify methods */
void   qiecuo_notify__init
                     (QiecuoNotify         *message);
size_t qiecuo_notify__get_packed_size
                     (const QiecuoNotify   *message);
size_t qiecuo_notify__pack
                     (const QiecuoNotify   *message,
                      uint8_t             *out);
size_t qiecuo_notify__pack_to_buffer
                     (const QiecuoNotify   *message,
                      ProtobufCBuffer     *buffer);
QiecuoNotify *
       qiecuo_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_notify__free_unpacked
                     (QiecuoNotify *message,
                      ProtobufCAllocator *allocator);
/* QiecuoStartRequest methods */
void   qiecuo_start_request__init
                     (QiecuoStartRequest         *message);
size_t qiecuo_start_request__get_packed_size
                     (const QiecuoStartRequest   *message);
size_t qiecuo_start_request__pack
                     (const QiecuoStartRequest   *message,
                      uint8_t             *out);
size_t qiecuo_start_request__pack_to_buffer
                     (const QiecuoStartRequest   *message,
                      ProtobufCBuffer     *buffer);
QiecuoStartRequest *
       qiecuo_start_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_start_request__free_unpacked
                     (QiecuoStartRequest *message,
                      ProtobufCAllocator *allocator);
/* QiecuoStartNotify methods */
void   qiecuo_start_notify__init
                     (QiecuoStartNotify         *message);
size_t qiecuo_start_notify__get_packed_size
                     (const QiecuoStartNotify   *message);
size_t qiecuo_start_notify__pack
                     (const QiecuoStartNotify   *message,
                      uint8_t             *out);
size_t qiecuo_start_notify__pack_to_buffer
                     (const QiecuoStartNotify   *message,
                      ProtobufCBuffer     *buffer);
QiecuoStartNotify *
       qiecuo_start_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_start_notify__free_unpacked
                     (QiecuoStartNotify *message,
                      ProtobufCAllocator *allocator);
/* QiecuoFinishNotify methods */
void   qiecuo_finish_notify__init
                     (QiecuoFinishNotify         *message);
size_t qiecuo_finish_notify__get_packed_size
                     (const QiecuoFinishNotify   *message);
size_t qiecuo_finish_notify__pack
                     (const QiecuoFinishNotify   *message,
                      uint8_t             *out);
size_t qiecuo_finish_notify__pack_to_buffer
                     (const QiecuoFinishNotify   *message,
                      ProtobufCBuffer     *buffer);
QiecuoFinishNotify *
       qiecuo_finish_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_finish_notify__free_unpacked
                     (QiecuoFinishNotify *message,
                      ProtobufCAllocator *allocator);
/* QiecuoRefuseRequest methods */
void   qiecuo_refuse_request__init
                     (QiecuoRefuseRequest         *message);
size_t qiecuo_refuse_request__get_packed_size
                     (const QiecuoRefuseRequest   *message);
size_t qiecuo_refuse_request__pack
                     (const QiecuoRefuseRequest   *message,
                      uint8_t             *out);
size_t qiecuo_refuse_request__pack_to_buffer
                     (const QiecuoRefuseRequest   *message,
                      ProtobufCBuffer     *buffer);
QiecuoRefuseRequest *
       qiecuo_refuse_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_refuse_request__free_unpacked
                     (QiecuoRefuseRequest *message,
                      ProtobufCAllocator *allocator);
/* QiecuoRefuseNotify methods */
void   qiecuo_refuse_notify__init
                     (QiecuoRefuseNotify         *message);
size_t qiecuo_refuse_notify__get_packed_size
                     (const QiecuoRefuseNotify   *message);
size_t qiecuo_refuse_notify__pack
                     (const QiecuoRefuseNotify   *message,
                      uint8_t             *out);
size_t qiecuo_refuse_notify__pack_to_buffer
                     (const QiecuoRefuseNotify   *message,
                      ProtobufCBuffer     *buffer);
QiecuoRefuseNotify *
       qiecuo_refuse_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qiecuo_refuse_notify__free_unpacked
                     (QiecuoRefuseNotify *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SetPkTypeRequest_Closure)
                 (const SetPkTypeRequest *message,
                  void *closure_data);
typedef void (*SetPkTypeAnswer_Closure)
                 (const SetPkTypeAnswer *message,
                  void *closure_data);
typedef void (*QiecuoRequest_Closure)
                 (const QiecuoRequest *message,
                  void *closure_data);
typedef void (*QiecuoNotify_Closure)
                 (const QiecuoNotify *message,
                  void *closure_data);
typedef void (*QiecuoStartRequest_Closure)
                 (const QiecuoStartRequest *message,
                  void *closure_data);
typedef void (*QiecuoStartNotify_Closure)
                 (const QiecuoStartNotify *message,
                  void *closure_data);
typedef void (*QiecuoFinishNotify_Closure)
                 (const QiecuoFinishNotify *message,
                  void *closure_data);
typedef void (*QiecuoRefuseRequest_Closure)
                 (const QiecuoRefuseRequest *message,
                  void *closure_data);
typedef void (*QiecuoRefuseNotify_Closure)
                 (const QiecuoRefuseNotify *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor set_pk_type_request__descriptor;
extern const ProtobufCMessageDescriptor set_pk_type_answer__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_request__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_notify__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_start_request__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_start_notify__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_finish_notify__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_refuse_request__descriptor;
extern const ProtobufCMessageDescriptor qiecuo_refuse_notify__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_pk_2eproto__INCLUDED */
