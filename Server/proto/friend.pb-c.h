/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_friend_2eproto__INCLUDED
#define PROTOBUF_C_friend_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "chat.pb-c.h"
#include "role.pb-c.h"

typedef struct _FriendPlayerBriefData FriendPlayerBriefData;
typedef struct _FriendGroupData FriendGroupData;
typedef struct _FriendInfoAnswer FriendInfoAnswer;
typedef struct _FriendOperateRequest FriendOperateRequest;
typedef struct _FriendOperateAnswer FriendOperateAnswer;
typedef struct _FriendListAddData FriendListAddData;
typedef struct _FriendListDelData FriendListDelData;
typedef struct _FriendListChangeNotify FriendListChangeNotify;
typedef struct _FriendCreateGroupRequest FriendCreateGroupRequest;
typedef struct _FriendCreateGroupAnswer FriendCreateGroupAnswer;
typedef struct _FriendEditGroupRequest FriendEditGroupRequest;
typedef struct _FriendEditGroupAnswer FriendEditGroupAnswer;
typedef struct _FriendRemoveGroupRequest FriendRemoveGroupRequest;
typedef struct _FriendMovePlayerGroupRequest FriendMovePlayerGroupRequest;
typedef struct _FriendDealApplyRequest FriendDealApplyRequest;
typedef struct _FriendDealApplyAnswer FriendDealApplyAnswer;
typedef struct _FriendRecommendAnswer FriendRecommendAnswer;
typedef struct _FriendSearchRequest FriendSearchRequest;
typedef struct _FriendSearchAnswer FriendSearchAnswer;
typedef struct _FriendSendGiftRequest FriendSendGiftRequest;
typedef struct _FriendSendGiftAnswer FriendSendGiftAnswer;
typedef struct _FriendSendGiftNotify FriendSendGiftNotify;
typedef struct _FriendUpdateUnitNotify FriendUpdateUnitNotify;
typedef struct _ChatList ChatList;
typedef struct _FriendUpdateStatusNotify FriendUpdateStatusNotify;


/* --- enums --- */

typedef enum _FriendListType {
  FRIEND_LIST_TYPE__L_RECENT = 1,
  FRIEND_LIST_TYPE__L_CONTACT = 2,
  FRIEND_LIST_TYPE__L_BLOCK = 3,
  FRIEND_LIST_TYPE__L_ENEMY = 4,
  FRIEND_LIST_TYPE__L_APPLY = 5,
  FRIEND_LIST_TYPE__L_CUSTOM_BEGIN = 10
} FriendListType;
typedef enum _FriendApplyDeal {
  FRIEND_APPLY_DEAL__AD_ACCEPT = 1,
  FRIEND_APPLY_DEAL__AD_IGNORE = 2
} FriendApplyDeal;

/* --- messages --- */

struct  _FriendPlayerBriefData
{
  ProtobufCMessage base;
  uint64_t playerid;
  char *name;
  uint32_t job;
  uint32_t level;
  uint32_t offlinetime;
  uint32_t closeness;
  size_t n_tags;
  uint32_t *tags;
  char *textintro;
  uint32_t head;
};
#define FRIEND_PLAYER_BRIEF_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_player_brief_data__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0,NULL, NULL, 0 }


struct  _FriendGroupData
{
  ProtobufCMessage base;
  uint32_t groupid;
  char *name;
  uint32_t createtime;
  size_t n_players;
  FriendPlayerBriefData **players;
};
#define FRIEND_GROUP_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_group_data__descriptor) \
    , 0, NULL, 0, 0,NULL }


struct  _FriendInfoAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_fixs;
  FriendGroupData **fixs;
  size_t n_customs;
  FriendGroupData **customs;
  uint32_t contact_extend;
};
#define FRIEND_INFO_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_info_answer__descriptor) \
    , 0, 0,NULL, 0,NULL, 0 }


struct  _FriendOperateRequest
{
  ProtobufCMessage base;
  uint64_t playerid;
};
#define FRIEND_OPERATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_operate_request__descriptor) \
    , 0 }


struct  _FriendOperateAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t playerid;
};
#define FRIEND_OPERATE_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_operate_answer__descriptor) \
    , 0, 0 }


struct  _FriendListAddData
{
  ProtobufCMessage base;
  uint32_t groupid;
  FriendPlayerBriefData *data;
};
#define FRIEND_LIST_ADD_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_list_add_data__descriptor) \
    , 0, NULL }


struct  _FriendListDelData
{
  ProtobufCMessage base;
  uint32_t groupid;
  uint64_t playerid;
};
#define FRIEND_LIST_DEL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_list_del_data__descriptor) \
    , 0, 0 }


struct  _FriendListChangeNotify
{
  ProtobufCMessage base;
  size_t n_adds;
  FriendListAddData **adds;
  size_t n_dels;
  FriendListDelData **dels;
};
#define FRIEND_LIST_CHANGE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_list_change_notify__descriptor) \
    , 0,NULL, 0,NULL }


struct  _FriendCreateGroupRequest
{
  ProtobufCMessage base;
  char *name;
  size_t n_playerids;
  uint64_t *playerids;
};
#define FRIEND_CREATE_GROUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_create_group_request__descriptor) \
    , NULL, 0,NULL }


struct  _FriendCreateGroupAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  FriendGroupData *info;
};
#define FRIEND_CREATE_GROUP_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_create_group_answer__descriptor) \
    , 0, NULL }


struct  _FriendEditGroupRequest
{
  ProtobufCMessage base;
  uint32_t groupid;
  char *name;
  size_t n_playerids;
  uint64_t *playerids;
};
#define FRIEND_EDIT_GROUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_edit_group_request__descriptor) \
    , 0, NULL, 0,NULL }


struct  _FriendEditGroupAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t groupid;
  char *name;
};
#define FRIEND_EDIT_GROUP_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_edit_group_answer__descriptor) \
    , 0, 0, NULL }


struct  _FriendRemoveGroupRequest
{
  ProtobufCMessage base;
  uint32_t groupid;
};
#define FRIEND_REMOVE_GROUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_remove_group_request__descriptor) \
    , 0 }


struct  _FriendMovePlayerGroupRequest
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t togroup;
};
#define FRIEND_MOVE_PLAYER_GROUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_move_player_group_request__descriptor) \
    , 0, 0 }


struct  _FriendDealApplyRequest
{
  ProtobufCMessage base;
  uint64_t playerid;
  FriendApplyDeal deal;
};
#define FRIEND_DEAL_APPLY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_deal_apply_request__descriptor) \
    , 0, 0 }


struct  _FriendDealApplyAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t playerid;
  FriendApplyDeal deal;
  size_t n_dealplayers;
  uint64_t *dealplayers;
};
#define FRIEND_DEAL_APPLY_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_deal_apply_answer__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _FriendRecommendAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  size_t n_players;
  FriendPlayerBriefData **players;
};
#define FRIEND_RECOMMEND_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_recommend_answer__descriptor) \
    , 0, 0,NULL }


struct  _FriendSearchRequest
{
  ProtobufCMessage base;
  uint64_t playerid;
  char *playername;
};
#define FRIEND_SEARCH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_search_request__descriptor) \
    , 0, NULL }


struct  _FriendSearchAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  FriendPlayerBriefData *data;
};
#define FRIEND_SEARCH_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_search_answer__descriptor) \
    , 0, NULL }


struct  _FriendSendGiftRequest
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t itemid;
  uint32_t itemnum;
};
#define FRIEND_SEND_GIFT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_send_gift_request__descriptor) \
    , 0, 0, 0 }


struct  _FriendSendGiftAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t playerid;
  uint32_t itemid;
  uint32_t itemnum;
};
#define FRIEND_SEND_GIFT_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_send_gift_answer__descriptor) \
    , 0, 0, 0, 0 }


struct  _FriendSendGiftNotify
{
  ProtobufCMessage base;
  uint64_t senderid;
  uint32_t itemid;
  uint32_t itemnum;
};
#define FRIEND_SEND_GIFT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_send_gift_notify__descriptor) \
    , 0, 0, 0 }


struct  _FriendUpdateUnitNotify
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t closeness;
};
#define FRIEND_UPDATE_UNIT_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_update_unit_notify__descriptor) \
    , 0, 0 }


struct  _ChatList
{
  ProtobufCMessage base;
  size_t n_chats;
  Chat **chats;
  size_t n_systems;
  SystemNoticeNotify **systems;
};
#define CHAT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat_list__descriptor) \
    , 0,NULL, 0,NULL }


struct  _FriendUpdateStatusNotify
{
  ProtobufCMessage base;
  uint64_t playerid;
  uint32_t offlinetime;
};
#define FRIEND_UPDATE_STATUS_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&friend_update_status_notify__descriptor) \
    , 0, 0 }


/* FriendPlayerBriefData methods */
void   friend_player_brief_data__init
                     (FriendPlayerBriefData         *message);
size_t friend_player_brief_data__get_packed_size
                     (const FriendPlayerBriefData   *message);
size_t friend_player_brief_data__pack
                     (const FriendPlayerBriefData   *message,
                      uint8_t             *out);
size_t friend_player_brief_data__pack_to_buffer
                     (const FriendPlayerBriefData   *message,
                      ProtobufCBuffer     *buffer);
FriendPlayerBriefData *
       friend_player_brief_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_player_brief_data__free_unpacked
                     (FriendPlayerBriefData *message,
                      ProtobufCAllocator *allocator);
/* FriendGroupData methods */
void   friend_group_data__init
                     (FriendGroupData         *message);
size_t friend_group_data__get_packed_size
                     (const FriendGroupData   *message);
size_t friend_group_data__pack
                     (const FriendGroupData   *message,
                      uint8_t             *out);
size_t friend_group_data__pack_to_buffer
                     (const FriendGroupData   *message,
                      ProtobufCBuffer     *buffer);
FriendGroupData *
       friend_group_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_group_data__free_unpacked
                     (FriendGroupData *message,
                      ProtobufCAllocator *allocator);
/* FriendInfoAnswer methods */
void   friend_info_answer__init
                     (FriendInfoAnswer         *message);
size_t friend_info_answer__get_packed_size
                     (const FriendInfoAnswer   *message);
size_t friend_info_answer__pack
                     (const FriendInfoAnswer   *message,
                      uint8_t             *out);
size_t friend_info_answer__pack_to_buffer
                     (const FriendInfoAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendInfoAnswer *
       friend_info_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_info_answer__free_unpacked
                     (FriendInfoAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendOperateRequest methods */
void   friend_operate_request__init
                     (FriendOperateRequest         *message);
size_t friend_operate_request__get_packed_size
                     (const FriendOperateRequest   *message);
size_t friend_operate_request__pack
                     (const FriendOperateRequest   *message,
                      uint8_t             *out);
size_t friend_operate_request__pack_to_buffer
                     (const FriendOperateRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendOperateRequest *
       friend_operate_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_operate_request__free_unpacked
                     (FriendOperateRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendOperateAnswer methods */
void   friend_operate_answer__init
                     (FriendOperateAnswer         *message);
size_t friend_operate_answer__get_packed_size
                     (const FriendOperateAnswer   *message);
size_t friend_operate_answer__pack
                     (const FriendOperateAnswer   *message,
                      uint8_t             *out);
size_t friend_operate_answer__pack_to_buffer
                     (const FriendOperateAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendOperateAnswer *
       friend_operate_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_operate_answer__free_unpacked
                     (FriendOperateAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendListAddData methods */
void   friend_list_add_data__init
                     (FriendListAddData         *message);
size_t friend_list_add_data__get_packed_size
                     (const FriendListAddData   *message);
size_t friend_list_add_data__pack
                     (const FriendListAddData   *message,
                      uint8_t             *out);
size_t friend_list_add_data__pack_to_buffer
                     (const FriendListAddData   *message,
                      ProtobufCBuffer     *buffer);
FriendListAddData *
       friend_list_add_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_list_add_data__free_unpacked
                     (FriendListAddData *message,
                      ProtobufCAllocator *allocator);
/* FriendListDelData methods */
void   friend_list_del_data__init
                     (FriendListDelData         *message);
size_t friend_list_del_data__get_packed_size
                     (const FriendListDelData   *message);
size_t friend_list_del_data__pack
                     (const FriendListDelData   *message,
                      uint8_t             *out);
size_t friend_list_del_data__pack_to_buffer
                     (const FriendListDelData   *message,
                      ProtobufCBuffer     *buffer);
FriendListDelData *
       friend_list_del_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_list_del_data__free_unpacked
                     (FriendListDelData *message,
                      ProtobufCAllocator *allocator);
/* FriendListChangeNotify methods */
void   friend_list_change_notify__init
                     (FriendListChangeNotify         *message);
size_t friend_list_change_notify__get_packed_size
                     (const FriendListChangeNotify   *message);
size_t friend_list_change_notify__pack
                     (const FriendListChangeNotify   *message,
                      uint8_t             *out);
size_t friend_list_change_notify__pack_to_buffer
                     (const FriendListChangeNotify   *message,
                      ProtobufCBuffer     *buffer);
FriendListChangeNotify *
       friend_list_change_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_list_change_notify__free_unpacked
                     (FriendListChangeNotify *message,
                      ProtobufCAllocator *allocator);
/* FriendCreateGroupRequest methods */
void   friend_create_group_request__init
                     (FriendCreateGroupRequest         *message);
size_t friend_create_group_request__get_packed_size
                     (const FriendCreateGroupRequest   *message);
size_t friend_create_group_request__pack
                     (const FriendCreateGroupRequest   *message,
                      uint8_t             *out);
size_t friend_create_group_request__pack_to_buffer
                     (const FriendCreateGroupRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendCreateGroupRequest *
       friend_create_group_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_create_group_request__free_unpacked
                     (FriendCreateGroupRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendCreateGroupAnswer methods */
void   friend_create_group_answer__init
                     (FriendCreateGroupAnswer         *message);
size_t friend_create_group_answer__get_packed_size
                     (const FriendCreateGroupAnswer   *message);
size_t friend_create_group_answer__pack
                     (const FriendCreateGroupAnswer   *message,
                      uint8_t             *out);
size_t friend_create_group_answer__pack_to_buffer
                     (const FriendCreateGroupAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendCreateGroupAnswer *
       friend_create_group_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_create_group_answer__free_unpacked
                     (FriendCreateGroupAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendEditGroupRequest methods */
void   friend_edit_group_request__init
                     (FriendEditGroupRequest         *message);
size_t friend_edit_group_request__get_packed_size
                     (const FriendEditGroupRequest   *message);
size_t friend_edit_group_request__pack
                     (const FriendEditGroupRequest   *message,
                      uint8_t             *out);
size_t friend_edit_group_request__pack_to_buffer
                     (const FriendEditGroupRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendEditGroupRequest *
       friend_edit_group_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_edit_group_request__free_unpacked
                     (FriendEditGroupRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendEditGroupAnswer methods */
void   friend_edit_group_answer__init
                     (FriendEditGroupAnswer         *message);
size_t friend_edit_group_answer__get_packed_size
                     (const FriendEditGroupAnswer   *message);
size_t friend_edit_group_answer__pack
                     (const FriendEditGroupAnswer   *message,
                      uint8_t             *out);
size_t friend_edit_group_answer__pack_to_buffer
                     (const FriendEditGroupAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendEditGroupAnswer *
       friend_edit_group_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_edit_group_answer__free_unpacked
                     (FriendEditGroupAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendRemoveGroupRequest methods */
void   friend_remove_group_request__init
                     (FriendRemoveGroupRequest         *message);
size_t friend_remove_group_request__get_packed_size
                     (const FriendRemoveGroupRequest   *message);
size_t friend_remove_group_request__pack
                     (const FriendRemoveGroupRequest   *message,
                      uint8_t             *out);
size_t friend_remove_group_request__pack_to_buffer
                     (const FriendRemoveGroupRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendRemoveGroupRequest *
       friend_remove_group_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_remove_group_request__free_unpacked
                     (FriendRemoveGroupRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendMovePlayerGroupRequest methods */
void   friend_move_player_group_request__init
                     (FriendMovePlayerGroupRequest         *message);
size_t friend_move_player_group_request__get_packed_size
                     (const FriendMovePlayerGroupRequest   *message);
size_t friend_move_player_group_request__pack
                     (const FriendMovePlayerGroupRequest   *message,
                      uint8_t             *out);
size_t friend_move_player_group_request__pack_to_buffer
                     (const FriendMovePlayerGroupRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendMovePlayerGroupRequest *
       friend_move_player_group_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_move_player_group_request__free_unpacked
                     (FriendMovePlayerGroupRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendDealApplyRequest methods */
void   friend_deal_apply_request__init
                     (FriendDealApplyRequest         *message);
size_t friend_deal_apply_request__get_packed_size
                     (const FriendDealApplyRequest   *message);
size_t friend_deal_apply_request__pack
                     (const FriendDealApplyRequest   *message,
                      uint8_t             *out);
size_t friend_deal_apply_request__pack_to_buffer
                     (const FriendDealApplyRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendDealApplyRequest *
       friend_deal_apply_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_deal_apply_request__free_unpacked
                     (FriendDealApplyRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendDealApplyAnswer methods */
void   friend_deal_apply_answer__init
                     (FriendDealApplyAnswer         *message);
size_t friend_deal_apply_answer__get_packed_size
                     (const FriendDealApplyAnswer   *message);
size_t friend_deal_apply_answer__pack
                     (const FriendDealApplyAnswer   *message,
                      uint8_t             *out);
size_t friend_deal_apply_answer__pack_to_buffer
                     (const FriendDealApplyAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendDealApplyAnswer *
       friend_deal_apply_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_deal_apply_answer__free_unpacked
                     (FriendDealApplyAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendRecommendAnswer methods */
void   friend_recommend_answer__init
                     (FriendRecommendAnswer         *message);
size_t friend_recommend_answer__get_packed_size
                     (const FriendRecommendAnswer   *message);
size_t friend_recommend_answer__pack
                     (const FriendRecommendAnswer   *message,
                      uint8_t             *out);
size_t friend_recommend_answer__pack_to_buffer
                     (const FriendRecommendAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendRecommendAnswer *
       friend_recommend_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_recommend_answer__free_unpacked
                     (FriendRecommendAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendSearchRequest methods */
void   friend_search_request__init
                     (FriendSearchRequest         *message);
size_t friend_search_request__get_packed_size
                     (const FriendSearchRequest   *message);
size_t friend_search_request__pack
                     (const FriendSearchRequest   *message,
                      uint8_t             *out);
size_t friend_search_request__pack_to_buffer
                     (const FriendSearchRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendSearchRequest *
       friend_search_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_search_request__free_unpacked
                     (FriendSearchRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendSearchAnswer methods */
void   friend_search_answer__init
                     (FriendSearchAnswer         *message);
size_t friend_search_answer__get_packed_size
                     (const FriendSearchAnswer   *message);
size_t friend_search_answer__pack
                     (const FriendSearchAnswer   *message,
                      uint8_t             *out);
size_t friend_search_answer__pack_to_buffer
                     (const FriendSearchAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendSearchAnswer *
       friend_search_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_search_answer__free_unpacked
                     (FriendSearchAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendSendGiftRequest methods */
void   friend_send_gift_request__init
                     (FriendSendGiftRequest         *message);
size_t friend_send_gift_request__get_packed_size
                     (const FriendSendGiftRequest   *message);
size_t friend_send_gift_request__pack
                     (const FriendSendGiftRequest   *message,
                      uint8_t             *out);
size_t friend_send_gift_request__pack_to_buffer
                     (const FriendSendGiftRequest   *message,
                      ProtobufCBuffer     *buffer);
FriendSendGiftRequest *
       friend_send_gift_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_send_gift_request__free_unpacked
                     (FriendSendGiftRequest *message,
                      ProtobufCAllocator *allocator);
/* FriendSendGiftAnswer methods */
void   friend_send_gift_answer__init
                     (FriendSendGiftAnswer         *message);
size_t friend_send_gift_answer__get_packed_size
                     (const FriendSendGiftAnswer   *message);
size_t friend_send_gift_answer__pack
                     (const FriendSendGiftAnswer   *message,
                      uint8_t             *out);
size_t friend_send_gift_answer__pack_to_buffer
                     (const FriendSendGiftAnswer   *message,
                      ProtobufCBuffer     *buffer);
FriendSendGiftAnswer *
       friend_send_gift_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_send_gift_answer__free_unpacked
                     (FriendSendGiftAnswer *message,
                      ProtobufCAllocator *allocator);
/* FriendSendGiftNotify methods */
void   friend_send_gift_notify__init
                     (FriendSendGiftNotify         *message);
size_t friend_send_gift_notify__get_packed_size
                     (const FriendSendGiftNotify   *message);
size_t friend_send_gift_notify__pack
                     (const FriendSendGiftNotify   *message,
                      uint8_t             *out);
size_t friend_send_gift_notify__pack_to_buffer
                     (const FriendSendGiftNotify   *message,
                      ProtobufCBuffer     *buffer);
FriendSendGiftNotify *
       friend_send_gift_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_send_gift_notify__free_unpacked
                     (FriendSendGiftNotify *message,
                      ProtobufCAllocator *allocator);
/* FriendUpdateUnitNotify methods */
void   friend_update_unit_notify__init
                     (FriendUpdateUnitNotify         *message);
size_t friend_update_unit_notify__get_packed_size
                     (const FriendUpdateUnitNotify   *message);
size_t friend_update_unit_notify__pack
                     (const FriendUpdateUnitNotify   *message,
                      uint8_t             *out);
size_t friend_update_unit_notify__pack_to_buffer
                     (const FriendUpdateUnitNotify   *message,
                      ProtobufCBuffer     *buffer);
FriendUpdateUnitNotify *
       friend_update_unit_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_update_unit_notify__free_unpacked
                     (FriendUpdateUnitNotify *message,
                      ProtobufCAllocator *allocator);
/* ChatList methods */
void   chat_list__init
                     (ChatList         *message);
size_t chat_list__get_packed_size
                     (const ChatList   *message);
size_t chat_list__pack
                     (const ChatList   *message,
                      uint8_t             *out);
size_t chat_list__pack_to_buffer
                     (const ChatList   *message,
                      ProtobufCBuffer     *buffer);
ChatList *
       chat_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat_list__free_unpacked
                     (ChatList *message,
                      ProtobufCAllocator *allocator);
/* FriendUpdateStatusNotify methods */
void   friend_update_status_notify__init
                     (FriendUpdateStatusNotify         *message);
size_t friend_update_status_notify__get_packed_size
                     (const FriendUpdateStatusNotify   *message);
size_t friend_update_status_notify__pack
                     (const FriendUpdateStatusNotify   *message,
                      uint8_t             *out);
size_t friend_update_status_notify__pack_to_buffer
                     (const FriendUpdateStatusNotify   *message,
                      ProtobufCBuffer     *buffer);
FriendUpdateStatusNotify *
       friend_update_status_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   friend_update_status_notify__free_unpacked
                     (FriendUpdateStatusNotify *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FriendPlayerBriefData_Closure)
                 (const FriendPlayerBriefData *message,
                  void *closure_data);
typedef void (*FriendGroupData_Closure)
                 (const FriendGroupData *message,
                  void *closure_data);
typedef void (*FriendInfoAnswer_Closure)
                 (const FriendInfoAnswer *message,
                  void *closure_data);
typedef void (*FriendOperateRequest_Closure)
                 (const FriendOperateRequest *message,
                  void *closure_data);
typedef void (*FriendOperateAnswer_Closure)
                 (const FriendOperateAnswer *message,
                  void *closure_data);
typedef void (*FriendListAddData_Closure)
                 (const FriendListAddData *message,
                  void *closure_data);
typedef void (*FriendListDelData_Closure)
                 (const FriendListDelData *message,
                  void *closure_data);
typedef void (*FriendListChangeNotify_Closure)
                 (const FriendListChangeNotify *message,
                  void *closure_data);
typedef void (*FriendCreateGroupRequest_Closure)
                 (const FriendCreateGroupRequest *message,
                  void *closure_data);
typedef void (*FriendCreateGroupAnswer_Closure)
                 (const FriendCreateGroupAnswer *message,
                  void *closure_data);
typedef void (*FriendEditGroupRequest_Closure)
                 (const FriendEditGroupRequest *message,
                  void *closure_data);
typedef void (*FriendEditGroupAnswer_Closure)
                 (const FriendEditGroupAnswer *message,
                  void *closure_data);
typedef void (*FriendRemoveGroupRequest_Closure)
                 (const FriendRemoveGroupRequest *message,
                  void *closure_data);
typedef void (*FriendMovePlayerGroupRequest_Closure)
                 (const FriendMovePlayerGroupRequest *message,
                  void *closure_data);
typedef void (*FriendDealApplyRequest_Closure)
                 (const FriendDealApplyRequest *message,
                  void *closure_data);
typedef void (*FriendDealApplyAnswer_Closure)
                 (const FriendDealApplyAnswer *message,
                  void *closure_data);
typedef void (*FriendRecommendAnswer_Closure)
                 (const FriendRecommendAnswer *message,
                  void *closure_data);
typedef void (*FriendSearchRequest_Closure)
                 (const FriendSearchRequest *message,
                  void *closure_data);
typedef void (*FriendSearchAnswer_Closure)
                 (const FriendSearchAnswer *message,
                  void *closure_data);
typedef void (*FriendSendGiftRequest_Closure)
                 (const FriendSendGiftRequest *message,
                  void *closure_data);
typedef void (*FriendSendGiftAnswer_Closure)
                 (const FriendSendGiftAnswer *message,
                  void *closure_data);
typedef void (*FriendSendGiftNotify_Closure)
                 (const FriendSendGiftNotify *message,
                  void *closure_data);
typedef void (*FriendUpdateUnitNotify_Closure)
                 (const FriendUpdateUnitNotify *message,
                  void *closure_data);
typedef void (*ChatList_Closure)
                 (const ChatList *message,
                  void *closure_data);
typedef void (*FriendUpdateStatusNotify_Closure)
                 (const FriendUpdateStatusNotify *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    friend_list_type__descriptor;
extern const ProtobufCEnumDescriptor    friend_apply_deal__descriptor;
extern const ProtobufCMessageDescriptor friend_player_brief_data__descriptor;
extern const ProtobufCMessageDescriptor friend_group_data__descriptor;
extern const ProtobufCMessageDescriptor friend_info_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_operate_request__descriptor;
extern const ProtobufCMessageDescriptor friend_operate_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_list_add_data__descriptor;
extern const ProtobufCMessageDescriptor friend_list_del_data__descriptor;
extern const ProtobufCMessageDescriptor friend_list_change_notify__descriptor;
extern const ProtobufCMessageDescriptor friend_create_group_request__descriptor;
extern const ProtobufCMessageDescriptor friend_create_group_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_edit_group_request__descriptor;
extern const ProtobufCMessageDescriptor friend_edit_group_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_remove_group_request__descriptor;
extern const ProtobufCMessageDescriptor friend_move_player_group_request__descriptor;
extern const ProtobufCMessageDescriptor friend_deal_apply_request__descriptor;
extern const ProtobufCMessageDescriptor friend_deal_apply_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_recommend_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_search_request__descriptor;
extern const ProtobufCMessageDescriptor friend_search_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_send_gift_request__descriptor;
extern const ProtobufCMessageDescriptor friend_send_gift_answer__descriptor;
extern const ProtobufCMessageDescriptor friend_send_gift_notify__descriptor;
extern const ProtobufCMessageDescriptor friend_update_unit_notify__descriptor;
extern const ProtobufCMessageDescriptor chat_list__descriptor;
extern const ProtobufCMessageDescriptor friend_update_status_notify__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_friend_2eproto__INCLUDED */
