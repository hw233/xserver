/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_pvp_5fraid_2eproto__INCLUDED
#define PROTOBUF_C_pvp_5fraid_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _PvpMatchRequest PvpMatchRequest;
typedef struct _PvpMatchAnswer PvpMatchAnswer;
typedef struct _PvpScoreChangedNotify PvpScoreChangedNotify;
typedef struct _PvpRankRequest PvpRankRequest;
typedef struct _PvpRankPlayerData PvpRankPlayerData;
typedef struct _PvpRankAnswer PvpRankAnswer;
typedef struct _PvpOpenDailyBoxRequest PvpOpenDailyBoxRequest;
typedef struct _PvpOpenDailyBoxAnswer PvpOpenDailyBoxAnswer;
typedef struct _PvpOpenLevelRewardRequest PvpOpenLevelRewardRequest;
typedef struct _PvpOpenLevelRewardAnswer PvpOpenLevelRewardAnswer;
typedef struct _PvpMatchPlayerInfo PvpMatchPlayerInfo;
typedef struct _PvpMatchSuccessNotify PvpMatchSuccessNotify;
typedef struct _PvpMatchReadyNotify PvpMatchReadyNotify;
typedef struct _PvpMatchCancelNotify PvpMatchCancelNotify;
typedef struct _PvpKillNotify PvpKillNotify;
typedef struct _PvpRaidFinishPlayerInfo PvpRaidFinishPlayerInfo;
typedef struct _PvpRaidFinishedNotify PvpRaidFinishedNotify;
typedef struct _PvpRaidPraiseRequest PvpRaidPraiseRequest;
typedef struct _PvpRaidPraiseNotify PvpRaidPraiseNotify;
typedef struct _PvpRaidPlayerFallNotify PvpRaidPlayerFallNotify;
typedef struct _PvpRaidBuffGetNotify PvpRaidBuffGetNotify;
typedef struct _PvpRaidStartNotify PvpRaidStartNotify;
typedef struct _PvpRaidBuffReliveTimeNotify PvpRaidBuffReliveTimeNotify;


/* --- enums --- */


/* --- messages --- */

struct  _PvpMatchRequest
{
  ProtobufCMessage base;
  uint32_t type;
};
#define PVP_MATCH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_request__descriptor) \
    , 0 }


struct  _PvpMatchAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint64_t playerid;
  uint32_t cdtime;
};
#define PVP_MATCH_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_answer__descriptor) \
    , 0, 0, 0 }


struct  _PvpScoreChangedNotify
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t level;
  uint32_t score;
  uint32_t today_win_num;
  uint32_t max_level;
  uint32_t max_score;
  uint32_t avaliable_reward_level;
  size_t n_avaliable_box_id;
  uint32_t *avaliable_box_id;
};
#define PVP_SCORE_CHANGED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_score_changed_notify__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _PvpRankRequest
{
  ProtobufCMessage base;
  uint32_t type;
};
#define PVP_RANK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_rank_request__descriptor) \
    , 0 }


struct  _PvpRankPlayerData
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t level;
  char *name;
  uint32_t job;
};
#define PVP_RANK_PLAYER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_rank_player_data__descriptor) \
    , 0, 0, NULL, 0 }


struct  _PvpRankAnswer
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t start;
  size_t n_rank_data;
  PvpRankPlayerData **rank_data;
};
#define PVP_RANK_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_rank_answer__descriptor) \
    , 0, 0, 0,NULL }


struct  _PvpOpenDailyBoxRequest
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t box_id;
};
#define PVP_OPEN_DAILY_BOX_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_open_daily_box_request__descriptor) \
    , 0, 0 }


struct  _PvpOpenDailyBoxAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t type;
  size_t n_avaliable_box_id;
  uint32_t *avaliable_box_id;
};
#define PVP_OPEN_DAILY_BOX_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_open_daily_box_answer__descriptor) \
    , 0, 0, 0,NULL }


struct  _PvpOpenLevelRewardRequest
{
  ProtobufCMessage base;
  uint32_t type;
};
#define PVP_OPEN_LEVEL_REWARD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_open_level_reward_request__descriptor) \
    , 0 }


struct  _PvpOpenLevelRewardAnswer
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t avaliable_reward_level;
};
#define PVP_OPEN_LEVEL_REWARD_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_open_level_reward_answer__descriptor) \
    , 0, 0 }


struct  _PvpMatchPlayerInfo
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t job;
  uint32_t head_icon;
  char *name;
  uint32_t lv;
};
#define PVP_MATCH_PLAYER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_player_info__descriptor) \
    , 0, 0, 0, NULL, 0 }


struct  _PvpMatchSuccessNotify
{
  ProtobufCMessage base;
  size_t n_team1_player_info;
  PvpMatchPlayerInfo **team1_player_info;
  size_t n_team2_player_info;
  PvpMatchPlayerInfo **team2_player_info;
};
#define PVP_MATCH_SUCCESS_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_success_notify__descriptor) \
    , 0,NULL, 0,NULL }


struct  _PvpMatchReadyNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define PVP_MATCH_READY_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_ready_notify__descriptor) \
    , 0 }


struct  _PvpMatchCancelNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t result;
};
#define PVP_MATCH_CANCEL_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_match_cancel_notify__descriptor) \
    , 0, 0 }


struct  _PvpKillNotify
{
  ProtobufCMessage base;
  uint64_t dead_player_id;
  uint64_t kill_player_id;
  size_t n_assist_player_id;
  uint64_t *assist_player_id;
};
#define PVP_KILL_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_kill_notify__descriptor) \
    , 0, 0, 0,NULL }


struct  _PvpRaidFinishPlayerInfo
{
  ProtobufCMessage base;
  uint64_t player_id;
  char *name;
  uint32_t head_icon;
  uint32_t kill;
  uint32_t dead;
  uint32_t assist;
};
#define PVP_RAID_FINISH_PLAYER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_finish_player_info__descriptor) \
    , 0, NULL, 0, 0, 0, 0 }


struct  _PvpRaidFinishedNotify
{
  ProtobufCMessage base;
  uint32_t raid_result;
  uint32_t team1_kill;
  uint32_t team2_kill;
  size_t n_team1_player;
  PvpRaidFinishPlayerInfo **team1_player;
  size_t n_team2_player;
  PvpRaidFinishPlayerInfo **team2_player;
  int32_t score_changed;
  int32_t courage_gold_changed;
};
#define PVP_RAID_FINISHED_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_finished_notify__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0, 0 }


struct  _PvpRaidPraiseRequest
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define PVP_RAID_PRAISE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_praise_request__descriptor) \
    , 0 }


struct  _PvpRaidPraiseNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
  uint32_t praise_num;
};
#define PVP_RAID_PRAISE_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_praise_notify__descriptor) \
    , 0, 0 }


struct  _PvpRaidPlayerFallNotify
{
  ProtobufCMessage base;
  uint64_t player_id;
};
#define PVP_RAID_PLAYER_FALL_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_player_fall_notify__descriptor) \
    , 0 }


struct  _PvpRaidBuffGetNotify
{
  ProtobufCMessage base;
  uint32_t type;
  uint64_t player_id;
};
#define PVP_RAID_BUFF_GET_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_buff_get_notify__descriptor) \
    , 0, 0 }


struct  _PvpRaidStartNotify
{
  ProtobufCMessage base;
  uint32_t start_time;
};
#define PVP_RAID_START_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_start_notify__descriptor) \
    , 0 }


struct  _PvpRaidBuffReliveTimeNotify
{
  ProtobufCMessage base;
  uint32_t red_center_buff_relive_time;
  uint32_t blue_center_buff_relive_time;
};
#define PVP_RAID_BUFF_RELIVE_TIME_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pvp_raid_buff_relive_time_notify__descriptor) \
    , 0, 0 }


/* PvpMatchRequest methods */
void   pvp_match_request__init
                     (PvpMatchRequest         *message);
size_t pvp_match_request__get_packed_size
                     (const PvpMatchRequest   *message);
size_t pvp_match_request__pack
                     (const PvpMatchRequest   *message,
                      uint8_t             *out);
size_t pvp_match_request__pack_to_buffer
                     (const PvpMatchRequest   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchRequest *
       pvp_match_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_request__free_unpacked
                     (PvpMatchRequest *message,
                      ProtobufCAllocator *allocator);
/* PvpMatchAnswer methods */
void   pvp_match_answer__init
                     (PvpMatchAnswer         *message);
size_t pvp_match_answer__get_packed_size
                     (const PvpMatchAnswer   *message);
size_t pvp_match_answer__pack
                     (const PvpMatchAnswer   *message,
                      uint8_t             *out);
size_t pvp_match_answer__pack_to_buffer
                     (const PvpMatchAnswer   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchAnswer *
       pvp_match_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_answer__free_unpacked
                     (PvpMatchAnswer *message,
                      ProtobufCAllocator *allocator);
/* PvpScoreChangedNotify methods */
void   pvp_score_changed_notify__init
                     (PvpScoreChangedNotify         *message);
size_t pvp_score_changed_notify__get_packed_size
                     (const PvpScoreChangedNotify   *message);
size_t pvp_score_changed_notify__pack
                     (const PvpScoreChangedNotify   *message,
                      uint8_t             *out);
size_t pvp_score_changed_notify__pack_to_buffer
                     (const PvpScoreChangedNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpScoreChangedNotify *
       pvp_score_changed_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_score_changed_notify__free_unpacked
                     (PvpScoreChangedNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRankRequest methods */
void   pvp_rank_request__init
                     (PvpRankRequest         *message);
size_t pvp_rank_request__get_packed_size
                     (const PvpRankRequest   *message);
size_t pvp_rank_request__pack
                     (const PvpRankRequest   *message,
                      uint8_t             *out);
size_t pvp_rank_request__pack_to_buffer
                     (const PvpRankRequest   *message,
                      ProtobufCBuffer     *buffer);
PvpRankRequest *
       pvp_rank_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_rank_request__free_unpacked
                     (PvpRankRequest *message,
                      ProtobufCAllocator *allocator);
/* PvpRankPlayerData methods */
void   pvp_rank_player_data__init
                     (PvpRankPlayerData         *message);
size_t pvp_rank_player_data__get_packed_size
                     (const PvpRankPlayerData   *message);
size_t pvp_rank_player_data__pack
                     (const PvpRankPlayerData   *message,
                      uint8_t             *out);
size_t pvp_rank_player_data__pack_to_buffer
                     (const PvpRankPlayerData   *message,
                      ProtobufCBuffer     *buffer);
PvpRankPlayerData *
       pvp_rank_player_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_rank_player_data__free_unpacked
                     (PvpRankPlayerData *message,
                      ProtobufCAllocator *allocator);
/* PvpRankAnswer methods */
void   pvp_rank_answer__init
                     (PvpRankAnswer         *message);
size_t pvp_rank_answer__get_packed_size
                     (const PvpRankAnswer   *message);
size_t pvp_rank_answer__pack
                     (const PvpRankAnswer   *message,
                      uint8_t             *out);
size_t pvp_rank_answer__pack_to_buffer
                     (const PvpRankAnswer   *message,
                      ProtobufCBuffer     *buffer);
PvpRankAnswer *
       pvp_rank_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_rank_answer__free_unpacked
                     (PvpRankAnswer *message,
                      ProtobufCAllocator *allocator);
/* PvpOpenDailyBoxRequest methods */
void   pvp_open_daily_box_request__init
                     (PvpOpenDailyBoxRequest         *message);
size_t pvp_open_daily_box_request__get_packed_size
                     (const PvpOpenDailyBoxRequest   *message);
size_t pvp_open_daily_box_request__pack
                     (const PvpOpenDailyBoxRequest   *message,
                      uint8_t             *out);
size_t pvp_open_daily_box_request__pack_to_buffer
                     (const PvpOpenDailyBoxRequest   *message,
                      ProtobufCBuffer     *buffer);
PvpOpenDailyBoxRequest *
       pvp_open_daily_box_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_open_daily_box_request__free_unpacked
                     (PvpOpenDailyBoxRequest *message,
                      ProtobufCAllocator *allocator);
/* PvpOpenDailyBoxAnswer methods */
void   pvp_open_daily_box_answer__init
                     (PvpOpenDailyBoxAnswer         *message);
size_t pvp_open_daily_box_answer__get_packed_size
                     (const PvpOpenDailyBoxAnswer   *message);
size_t pvp_open_daily_box_answer__pack
                     (const PvpOpenDailyBoxAnswer   *message,
                      uint8_t             *out);
size_t pvp_open_daily_box_answer__pack_to_buffer
                     (const PvpOpenDailyBoxAnswer   *message,
                      ProtobufCBuffer     *buffer);
PvpOpenDailyBoxAnswer *
       pvp_open_daily_box_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_open_daily_box_answer__free_unpacked
                     (PvpOpenDailyBoxAnswer *message,
                      ProtobufCAllocator *allocator);
/* PvpOpenLevelRewardRequest methods */
void   pvp_open_level_reward_request__init
                     (PvpOpenLevelRewardRequest         *message);
size_t pvp_open_level_reward_request__get_packed_size
                     (const PvpOpenLevelRewardRequest   *message);
size_t pvp_open_level_reward_request__pack
                     (const PvpOpenLevelRewardRequest   *message,
                      uint8_t             *out);
size_t pvp_open_level_reward_request__pack_to_buffer
                     (const PvpOpenLevelRewardRequest   *message,
                      ProtobufCBuffer     *buffer);
PvpOpenLevelRewardRequest *
       pvp_open_level_reward_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_open_level_reward_request__free_unpacked
                     (PvpOpenLevelRewardRequest *message,
                      ProtobufCAllocator *allocator);
/* PvpOpenLevelRewardAnswer methods */
void   pvp_open_level_reward_answer__init
                     (PvpOpenLevelRewardAnswer         *message);
size_t pvp_open_level_reward_answer__get_packed_size
                     (const PvpOpenLevelRewardAnswer   *message);
size_t pvp_open_level_reward_answer__pack
                     (const PvpOpenLevelRewardAnswer   *message,
                      uint8_t             *out);
size_t pvp_open_level_reward_answer__pack_to_buffer
                     (const PvpOpenLevelRewardAnswer   *message,
                      ProtobufCBuffer     *buffer);
PvpOpenLevelRewardAnswer *
       pvp_open_level_reward_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_open_level_reward_answer__free_unpacked
                     (PvpOpenLevelRewardAnswer *message,
                      ProtobufCAllocator *allocator);
/* PvpMatchPlayerInfo methods */
void   pvp_match_player_info__init
                     (PvpMatchPlayerInfo         *message);
size_t pvp_match_player_info__get_packed_size
                     (const PvpMatchPlayerInfo   *message);
size_t pvp_match_player_info__pack
                     (const PvpMatchPlayerInfo   *message,
                      uint8_t             *out);
size_t pvp_match_player_info__pack_to_buffer
                     (const PvpMatchPlayerInfo   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchPlayerInfo *
       pvp_match_player_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_player_info__free_unpacked
                     (PvpMatchPlayerInfo *message,
                      ProtobufCAllocator *allocator);
/* PvpMatchSuccessNotify methods */
void   pvp_match_success_notify__init
                     (PvpMatchSuccessNotify         *message);
size_t pvp_match_success_notify__get_packed_size
                     (const PvpMatchSuccessNotify   *message);
size_t pvp_match_success_notify__pack
                     (const PvpMatchSuccessNotify   *message,
                      uint8_t             *out);
size_t pvp_match_success_notify__pack_to_buffer
                     (const PvpMatchSuccessNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchSuccessNotify *
       pvp_match_success_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_success_notify__free_unpacked
                     (PvpMatchSuccessNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpMatchReadyNotify methods */
void   pvp_match_ready_notify__init
                     (PvpMatchReadyNotify         *message);
size_t pvp_match_ready_notify__get_packed_size
                     (const PvpMatchReadyNotify   *message);
size_t pvp_match_ready_notify__pack
                     (const PvpMatchReadyNotify   *message,
                      uint8_t             *out);
size_t pvp_match_ready_notify__pack_to_buffer
                     (const PvpMatchReadyNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchReadyNotify *
       pvp_match_ready_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_ready_notify__free_unpacked
                     (PvpMatchReadyNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpMatchCancelNotify methods */
void   pvp_match_cancel_notify__init
                     (PvpMatchCancelNotify         *message);
size_t pvp_match_cancel_notify__get_packed_size
                     (const PvpMatchCancelNotify   *message);
size_t pvp_match_cancel_notify__pack
                     (const PvpMatchCancelNotify   *message,
                      uint8_t             *out);
size_t pvp_match_cancel_notify__pack_to_buffer
                     (const PvpMatchCancelNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpMatchCancelNotify *
       pvp_match_cancel_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_match_cancel_notify__free_unpacked
                     (PvpMatchCancelNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpKillNotify methods */
void   pvp_kill_notify__init
                     (PvpKillNotify         *message);
size_t pvp_kill_notify__get_packed_size
                     (const PvpKillNotify   *message);
size_t pvp_kill_notify__pack
                     (const PvpKillNotify   *message,
                      uint8_t             *out);
size_t pvp_kill_notify__pack_to_buffer
                     (const PvpKillNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpKillNotify *
       pvp_kill_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_kill_notify__free_unpacked
                     (PvpKillNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidFinishPlayerInfo methods */
void   pvp_raid_finish_player_info__init
                     (PvpRaidFinishPlayerInfo         *message);
size_t pvp_raid_finish_player_info__get_packed_size
                     (const PvpRaidFinishPlayerInfo   *message);
size_t pvp_raid_finish_player_info__pack
                     (const PvpRaidFinishPlayerInfo   *message,
                      uint8_t             *out);
size_t pvp_raid_finish_player_info__pack_to_buffer
                     (const PvpRaidFinishPlayerInfo   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidFinishPlayerInfo *
       pvp_raid_finish_player_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_finish_player_info__free_unpacked
                     (PvpRaidFinishPlayerInfo *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidFinishedNotify methods */
void   pvp_raid_finished_notify__init
                     (PvpRaidFinishedNotify         *message);
size_t pvp_raid_finished_notify__get_packed_size
                     (const PvpRaidFinishedNotify   *message);
size_t pvp_raid_finished_notify__pack
                     (const PvpRaidFinishedNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_finished_notify__pack_to_buffer
                     (const PvpRaidFinishedNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidFinishedNotify *
       pvp_raid_finished_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_finished_notify__free_unpacked
                     (PvpRaidFinishedNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidPraiseRequest methods */
void   pvp_raid_praise_request__init
                     (PvpRaidPraiseRequest         *message);
size_t pvp_raid_praise_request__get_packed_size
                     (const PvpRaidPraiseRequest   *message);
size_t pvp_raid_praise_request__pack
                     (const PvpRaidPraiseRequest   *message,
                      uint8_t             *out);
size_t pvp_raid_praise_request__pack_to_buffer
                     (const PvpRaidPraiseRequest   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidPraiseRequest *
       pvp_raid_praise_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_praise_request__free_unpacked
                     (PvpRaidPraiseRequest *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidPraiseNotify methods */
void   pvp_raid_praise_notify__init
                     (PvpRaidPraiseNotify         *message);
size_t pvp_raid_praise_notify__get_packed_size
                     (const PvpRaidPraiseNotify   *message);
size_t pvp_raid_praise_notify__pack
                     (const PvpRaidPraiseNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_praise_notify__pack_to_buffer
                     (const PvpRaidPraiseNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidPraiseNotify *
       pvp_raid_praise_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_praise_notify__free_unpacked
                     (PvpRaidPraiseNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidPlayerFallNotify methods */
void   pvp_raid_player_fall_notify__init
                     (PvpRaidPlayerFallNotify         *message);
size_t pvp_raid_player_fall_notify__get_packed_size
                     (const PvpRaidPlayerFallNotify   *message);
size_t pvp_raid_player_fall_notify__pack
                     (const PvpRaidPlayerFallNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_player_fall_notify__pack_to_buffer
                     (const PvpRaidPlayerFallNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidPlayerFallNotify *
       pvp_raid_player_fall_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_player_fall_notify__free_unpacked
                     (PvpRaidPlayerFallNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidBuffGetNotify methods */
void   pvp_raid_buff_get_notify__init
                     (PvpRaidBuffGetNotify         *message);
size_t pvp_raid_buff_get_notify__get_packed_size
                     (const PvpRaidBuffGetNotify   *message);
size_t pvp_raid_buff_get_notify__pack
                     (const PvpRaidBuffGetNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_buff_get_notify__pack_to_buffer
                     (const PvpRaidBuffGetNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidBuffGetNotify *
       pvp_raid_buff_get_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_buff_get_notify__free_unpacked
                     (PvpRaidBuffGetNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidStartNotify methods */
void   pvp_raid_start_notify__init
                     (PvpRaidStartNotify         *message);
size_t pvp_raid_start_notify__get_packed_size
                     (const PvpRaidStartNotify   *message);
size_t pvp_raid_start_notify__pack
                     (const PvpRaidStartNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_start_notify__pack_to_buffer
                     (const PvpRaidStartNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidStartNotify *
       pvp_raid_start_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_start_notify__free_unpacked
                     (PvpRaidStartNotify *message,
                      ProtobufCAllocator *allocator);
/* PvpRaidBuffReliveTimeNotify methods */
void   pvp_raid_buff_relive_time_notify__init
                     (PvpRaidBuffReliveTimeNotify         *message);
size_t pvp_raid_buff_relive_time_notify__get_packed_size
                     (const PvpRaidBuffReliveTimeNotify   *message);
size_t pvp_raid_buff_relive_time_notify__pack
                     (const PvpRaidBuffReliveTimeNotify   *message,
                      uint8_t             *out);
size_t pvp_raid_buff_relive_time_notify__pack_to_buffer
                     (const PvpRaidBuffReliveTimeNotify   *message,
                      ProtobufCBuffer     *buffer);
PvpRaidBuffReliveTimeNotify *
       pvp_raid_buff_relive_time_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pvp_raid_buff_relive_time_notify__free_unpacked
                     (PvpRaidBuffReliveTimeNotify *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PvpMatchRequest_Closure)
                 (const PvpMatchRequest *message,
                  void *closure_data);
typedef void (*PvpMatchAnswer_Closure)
                 (const PvpMatchAnswer *message,
                  void *closure_data);
typedef void (*PvpScoreChangedNotify_Closure)
                 (const PvpScoreChangedNotify *message,
                  void *closure_data);
typedef void (*PvpRankRequest_Closure)
                 (const PvpRankRequest *message,
                  void *closure_data);
typedef void (*PvpRankPlayerData_Closure)
                 (const PvpRankPlayerData *message,
                  void *closure_data);
typedef void (*PvpRankAnswer_Closure)
                 (const PvpRankAnswer *message,
                  void *closure_data);
typedef void (*PvpOpenDailyBoxRequest_Closure)
                 (const PvpOpenDailyBoxRequest *message,
                  void *closure_data);
typedef void (*PvpOpenDailyBoxAnswer_Closure)
                 (const PvpOpenDailyBoxAnswer *message,
                  void *closure_data);
typedef void (*PvpOpenLevelRewardRequest_Closure)
                 (const PvpOpenLevelRewardRequest *message,
                  void *closure_data);
typedef void (*PvpOpenLevelRewardAnswer_Closure)
                 (const PvpOpenLevelRewardAnswer *message,
                  void *closure_data);
typedef void (*PvpMatchPlayerInfo_Closure)
                 (const PvpMatchPlayerInfo *message,
                  void *closure_data);
typedef void (*PvpMatchSuccessNotify_Closure)
                 (const PvpMatchSuccessNotify *message,
                  void *closure_data);
typedef void (*PvpMatchReadyNotify_Closure)
                 (const PvpMatchReadyNotify *message,
                  void *closure_data);
typedef void (*PvpMatchCancelNotify_Closure)
                 (const PvpMatchCancelNotify *message,
                  void *closure_data);
typedef void (*PvpKillNotify_Closure)
                 (const PvpKillNotify *message,
                  void *closure_data);
typedef void (*PvpRaidFinishPlayerInfo_Closure)
                 (const PvpRaidFinishPlayerInfo *message,
                  void *closure_data);
typedef void (*PvpRaidFinishedNotify_Closure)
                 (const PvpRaidFinishedNotify *message,
                  void *closure_data);
typedef void (*PvpRaidPraiseRequest_Closure)
                 (const PvpRaidPraiseRequest *message,
                  void *closure_data);
typedef void (*PvpRaidPraiseNotify_Closure)
                 (const PvpRaidPraiseNotify *message,
                  void *closure_data);
typedef void (*PvpRaidPlayerFallNotify_Closure)
                 (const PvpRaidPlayerFallNotify *message,
                  void *closure_data);
typedef void (*PvpRaidBuffGetNotify_Closure)
                 (const PvpRaidBuffGetNotify *message,
                  void *closure_data);
typedef void (*PvpRaidStartNotify_Closure)
                 (const PvpRaidStartNotify *message,
                  void *closure_data);
typedef void (*PvpRaidBuffReliveTimeNotify_Closure)
                 (const PvpRaidBuffReliveTimeNotify *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pvp_match_request__descriptor;
extern const ProtobufCMessageDescriptor pvp_match_answer__descriptor;
extern const ProtobufCMessageDescriptor pvp_score_changed_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_rank_request__descriptor;
extern const ProtobufCMessageDescriptor pvp_rank_player_data__descriptor;
extern const ProtobufCMessageDescriptor pvp_rank_answer__descriptor;
extern const ProtobufCMessageDescriptor pvp_open_daily_box_request__descriptor;
extern const ProtobufCMessageDescriptor pvp_open_daily_box_answer__descriptor;
extern const ProtobufCMessageDescriptor pvp_open_level_reward_request__descriptor;
extern const ProtobufCMessageDescriptor pvp_open_level_reward_answer__descriptor;
extern const ProtobufCMessageDescriptor pvp_match_player_info__descriptor;
extern const ProtobufCMessageDescriptor pvp_match_success_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_match_ready_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_match_cancel_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_kill_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_finish_player_info__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_finished_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_praise_request__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_praise_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_player_fall_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_buff_get_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_start_notify__descriptor;
extern const ProtobufCMessageDescriptor pvp_raid_buff_relive_time_notify__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_pvp_5fraid_2eproto__INCLUDED */
