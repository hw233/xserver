/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_bag_2eproto__INCLUDED
#define PROTOBUF_C_bag_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "comm_message.pb-c.h"

typedef struct _BagInfoAnswer BagInfoAnswer;
typedef struct _BagUnlockGridAnswer BagUnlockGridAnswer;
typedef struct _BagSellRequest BagSellRequest;
typedef struct _BagSellAnswer BagSellAnswer;
typedef struct _BagUseRequest BagUseRequest;
typedef struct _BagUseAnswer BagUseAnswer;
typedef struct _BagStackRequest BagStackRequest;
typedef struct _ShowItemRequest ShowItemRequest;
typedef struct _ShowItemAnswer ShowItemAnswer;
typedef struct _ShowItemData ShowItemData;


/* --- enums --- */


/* --- messages --- */

struct  _BagInfoAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t curgridnum;
  uint32_t totalgridnum;
  size_t n_grids;
  BagGrid **grids;
};
#define BAG_INFO_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_info_answer__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _BagUnlockGridAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t curgridnum;
  uint32_t totalgridnum;
};
#define BAG_UNLOCK_GRID_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_unlock_grid_answer__descriptor) \
    , 0, 0, 0 }


struct  _BagSellRequest
{
  ProtobufCMessage base;
  uint32_t index;
  uint32_t num;
};
#define BAG_SELL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_sell_request__descriptor) \
    , 0, 0 }


struct  _BagSellAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  ItemData *sellitem;
  AttrData *gainmoney;
};
#define BAG_SELL_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_sell_answer__descriptor) \
    , 0, NULL, NULL }


struct  _BagUseRequest
{
  ProtobufCMessage base;
  uint32_t index;
  uint32_t use_all;
};
#define BAG_USE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_use_request__descriptor) \
    , 0, 0 }


struct  _BagUseAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t item_id;
  uint32_t cd;
  size_t n_itemlist;
  ItemData **itemlist;
};
#define BAG_USE_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_use_answer__descriptor) \
    , 0, 0, 0, 0,NULL }


struct  _BagStackRequest
{
  ProtobufCMessage base;
  uint32_t id;
};
#define BAG_STACK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bag_stack_request__descriptor) \
    , 0 }


struct  _ShowItemRequest
{
  ProtobufCMessage base;
  uint32_t index;
};
#define SHOW_ITEM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&show_item_request__descriptor) \
    , 0 }


struct  _ShowItemAnswer
{
  ProtobufCMessage base;
  uint32_t key;
};
#define SHOW_ITEM_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&show_item_answer__descriptor) \
    , 0 }


struct  _ShowItemData
{
  ProtobufCMessage base;
  uint32_t id;
};
#define SHOW_ITEM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&show_item_data__descriptor) \
    , 0 }


/* BagInfoAnswer methods */
void   bag_info_answer__init
                     (BagInfoAnswer         *message);
size_t bag_info_answer__get_packed_size
                     (const BagInfoAnswer   *message);
size_t bag_info_answer__pack
                     (const BagInfoAnswer   *message,
                      uint8_t             *out);
size_t bag_info_answer__pack_to_buffer
                     (const BagInfoAnswer   *message,
                      ProtobufCBuffer     *buffer);
BagInfoAnswer *
       bag_info_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_info_answer__free_unpacked
                     (BagInfoAnswer *message,
                      ProtobufCAllocator *allocator);
/* BagUnlockGridAnswer methods */
void   bag_unlock_grid_answer__init
                     (BagUnlockGridAnswer         *message);
size_t bag_unlock_grid_answer__get_packed_size
                     (const BagUnlockGridAnswer   *message);
size_t bag_unlock_grid_answer__pack
                     (const BagUnlockGridAnswer   *message,
                      uint8_t             *out);
size_t bag_unlock_grid_answer__pack_to_buffer
                     (const BagUnlockGridAnswer   *message,
                      ProtobufCBuffer     *buffer);
BagUnlockGridAnswer *
       bag_unlock_grid_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_unlock_grid_answer__free_unpacked
                     (BagUnlockGridAnswer *message,
                      ProtobufCAllocator *allocator);
/* BagSellRequest methods */
void   bag_sell_request__init
                     (BagSellRequest         *message);
size_t bag_sell_request__get_packed_size
                     (const BagSellRequest   *message);
size_t bag_sell_request__pack
                     (const BagSellRequest   *message,
                      uint8_t             *out);
size_t bag_sell_request__pack_to_buffer
                     (const BagSellRequest   *message,
                      ProtobufCBuffer     *buffer);
BagSellRequest *
       bag_sell_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_sell_request__free_unpacked
                     (BagSellRequest *message,
                      ProtobufCAllocator *allocator);
/* BagSellAnswer methods */
void   bag_sell_answer__init
                     (BagSellAnswer         *message);
size_t bag_sell_answer__get_packed_size
                     (const BagSellAnswer   *message);
size_t bag_sell_answer__pack
                     (const BagSellAnswer   *message,
                      uint8_t             *out);
size_t bag_sell_answer__pack_to_buffer
                     (const BagSellAnswer   *message,
                      ProtobufCBuffer     *buffer);
BagSellAnswer *
       bag_sell_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_sell_answer__free_unpacked
                     (BagSellAnswer *message,
                      ProtobufCAllocator *allocator);
/* BagUseRequest methods */
void   bag_use_request__init
                     (BagUseRequest         *message);
size_t bag_use_request__get_packed_size
                     (const BagUseRequest   *message);
size_t bag_use_request__pack
                     (const BagUseRequest   *message,
                      uint8_t             *out);
size_t bag_use_request__pack_to_buffer
                     (const BagUseRequest   *message,
                      ProtobufCBuffer     *buffer);
BagUseRequest *
       bag_use_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_use_request__free_unpacked
                     (BagUseRequest *message,
                      ProtobufCAllocator *allocator);
/* BagUseAnswer methods */
void   bag_use_answer__init
                     (BagUseAnswer         *message);
size_t bag_use_answer__get_packed_size
                     (const BagUseAnswer   *message);
size_t bag_use_answer__pack
                     (const BagUseAnswer   *message,
                      uint8_t             *out);
size_t bag_use_answer__pack_to_buffer
                     (const BagUseAnswer   *message,
                      ProtobufCBuffer     *buffer);
BagUseAnswer *
       bag_use_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_use_answer__free_unpacked
                     (BagUseAnswer *message,
                      ProtobufCAllocator *allocator);
/* BagStackRequest methods */
void   bag_stack_request__init
                     (BagStackRequest         *message);
size_t bag_stack_request__get_packed_size
                     (const BagStackRequest   *message);
size_t bag_stack_request__pack
                     (const BagStackRequest   *message,
                      uint8_t             *out);
size_t bag_stack_request__pack_to_buffer
                     (const BagStackRequest   *message,
                      ProtobufCBuffer     *buffer);
BagStackRequest *
       bag_stack_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bag_stack_request__free_unpacked
                     (BagStackRequest *message,
                      ProtobufCAllocator *allocator);
/* ShowItemRequest methods */
void   show_item_request__init
                     (ShowItemRequest         *message);
size_t show_item_request__get_packed_size
                     (const ShowItemRequest   *message);
size_t show_item_request__pack
                     (const ShowItemRequest   *message,
                      uint8_t             *out);
size_t show_item_request__pack_to_buffer
                     (const ShowItemRequest   *message,
                      ProtobufCBuffer     *buffer);
ShowItemRequest *
       show_item_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   show_item_request__free_unpacked
                     (ShowItemRequest *message,
                      ProtobufCAllocator *allocator);
/* ShowItemAnswer methods */
void   show_item_answer__init
                     (ShowItemAnswer         *message);
size_t show_item_answer__get_packed_size
                     (const ShowItemAnswer   *message);
size_t show_item_answer__pack
                     (const ShowItemAnswer   *message,
                      uint8_t             *out);
size_t show_item_answer__pack_to_buffer
                     (const ShowItemAnswer   *message,
                      ProtobufCBuffer     *buffer);
ShowItemAnswer *
       show_item_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   show_item_answer__free_unpacked
                     (ShowItemAnswer *message,
                      ProtobufCAllocator *allocator);
/* ShowItemData methods */
void   show_item_data__init
                     (ShowItemData         *message);
size_t show_item_data__get_packed_size
                     (const ShowItemData   *message);
size_t show_item_data__pack
                     (const ShowItemData   *message,
                      uint8_t             *out);
size_t show_item_data__pack_to_buffer
                     (const ShowItemData   *message,
                      ProtobufCBuffer     *buffer);
ShowItemData *
       show_item_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   show_item_data__free_unpacked
                     (ShowItemData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BagInfoAnswer_Closure)
                 (const BagInfoAnswer *message,
                  void *closure_data);
typedef void (*BagUnlockGridAnswer_Closure)
                 (const BagUnlockGridAnswer *message,
                  void *closure_data);
typedef void (*BagSellRequest_Closure)
                 (const BagSellRequest *message,
                  void *closure_data);
typedef void (*BagSellAnswer_Closure)
                 (const BagSellAnswer *message,
                  void *closure_data);
typedef void (*BagUseRequest_Closure)
                 (const BagUseRequest *message,
                  void *closure_data);
typedef void (*BagUseAnswer_Closure)
                 (const BagUseAnswer *message,
                  void *closure_data);
typedef void (*BagStackRequest_Closure)
                 (const BagStackRequest *message,
                  void *closure_data);
typedef void (*ShowItemRequest_Closure)
                 (const ShowItemRequest *message,
                  void *closure_data);
typedef void (*ShowItemAnswer_Closure)
                 (const ShowItemAnswer *message,
                  void *closure_data);
typedef void (*ShowItemData_Closure)
                 (const ShowItemData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor bag_info_answer__descriptor;
extern const ProtobufCMessageDescriptor bag_unlock_grid_answer__descriptor;
extern const ProtobufCMessageDescriptor bag_sell_request__descriptor;
extern const ProtobufCMessageDescriptor bag_sell_answer__descriptor;
extern const ProtobufCMessageDescriptor bag_use_request__descriptor;
extern const ProtobufCMessageDescriptor bag_use_answer__descriptor;
extern const ProtobufCMessageDescriptor bag_stack_request__descriptor;
extern const ProtobufCMessageDescriptor show_item_request__descriptor;
extern const ProtobufCMessageDescriptor show_item_answer__descriptor;
extern const ProtobufCMessageDescriptor show_item_data__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_bag_2eproto__INCLUDED */
