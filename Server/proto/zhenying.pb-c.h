/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_zhenying_2eproto__INCLUDED
#define PROTOBUF_C_zhenying_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _ChoseZhenying ChoseZhenying;
typedef struct _AnsChoseZhenying AnsChoseZhenying;
typedef struct _ZhenyingPower ZhenyingPower;
typedef struct _ZhenyingInfo ZhenyingInfo;
typedef struct _ZhenyingExp ZhenyingExp;
typedef struct _ZhenyingTeamInfo ZhenyingTeamInfo;
typedef struct _ZhenyingTeam ZhenyingTeam;
typedef struct _ZhenyingTaskProcess ZhenyingTaskProcess;
typedef struct _NewZhenyingTask NewZhenyingTask;
typedef struct _ZhenyingLineInfo ZhenyingLineInfo;
typedef struct _ZhenyingLine ZhenyingLine;


/* --- enums --- */

typedef enum _ZHENYINGTYPE {
  ZHENYING__TYPE__NULL = 0,
  ZHENYING__TYPE__FULONGGUO = 1,
  ZHENYING__TYPE__WANYAOGU = 2
} ZHENYINGTYPE;
typedef enum _ZHENYINGTASKAWARDSTATE {
  ZHENYING__TASK__AWARD__STATE__UNACHIVE = 0,
  ZHENYING__TASK__AWARD__STATE__COMPLETE = 1,
  ZHENYING__TASK__AWARD__STATE__AWARD = 2
} ZHENYINGTASKAWARDSTATE;
typedef enum _ZHENYINGLINESTATE {
  ZHENYING__LINE__STATE__NORMAL = 0,
  ZHENYING__LINE__STATE__FULL = 1
} ZHENYINGLINESTATE;

/* --- messages --- */

struct  _ChoseZhenying
{
  ProtobufCMessage base;
  int32_t zhenying;
};
#define CHOSE_ZHENYING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chose_zhenying__descriptor) \
    , 0 }


struct  _AnsChoseZhenying
{
  ProtobufCMessage base;
  int32_t zhenying;
  int32_t ret;
};
#define ANS_CHOSE_ZHENYING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ans_chose_zhenying__descriptor) \
    , 0, 0 }


struct  _ZhenyingPower
{
  ProtobufCMessage base;
  uint32_t power_fulongguo;
  uint32_t power_wanyaogu;
  uint32_t man_fulongguo;
  uint32_t man_wanyaogu;
  uint64_t power_man;
  char *power_name;
  char *power_guild;
};
#define ZHENYING_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_power__descriptor) \
    , 0, 0, 0, 0, 0, NULL, NULL }


struct  _ZhenyingInfo
{
  ProtobufCMessage base;
  int32_t zhenying;
  uint32_t level;
  uint32_t exp;
  uint32_t task;
  uint32_t task_type;
  uint32_t task_num;
  uint32_t step;
  uint32_t exp_day;
  uint32_t free_change;
  uint32_t task_award_state;
};
#define ZHENYING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ZhenyingExp
{
  ProtobufCMessage base;
  uint32_t exp;
  uint32_t exp_day;
  uint32_t level;
};
#define ZHENYING_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_exp__descriptor) \
    , 0, 0, 0 }


struct  _ZhenyingTeamInfo
{
  ProtobufCMessage base;
  uint64_t playerid;
  char *name;
  uint32_t kill;
  uint32_t death;
  uint32_t assist;
  uint32_t score;
  uint32_t job;
  uint32_t lv;
};
#define ZHENYING_TEAM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_team_info__descriptor) \
    , 0, NULL, 0, 0, 0, 0, 0, 0 }


struct  _ZhenyingTeam
{
  ProtobufCMessage base;
  size_t n_mem;
  ZhenyingTeamInfo **mem;
};
#define ZHENYING_TEAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_team__descriptor) \
    , 0,NULL }


struct  _ZhenyingTaskProcess
{
  ProtobufCMessage base;
  uint32_t task_num;
  uint32_t task_award_state;
};
#define ZHENYING_TASK_PROCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_task_process__descriptor) \
    , 0, 0 }


struct  _NewZhenyingTask
{
  ProtobufCMessage base;
  uint32_t task;
  uint32_t task_type;
  uint32_t task_num;
};
#define NEW_ZHENYING_TASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&new_zhenying_task__descriptor) \
    , 0, 0, 0 }


struct  _ZhenyingLineInfo
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t man;
  int32_t state;
};
#define ZHENYING_LINE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_line_info__descriptor) \
    , 0, 0, 0 }


struct  _ZhenyingLine
{
  ProtobufCMessage base;
  uint32_t my_line;
  size_t n_all_line;
  ZhenyingLineInfo **all_line;
};
#define ZHENYING_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&zhenying_line__descriptor) \
    , 0, 0,NULL }


/* ChoseZhenying methods */
void   chose_zhenying__init
                     (ChoseZhenying         *message);
size_t chose_zhenying__get_packed_size
                     (const ChoseZhenying   *message);
size_t chose_zhenying__pack
                     (const ChoseZhenying   *message,
                      uint8_t             *out);
size_t chose_zhenying__pack_to_buffer
                     (const ChoseZhenying   *message,
                      ProtobufCBuffer     *buffer);
ChoseZhenying *
       chose_zhenying__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chose_zhenying__free_unpacked
                     (ChoseZhenying *message,
                      ProtobufCAllocator *allocator);
/* AnsChoseZhenying methods */
void   ans_chose_zhenying__init
                     (AnsChoseZhenying         *message);
size_t ans_chose_zhenying__get_packed_size
                     (const AnsChoseZhenying   *message);
size_t ans_chose_zhenying__pack
                     (const AnsChoseZhenying   *message,
                      uint8_t             *out);
size_t ans_chose_zhenying__pack_to_buffer
                     (const AnsChoseZhenying   *message,
                      ProtobufCBuffer     *buffer);
AnsChoseZhenying *
       ans_chose_zhenying__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ans_chose_zhenying__free_unpacked
                     (AnsChoseZhenying *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingPower methods */
void   zhenying_power__init
                     (ZhenyingPower         *message);
size_t zhenying_power__get_packed_size
                     (const ZhenyingPower   *message);
size_t zhenying_power__pack
                     (const ZhenyingPower   *message,
                      uint8_t             *out);
size_t zhenying_power__pack_to_buffer
                     (const ZhenyingPower   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingPower *
       zhenying_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_power__free_unpacked
                     (ZhenyingPower *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingInfo methods */
void   zhenying_info__init
                     (ZhenyingInfo         *message);
size_t zhenying_info__get_packed_size
                     (const ZhenyingInfo   *message);
size_t zhenying_info__pack
                     (const ZhenyingInfo   *message,
                      uint8_t             *out);
size_t zhenying_info__pack_to_buffer
                     (const ZhenyingInfo   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingInfo *
       zhenying_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_info__free_unpacked
                     (ZhenyingInfo *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingExp methods */
void   zhenying_exp__init
                     (ZhenyingExp         *message);
size_t zhenying_exp__get_packed_size
                     (const ZhenyingExp   *message);
size_t zhenying_exp__pack
                     (const ZhenyingExp   *message,
                      uint8_t             *out);
size_t zhenying_exp__pack_to_buffer
                     (const ZhenyingExp   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingExp *
       zhenying_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_exp__free_unpacked
                     (ZhenyingExp *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingTeamInfo methods */
void   zhenying_team_info__init
                     (ZhenyingTeamInfo         *message);
size_t zhenying_team_info__get_packed_size
                     (const ZhenyingTeamInfo   *message);
size_t zhenying_team_info__pack
                     (const ZhenyingTeamInfo   *message,
                      uint8_t             *out);
size_t zhenying_team_info__pack_to_buffer
                     (const ZhenyingTeamInfo   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingTeamInfo *
       zhenying_team_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_team_info__free_unpacked
                     (ZhenyingTeamInfo *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingTeam methods */
void   zhenying_team__init
                     (ZhenyingTeam         *message);
size_t zhenying_team__get_packed_size
                     (const ZhenyingTeam   *message);
size_t zhenying_team__pack
                     (const ZhenyingTeam   *message,
                      uint8_t             *out);
size_t zhenying_team__pack_to_buffer
                     (const ZhenyingTeam   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingTeam *
       zhenying_team__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_team__free_unpacked
                     (ZhenyingTeam *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingTaskProcess methods */
void   zhenying_task_process__init
                     (ZhenyingTaskProcess         *message);
size_t zhenying_task_process__get_packed_size
                     (const ZhenyingTaskProcess   *message);
size_t zhenying_task_process__pack
                     (const ZhenyingTaskProcess   *message,
                      uint8_t             *out);
size_t zhenying_task_process__pack_to_buffer
                     (const ZhenyingTaskProcess   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingTaskProcess *
       zhenying_task_process__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_task_process__free_unpacked
                     (ZhenyingTaskProcess *message,
                      ProtobufCAllocator *allocator);
/* NewZhenyingTask methods */
void   new_zhenying_task__init
                     (NewZhenyingTask         *message);
size_t new_zhenying_task__get_packed_size
                     (const NewZhenyingTask   *message);
size_t new_zhenying_task__pack
                     (const NewZhenyingTask   *message,
                      uint8_t             *out);
size_t new_zhenying_task__pack_to_buffer
                     (const NewZhenyingTask   *message,
                      ProtobufCBuffer     *buffer);
NewZhenyingTask *
       new_zhenying_task__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   new_zhenying_task__free_unpacked
                     (NewZhenyingTask *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingLineInfo methods */
void   zhenying_line_info__init
                     (ZhenyingLineInfo         *message);
size_t zhenying_line_info__get_packed_size
                     (const ZhenyingLineInfo   *message);
size_t zhenying_line_info__pack
                     (const ZhenyingLineInfo   *message,
                      uint8_t             *out);
size_t zhenying_line_info__pack_to_buffer
                     (const ZhenyingLineInfo   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingLineInfo *
       zhenying_line_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_line_info__free_unpacked
                     (ZhenyingLineInfo *message,
                      ProtobufCAllocator *allocator);
/* ZhenyingLine methods */
void   zhenying_line__init
                     (ZhenyingLine         *message);
size_t zhenying_line__get_packed_size
                     (const ZhenyingLine   *message);
size_t zhenying_line__pack
                     (const ZhenyingLine   *message,
                      uint8_t             *out);
size_t zhenying_line__pack_to_buffer
                     (const ZhenyingLine   *message,
                      ProtobufCBuffer     *buffer);
ZhenyingLine *
       zhenying_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   zhenying_line__free_unpacked
                     (ZhenyingLine *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ChoseZhenying_Closure)
                 (const ChoseZhenying *message,
                  void *closure_data);
typedef void (*AnsChoseZhenying_Closure)
                 (const AnsChoseZhenying *message,
                  void *closure_data);
typedef void (*ZhenyingPower_Closure)
                 (const ZhenyingPower *message,
                  void *closure_data);
typedef void (*ZhenyingInfo_Closure)
                 (const ZhenyingInfo *message,
                  void *closure_data);
typedef void (*ZhenyingExp_Closure)
                 (const ZhenyingExp *message,
                  void *closure_data);
typedef void (*ZhenyingTeamInfo_Closure)
                 (const ZhenyingTeamInfo *message,
                  void *closure_data);
typedef void (*ZhenyingTeam_Closure)
                 (const ZhenyingTeam *message,
                  void *closure_data);
typedef void (*ZhenyingTaskProcess_Closure)
                 (const ZhenyingTaskProcess *message,
                  void *closure_data);
typedef void (*NewZhenyingTask_Closure)
                 (const NewZhenyingTask *message,
                  void *closure_data);
typedef void (*ZhenyingLineInfo_Closure)
                 (const ZhenyingLineInfo *message,
                  void *closure_data);
typedef void (*ZhenyingLine_Closure)
                 (const ZhenyingLine *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    zhenying__type__descriptor;
extern const ProtobufCEnumDescriptor    zhenying__task__award__state__descriptor;
extern const ProtobufCEnumDescriptor    zhenying__line__state__descriptor;
extern const ProtobufCMessageDescriptor chose_zhenying__descriptor;
extern const ProtobufCMessageDescriptor ans_chose_zhenying__descriptor;
extern const ProtobufCMessageDescriptor zhenying_power__descriptor;
extern const ProtobufCMessageDescriptor zhenying_info__descriptor;
extern const ProtobufCMessageDescriptor zhenying_exp__descriptor;
extern const ProtobufCMessageDescriptor zhenying_team_info__descriptor;
extern const ProtobufCMessageDescriptor zhenying_team__descriptor;
extern const ProtobufCMessageDescriptor zhenying_task_process__descriptor;
extern const ProtobufCMessageDescriptor new_zhenying_task__descriptor;
extern const ProtobufCMessageDescriptor zhenying_line_info__descriptor;
extern const ProtobufCMessageDescriptor zhenying_line__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_zhenying_2eproto__INCLUDED */
