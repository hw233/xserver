/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_activity_2eproto__INCLUDED
#define PROTOBUF_C_activity_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _DailyActivityData DailyActivityData;
typedef struct _ChivalryActivityData ChivalryActivityData;
typedef struct _ActivityInfoNotify ActivityInfoNotify;
typedef struct _ActiveRewardRequest ActiveRewardRequest;
typedef struct _ActiveRewardAnswer ActiveRewardAnswer;


/* --- enums --- */


/* --- messages --- */

struct  _DailyActivityData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t count;
};
#define DAILY_ACTIVITY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&daily_activity_data__descriptor) \
    , 0, 0 }


struct  _ChivalryActivityData
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t val;
};
#define CHIVALRY_ACTIVITY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chivalry_activity_data__descriptor) \
    , 0, 0 }


struct  _ActivityInfoNotify
{
  ProtobufCMessage base;
  size_t n_dailys;
  DailyActivityData **dailys;
  size_t n_chivalrys;
  ChivalryActivityData **chivalrys;
  size_t n_activerewardids;
  uint32_t *activerewardids;
};
#define ACTIVITY_INFO_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&activity_info_notify__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _ActiveRewardRequest
{
  ProtobufCMessage base;
  uint32_t rewardid;
};
#define ACTIVE_REWARD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&active_reward_request__descriptor) \
    , 0 }


struct  _ActiveRewardAnswer
{
  ProtobufCMessage base;
  uint32_t result;
  uint32_t rewardid;
};
#define ACTIVE_REWARD_ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&active_reward_answer__descriptor) \
    , 0, 0 }


/* DailyActivityData methods */
void   daily_activity_data__init
                     (DailyActivityData         *message);
size_t daily_activity_data__get_packed_size
                     (const DailyActivityData   *message);
size_t daily_activity_data__pack
                     (const DailyActivityData   *message,
                      uint8_t             *out);
size_t daily_activity_data__pack_to_buffer
                     (const DailyActivityData   *message,
                      ProtobufCBuffer     *buffer);
DailyActivityData *
       daily_activity_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   daily_activity_data__free_unpacked
                     (DailyActivityData *message,
                      ProtobufCAllocator *allocator);
/* ChivalryActivityData methods */
void   chivalry_activity_data__init
                     (ChivalryActivityData         *message);
size_t chivalry_activity_data__get_packed_size
                     (const ChivalryActivityData   *message);
size_t chivalry_activity_data__pack
                     (const ChivalryActivityData   *message,
                      uint8_t             *out);
size_t chivalry_activity_data__pack_to_buffer
                     (const ChivalryActivityData   *message,
                      ProtobufCBuffer     *buffer);
ChivalryActivityData *
       chivalry_activity_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chivalry_activity_data__free_unpacked
                     (ChivalryActivityData *message,
                      ProtobufCAllocator *allocator);
/* ActivityInfoNotify methods */
void   activity_info_notify__init
                     (ActivityInfoNotify         *message);
size_t activity_info_notify__get_packed_size
                     (const ActivityInfoNotify   *message);
size_t activity_info_notify__pack
                     (const ActivityInfoNotify   *message,
                      uint8_t             *out);
size_t activity_info_notify__pack_to_buffer
                     (const ActivityInfoNotify   *message,
                      ProtobufCBuffer     *buffer);
ActivityInfoNotify *
       activity_info_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   activity_info_notify__free_unpacked
                     (ActivityInfoNotify *message,
                      ProtobufCAllocator *allocator);
/* ActiveRewardRequest methods */
void   active_reward_request__init
                     (ActiveRewardRequest         *message);
size_t active_reward_request__get_packed_size
                     (const ActiveRewardRequest   *message);
size_t active_reward_request__pack
                     (const ActiveRewardRequest   *message,
                      uint8_t             *out);
size_t active_reward_request__pack_to_buffer
                     (const ActiveRewardRequest   *message,
                      ProtobufCBuffer     *buffer);
ActiveRewardRequest *
       active_reward_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   active_reward_request__free_unpacked
                     (ActiveRewardRequest *message,
                      ProtobufCAllocator *allocator);
/* ActiveRewardAnswer methods */
void   active_reward_answer__init
                     (ActiveRewardAnswer         *message);
size_t active_reward_answer__get_packed_size
                     (const ActiveRewardAnswer   *message);
size_t active_reward_answer__pack
                     (const ActiveRewardAnswer   *message,
                      uint8_t             *out);
size_t active_reward_answer__pack_to_buffer
                     (const ActiveRewardAnswer   *message,
                      ProtobufCBuffer     *buffer);
ActiveRewardAnswer *
       active_reward_answer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   active_reward_answer__free_unpacked
                     (ActiveRewardAnswer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DailyActivityData_Closure)
                 (const DailyActivityData *message,
                  void *closure_data);
typedef void (*ChivalryActivityData_Closure)
                 (const ChivalryActivityData *message,
                  void *closure_data);
typedef void (*ActivityInfoNotify_Closure)
                 (const ActivityInfoNotify *message,
                  void *closure_data);
typedef void (*ActiveRewardRequest_Closure)
                 (const ActiveRewardRequest *message,
                  void *closure_data);
typedef void (*ActiveRewardAnswer_Closure)
                 (const ActiveRewardAnswer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor daily_activity_data__descriptor;
extern const ProtobufCMessageDescriptor chivalry_activity_data__descriptor;
extern const ProtobufCMessageDescriptor activity_info_notify__descriptor;
extern const ProtobufCMessageDescriptor active_reward_request__descriptor;
extern const ProtobufCMessageDescriptor active_reward_answer__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_activity_2eproto__INCLUDED */
